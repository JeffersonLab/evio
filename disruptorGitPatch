diff --git a/Disruptor/CMakeLists.txt b/Disruptor/CMakeLists.txt
index 6f9bc4f..4e70c90 100644
--- a/Disruptor/CMakeLists.txt
+++ b/Disruptor/CMakeLists.txt
@@ -22,6 +22,7 @@ set(Disruptor_sources
     Sequence.cpp
     SequenceGroups.cpp
     SleepingWaitStrategy.cpp
+    SpinCountBackoffWaitStrategy.cpp
     SpinWait.cpp
     SpinWaitWaitStrategy.cpp
     stdafx.cpp
@@ -100,6 +101,7 @@ set(Disruptor_headers
     Sequencer.h
     SingleProducerSequencer.h
     SleepingWaitStrategy.h
+    SpinCountBackoffWaitStrategy.h
     SpinWait.h
     SpinWaitWaitStrategy.h
     ThreadPerTaskScheduler.h
diff --git a/Disruptor/SpinCountBackoffWaitStrategy.cpp b/Disruptor/SpinCountBackoffWaitStrategy.cpp
new file mode 100644
index 0000000..36a6a4b
--- /dev/null
+++ b/Disruptor/SpinCountBackoffWaitStrategy.cpp
@@ -0,0 +1,71 @@
+#include "stdafx.h"
+#include "SpinCountBackoffWaitStrategy.h"
+#include "BlockingWaitStrategy.h"
+
+#include <ostream>
+#include <iostream>
+
+#include "ISequenceBarrier.h"
+#include "Sequence.h"
+
+
+namespace Disruptor
+{
+
+    SpinCountBackoffWaitStrategy::SpinCountBackoffWaitStrategy()
+    {
+        this->SPIN_TRIES = 10000;
+        this->fallbackStrategy = std::make_shared< BlockingWaitStrategy >();
+    }
+
+    SpinCountBackoffWaitStrategy::SpinCountBackoffWaitStrategy(std::uint32_t spinTries,
+                                                               std::shared_ptr<IWaitStrategy> fallbackStrategy)
+    {
+        this->SPIN_TRIES = spinTries;
+        if (spinTries < 1) {
+            this->SPIN_TRIES = 1;
+        }
+
+        this->fallbackStrategy = fallbackStrategy;
+        if (fallbackStrategy == nullptr) {
+            this->fallbackStrategy = std::make_shared< BlockingWaitStrategy >();
+        }
+    }
+
+
+    std::int64_t SpinCountBackoffWaitStrategy::waitFor(std::int64_t sequence,
+                                                       Sequence& cursor,
+                                                       ISequence& dependentSequence,
+                                                       ISequenceBarrier& barrier)
+    {
+        std::int64_t availableSequence;
+        std::uint32_t counter = SPIN_TRIES;
+
+        do {
+            if ((availableSequence = dependentSequence.value()) >= sequence) {
+                return availableSequence;
+            }
+
+            if (0 == --counter) {
+                return fallbackStrategy->waitFor(sequence, cursor, dependentSequence, barrier);
+            }
+            //std::cout << " " <<  counter;
+            barrier.checkAlert();
+            //spinWait.spinOnce();
+
+        } while (true);
+    }
+
+    void SpinCountBackoffWaitStrategy::signalAllWhenBlocking()
+    {
+        fallbackStrategy->signalAllWhenBlocking();
+    }
+
+    void SpinCountBackoffWaitStrategy::writeDescriptionTo(std::ostream& stream) const
+    {
+        stream << "SpinCountBackoffWaitStrategy";
+    }
+
+
+} // namespace Disruptor
+
diff --git a/Disruptor/SpinCountBackoffWaitStrategy.h b/Disruptor/SpinCountBackoffWaitStrategy.h
new file mode 100644
index 0000000..9739551
--- /dev/null
+++ b/Disruptor/SpinCountBackoffWaitStrategy.h
@@ -0,0 +1,57 @@
+#pragma once
+
+#include <boost/thread.hpp>
+
+#include "Disruptor/IWaitStrategy.h"
+
+
+namespace Disruptor
+{
+
+    /**
+     * <p>The SpinCountBackoffWait strategy spins for a given number of times then
+     * waits using the configured fallback WaitStrategy.</p>
+     * This combination wait strategy worked well in Java with the fallback being BlockingWaitStrategy,
+     * so that's the default here.
+     *
+     * @author timmer
+     * @date 2/18/2020
+     */
+    class SpinCountBackoffWaitStrategy : public IWaitStrategy
+    {
+
+    public:
+
+        /** Constructor defaulting to 10,000 spins and BlockingWaitStrategy when finished spinning. */
+        SpinCountBackoffWaitStrategy();
+
+        /**
+         * Constructor specifying number of spins and the back up wait strategy it switches to after spinning.
+         * @param spinTries number of spins.
+         * @param fallbackStrategy back up wait strategy.
+         */
+        SpinCountBackoffWaitStrategy(std::uint32_t spinTries, std::shared_ptr<IWaitStrategy> fallbackStrategy);
+
+        /**
+         * \see IWaitStrategy::waitFor
+         */
+        std::int64_t waitFor(std::int64_t sequence,
+                             Sequence& cursor,
+                             ISequence& dependentSequence,
+                             ISequenceBarrier& barrier) override;
+
+        /**
+         * \see IWaitStrategy::signalAllWhenBlocking
+         */
+        void signalAllWhenBlocking() override;
+
+        void writeDescriptionTo(std::ostream& stream) const override;
+
+    private:
+
+        std::uint32_t SPIN_TRIES;
+        std::shared_ptr<IWaitStrategy> fallbackStrategy;
+
+    };
+
+} // namespace Disruptor
