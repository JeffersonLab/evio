# scons build file for evio
Import('env', 'libDir', 'incDir', 'archIncDir', 'debugSuffix')
import os
from os import sep

headerList = ['evioException.hxx',
              'evioDictionary.hxx',
              'evioChannel.hxx',
              'evioFileChannel.hxx',
              'evioBufferChannel.hxx',
              'evioSocketChannel.hxx',
              'evioBankIndex.hxx',
              'evioUtil.hxx',
              'evioUtilTemplates.hxx']

linkList = [archIncDir + sep + 'evioException.hxx',
            archIncDir + sep + 'evioDictionary.hxx',
            archIncDir + sep + 'evioChannel.hxx',
            archIncDir + sep + 'evioFileChannel.hxx',
            archIncDir + sep + 'evioBufferChannel.hxx',
            archIncDir + sep + 'evioSocketChannel.hxx',
            archIncDir + sep + 'evioBankIndex.hxx',
            archIncDir + sep + 'evioUtil.hxx',
            archIncDir + sep + 'evioUtilTemplates.hxx']

fileList = ['evioException.cc', 'evioDictionary.cc', 'evioFileChannel.cc', 'evioBufferChannel.cc', 'evioSocketChannel.cc', 'evioBankIndex.cc', 'evioUtil.cc']

env.AppendUnique(CPPPATH = ['.', '#src/libsrc'])
evioxxLib = env.SharedLibrary(target = 'evioxx'+debugSuffix, source = fileList)
    
env.Alias("install", env.Install(target = incDir, source = headerList))
env.Alias("install", env.Install(target = libDir, source = evioxxLib))
# create symbolic links to installed header files
env.Alias("install", env.CreateSymbolicLinks(target = linkList, source = env.Install(target = incDir, source = headerList)))
