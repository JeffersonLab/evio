<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.jlab.coda</groupId>
  <artifactId>jevio</artifactId>
  <version>6.0-SNAPSHOT</version>
  <name>Jefferson Lab EVIO Java Library (JEVIO)</name>
  <description>Java library for EVIO (Event Input/Output)</description>
  <packaging>jar</packaging>

  <!-- Properties for versions -->
  <properties>

    <!-- Set Java version -->
    <!-- Compatibility: for Java 8 input 1.8 below   -->
    <java.version>15</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <lz4.version>1.8.0</lz4.version>
    <disruptor.version>4.0.0</disruptor.version>
    <java.jars.dir>${project.basedir}/java/jars</java.jars.dir>
  </properties>

  <dependencies>
    <!-- LZ4 compression library -->
    <dependency>
      <groupId>org.lz4</groupId>  <!-- Note: modern groupId for lz4-java might be org.lz4 or net.jpountz -->
      <artifactId>lz4-java</artifactId>
      <version>${lz4.version}</version>
    </dependency>
    <!-- LMAX Disruptor (for ring buffer concurrency) -->
    <dependency>
      <groupId>com.lmax</groupId>
      <artifactId>disruptor</artifactId>
      <version>${disruptor.version}</version>
      <scope>system</scope>
      <systemPath>${project.basedir}/java/jars/java15/disruptor-${disruptor.version}.jar</systemPath>
      </dependency>
  </dependencies>


<build>
 <sourceDirectory>${project.basedir}/java</sourceDirectory>
  <plugins>
    <!-- 1) Tell Maven to compile your non‑standard test folder -->
    <plugin>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>build-helper-maven-plugin</artifactId>
      <version>3.6.0</version>
      <executions>
        <execution>
          <id>add-jevio-tests</id>
          <phase>generate-test-sources</phase>
          <goals>
            <goal>add-test-source</goal>
          </goals>
          <configuration>
            <sources>
              <source>java/org/jlab/coda/jevio/test</source>
            </sources>
          </configuration>
        </execution>
      </executions>
    </plugin>

    <!-- 2) Make Surefire compile & (optionally) ignore JUnit‑style tests -->
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-surefire-plugin</artifactId>
      <version>3.0.0-M7</version>
      <configuration>
        <!-- pick up any *Test.java, even if they have no @Test annotations -->
        <includes>
          <include>**/**.java</include>
        </includes>
        <!-- don’t fail the build if no JUnit tests are found -->
        <testFailureIgnore>true</testFailureIgnore>
      </configuration>
    </plugin>

    <!-- 3) Exec each test’s main() during the test phase -->
    <plugin>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>exec-maven-plugin</artifactId>
      <version>3.1.0</version>
      <executions>
        <execution>
          <id>run-FileWriteTest</id>
          <phase>test</phase>
          <goals>
            <goal>java</goal>
          </goals>
          <configuration>
            <classpathScope>test</classpathScope>
            <mainClass>org.jlab.coda.jevio.test.FileWriteTest</mainClass>
          </configuration>
        </execution>
        <!--
          If you have other test classes (e.g. ReadWriteTest, FirstEventTest, etc.),
          duplicate the <execution> block above, change the <id> and <mainClass>.
        -->
      </executions>
    </plugin>

    <!-- your existing compiler / assembly plugins go here… -->
  </plugins>

</build>

</project>
