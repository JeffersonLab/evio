<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="d8/d64/classevio_1_1_record_header" kind="class" language="C++" prot="public">
    <compoundname>evio::RecordHeader</compoundname>
    <basecompoundref refid="d5/d6e/classevio_1_1_i_block_header" prot="public" virt="non-virtual">evio::IBlockHeader</basecompoundref>
    <includes local="no">RecordHeader.h</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a427468949a18c282f58f931c6763c769" prot="private" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::padValue</definition>
        <argsstring>[4]</argsstring>
        <name>padValue</name>
        <initializer>= {0,3,2,1}</initializer>
        <briefdescription>
<para>Array to help find number of bytes to pad data. </para>
        </briefdescription>
        <detaileddescription>
<para>Set static array to help find number of bytes to pad data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="120" column="25" bodyfile="src/libsrc/RecordHeader.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a056afbf222a666e1c9a2131284454f8f" prot="private" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::COMP_PADDING_MASK</definition>
        <argsstring></argsstring>
        <name>COMP_PADDING_MASK</name>
        <initializer>= 0x03000000</initializer>
        <briefdescription>
<para>Compressed data padding mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="192" column="31" bodyfile="src/libsrc/RecordHeader.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1ac629dbf20a470d2e8b5822389c25a0d8" prot="private" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::DATA_PADDING_MASK</definition>
        <argsstring></argsstring>
        <name>DATA_PADDING_MASK</name>
        <initializer>= 0x00C00000</initializer>
        <briefdescription>
<para>Uncompressed data padding mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="194" column="31" bodyfile="src/libsrc/RecordHeader.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1ade2222416567a873a39656e78bbc48c3" prot="private" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::USER_PADDING_MASK</definition>
        <argsstring></argsstring>
        <name>USER_PADDING_MASK</name>
        <initializer>= 0x00300000</initializer>
        <briefdescription>
<para>User header padding mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="196" column="31" bodyfile="src/libsrc/RecordHeader.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1aec76580e37780772011ce4833a1e9942" prot="private" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::HEADER_TYPE_MASK</definition>
        <argsstring></argsstring>
        <name>HEADER_TYPE_MASK</name>
        <initializer>= 0xF0000000</initializer>
        <briefdescription>
<para>Header type mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="198" column="31" bodyfile="src/libsrc/RecordHeader.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1ac6566ea9b1bba9c25b545831bcbb5200" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::HEADER_SIZE_WORDS</definition>
        <argsstring></argsstring>
        <name>HEADER_SIZE_WORDS</name>
        <initializer>= 14</initializer>
        <briefdescription>
<para>Number of 32-bit words in a normal sized header. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="125" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="125" bodyend="-1"/>
        <referencedby refid="de/dce/classevio_1_1_compact_event_builder_1a9042fd06e8d738ef387684b6df3c765f" compoundref="da/d47/_compact_event_builder_8cpp" startline="1189" endline="1287">evio::CompactEventBuilder::toFile</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a0e09d731589bcfe2705d0c606192f6eb" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::HEADER_SIZE_BYTES</definition>
        <argsstring></argsstring>
        <name>HEADER_SIZE_BYTES</name>
        <initializer>= 56</initializer>
        <briefdescription>
<para>Number of bytes in a normal sized header. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="127" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="127" bodyend="-1"/>
        <referencedby refid="d9/dcd/classevio_1_1_event_writer_1a5271d9b38e1e974be98f3ff98d5ed602" compoundref="db/dc8/_event_writer_8cpp" startline="155" endline="417">evio::EventWriter::EventWriter</referencedby>
        <referencedby refid="d6/dca/classevio_1_1_writer_1a314152ebeaa8d198bfc59206a73b457e" compoundref="dc/d0e/_writer_8cpp" startline="80" endline="118">evio::Writer::Writer</referencedby>
        <referencedby refid="d1/d17/classevio_1_1_writer_m_t_1a756450758e08def3dcc61fb7a2e085b3" compoundref="d9/d77/_writer_m_t_8cpp" startline="70" endline="133">evio::WriterMT::WriterMT</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a7c7cbf0f2bcc362662eea1fc4ff5d7ad" compoundref="d4/df6/_record_output_8cpp" startline="841" endline="999">evio::RecordOutput::build</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1aa9102d8facfed74bd17872cb452be8e8" compoundref="d8/d15/_reader_8cpp" startline="1404" endline="1480">evio::Reader::forceScanFile</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1ab8778ded697fc71281c287a2c2f99fa7" compoundref="d4/df6/_record_output_8cpp" startline="346" endline="348">evio::RecordOutput::getUncompressedSize</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a8bfee12a45ae1f40be0048c1a9044a07" compoundref="d6/d35/_record_input_8cpp" startline="419" endline="505">evio::RecordInput::readRecord</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1afcbb151999c6a2db36dbf06994756e0d" compoundref="d4/df6/_record_output_8cpp" startline="439" endline="442">evio::RecordOutput::roomForEvent</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a2df955f07faf6a4cd92cc8184eaa5d04" compoundref="d8/d15/_reader_8cpp" startline="1049" endline="1249">evio::Reader::scanBuffer</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a7a3c02dd9c1c87a57f4b73076071bced" compoundref="d8/d15/_reader_8cpp" startline="1491" endline="1619">evio::Reader::scanFile</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a703075aab48cc798dbccc8cb14d74725" compoundref="d8/d15/_reader_8cpp" startline="1259" endline="1394">evio::Reader::scanUncompressedBuffer</referencedby>
        <referencedby refid="de/dce/classevio_1_1_compact_event_builder_1a9042fd06e8d738ef387684b6df3c765f" compoundref="da/d47/_compact_event_builder_8cpp" startline="1189" endline="1287">evio::CompactEventBuilder::toFile</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a92896dc06aad1eb7f4add3ce7fec5424" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::HEADER_MAGIC</definition>
        <argsstring></argsstring>
        <name>HEADER_MAGIC</name>
        <initializer>= 0xc0da0100</initializer>
        <briefdescription>
<para>Magic number used to track endianness. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="129" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="129" bodyend="-1"/>
        <referencedby refid="de/dce/classevio_1_1_compact_event_builder_1a9042fd06e8d738ef387684b6df3c765f" compoundref="da/d47/_compact_event_builder_8cpp" startline="1189" endline="1287">evio::CompactEventBuilder::toFile</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a58e2767d98597e040d5640e4c288b90c" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::RECORD_LENGTH_OFFSET</definition>
        <argsstring></argsstring>
        <name>RECORD_LENGTH_OFFSET</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Byte offset from beginning of header to the record length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="134" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="134" bodyend="-1"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1ab9934d70bae0210536661c0a478dee03" compoundref="d8/d15/_reader_8cpp" startline="926" endline="955">evio::Reader::findRecordInfo</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a98137b725cd54ed93c12217ae249483b" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::RECORD_NUMBER_OFFSET</definition>
        <argsstring></argsstring>
        <name>RECORD_NUMBER_OFFSET</name>
        <initializer>= 4</initializer>
        <briefdescription>
<para>Byte offset from beginning of header to the record number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="136" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1aed99e247427969d1e27670edea24f0e2" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::HEADER_LENGTH_OFFSET</definition>
        <argsstring></argsstring>
        <name>HEADER_LENGTH_OFFSET</name>
        <initializer>= 8</initializer>
        <briefdescription>
<para>Byte offset from beginning of header to the header length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="138" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="138" bodyend="-1"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1ab9934d70bae0210536661c0a478dee03" compoundref="d8/d15/_reader_8cpp" startline="926" endline="955">evio::Reader::findRecordInfo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1ae5d68743951ae65bd72a1477a728993c" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::EVENT_COUNT_OFFSET</definition>
        <argsstring></argsstring>
        <name>EVENT_COUNT_OFFSET</name>
        <initializer>= 12</initializer>
        <briefdescription>
<para>Byte offset from beginning of header to the event index count. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="140" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="140" bodyend="-1"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1ab9934d70bae0210536661c0a478dee03" compoundref="d8/d15/_reader_8cpp" startline="926" endline="955">evio::Reader::findRecordInfo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a1b0ce8aa63d88b861fca36a5561c7122" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::INDEX_ARRAY_OFFSET</definition>
        <argsstring></argsstring>
        <name>INDEX_ARRAY_OFFSET</name>
        <initializer>= 16</initializer>
        <briefdescription>
<para>Byte offset from beginning of header to the index array length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="142" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="142" bodyend="-1"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1ab9934d70bae0210536661c0a478dee03" compoundref="d8/d15/_reader_8cpp" startline="926" endline="955">evio::Reader::findRecordInfo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1ac420593fe475899308138f3bd98e5f38" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::BIT_INFO_OFFSET</definition>
        <argsstring></argsstring>
        <name>BIT_INFO_OFFSET</name>
        <initializer>= 20</initializer>
        <briefdescription>
<para>Byte offset from beginning of header to bit info word. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="144" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="144" bodyend="-1"/>
        <referencedby refid="d6/dca/classevio_1_1_writer_1a8f01bf28c0d2910947fca9a841a1fc7b" compoundref="dc/d0e/_writer_8cpp" startline="1247" endline="1321">evio::Writer::close</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1ab9934d70bae0210536661c0a478dee03" compoundref="d8/d15/_reader_8cpp" startline="926" endline="955">evio::Reader::findRecordInfo</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a37f1b0d0b94e58f9015204f675bbd3f8" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::USER_LENGTH_OFFSET</definition>
        <argsstring></argsstring>
        <name>USER_LENGTH_OFFSET</name>
        <initializer>= 24</initializer>
        <briefdescription>
<para>Byte offset from beginning of header to the user header length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="146" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="146" bodyend="-1"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1ab9934d70bae0210536661c0a478dee03" compoundref="d8/d15/_reader_8cpp" startline="926" endline="955">evio::Reader::findRecordInfo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a001af5c0f57d829c9d104e0582140b92" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::MAGIC_OFFSET</definition>
        <argsstring></argsstring>
        <name>MAGIC_OFFSET</name>
        <initializer>= 28</initializer>
        <briefdescription>
<para>Byte offset from beginning of header to the magic number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="148" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1aa8e92627a8294434d3e4762fd42e4dff" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::UNCOMPRESSED_LENGTH_OFFSET</definition>
        <argsstring></argsstring>
        <name>UNCOMPRESSED_LENGTH_OFFSET</name>
        <initializer>= 32</initializer>
        <briefdescription>
<para>Byte offset from beginning of header to the uncompressed data length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="150" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="150" bodyend="-1"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a74ecfb216487866c7a3ddd6e5c8b153b" compoundref="d8/d15/_reader_8cpp" startline="1758" endline="1837">evio::Reader::addStructure</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1ab9934d70bae0210536661c0a478dee03" compoundref="d8/d15/_reader_8cpp" startline="926" endline="955">evio::Reader::findRecordInfo</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a20dccea3833e50fdeebbae49ab787fde" compoundref="d8/d15/_reader_8cpp" startline="1634" endline="1727">evio::Reader::removeStructure</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a588247cf4b37ae9e2f35912cd2b7aae5" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::COMPRESSION_TYPE_OFFSET</definition>
        <argsstring></argsstring>
        <name>COMPRESSION_TYPE_OFFSET</name>
        <initializer>= 36</initializer>
        <briefdescription>
<para>Byte offset from beginning of header to the compression type &amp; compressed data length word. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="152" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="152" bodyend="-1"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1ab9934d70bae0210536661c0a478dee03" compoundref="d8/d15/_reader_8cpp" startline="926" endline="955">evio::Reader::findRecordInfo</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1ae5f1f849eacf94dbd4bc3855d9565588" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::REGISTER1_OFFSET</definition>
        <argsstring></argsstring>
        <name>REGISTER1_OFFSET</name>
        <initializer>= 40</initializer>
        <briefdescription>
<para>Byte offset from beginning of header to the user register #1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="154" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a4b2b8d0940219944a8d3ba9467e79824" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::REGISTER2_OFFSET</definition>
        <argsstring></argsstring>
        <name>REGISTER2_OFFSET</name>
        <initializer>= 48</initializer>
        <briefdescription>
<para>Byte offset from beginning of header to the user register #2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="156" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a0acd86bd77c7a853b56ecfd981161469" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::DICTIONARY_BIT</definition>
        <argsstring></argsstring>
        <name>DICTIONARY_BIT</name>
        <initializer>= 0x100</initializer>
        <briefdescription>
<para>8th bit set in bitInfo word in header means contains dictionary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="161" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1ac5620e051ef9ec48823e228d6e212770" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::FIRST_EVENT_BIT</definition>
        <argsstring></argsstring>
        <name>FIRST_EVENT_BIT</name>
        <initializer>= 0x200</initializer>
        <briefdescription>
<para>9th bit set in bitInfo word in header means every split file has same first event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="163" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1ac7ddde1d360d02cf22ba9790bf70c6b7" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::LAST_RECORD_BIT</definition>
        <argsstring></argsstring>
        <name>LAST_RECORD_BIT</name>
        <initializer>= 0x400</initializer>
        <briefdescription>
<para>10th bit set in bitInfo word in header means is last in stream or file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="165" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a5740099aa9816824f9c28240d10c4104" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::DATA_ROC_RAW_BITS</definition>
        <argsstring></argsstring>
        <name>DATA_ROC_RAW_BITS</name>
        <initializer>= 0x000</initializer>
        <briefdescription>
<para>11-14th bits in bitInfo word in header for CODA data type, ROC raw = 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="168" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1ae471e5df8fd97c256bc8b63ff97f4de5" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::DATA_PHYSICS_BITS</definition>
        <argsstring></argsstring>
        <name>DATA_PHYSICS_BITS</name>
        <initializer>= 0x800</initializer>
        <briefdescription>
<para>11-14th bits in bitInfo word in header for CODA data type, physics = 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="170" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a57c866e62d930b5ad4b6a977cf6eff4b" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::DATA_PARTIAL_BITS</definition>
        <argsstring></argsstring>
        <name>DATA_PARTIAL_BITS</name>
        <initializer>= 0x1000</initializer>
        <briefdescription>
<para>11-14th bits in bitInfo word in header for CODA data type, partial physics = 2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="172" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1ac91d9c4b40dfe746ed015799870b7dd3" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::DATA_DISENTANGLED_BITS</definition>
        <argsstring></argsstring>
        <name>DATA_DISENTANGLED_BITS</name>
        <initializer>= 0x1800</initializer>
        <briefdescription>
<para>11-14th bits in bitInfo word in header for CODA data type, disentangled = 3. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="174" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a3de06a9ab2b0231d9e17554b606c95b3" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::DATA_USER_BITS</definition>
        <argsstring></argsstring>
        <name>DATA_USER_BITS</name>
        <initializer>= 0x2000</initializer>
        <briefdescription>
<para>11-14th bits in bitInfo word in header for CODA data type, user = 4. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="176" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a3d79799c4b5b39454015f6be834e55aa" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::DATA_CONTROL_BITS</definition>
        <argsstring></argsstring>
        <name>DATA_CONTROL_BITS</name>
        <initializer>= 0x2800</initializer>
        <briefdescription>
<para>11-14th bits in bitInfo word in record header for CODA data type, control = 5. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="178" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1aa79aabcabbbad053f77fb9a43999cc17" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::DATA_OTHER_BITS</definition>
        <argsstring></argsstring>
        <name>DATA_OTHER_BITS</name>
        <initializer>= 0x7800</initializer>
        <briefdescription>
<para>11-14th bits in bitInfo word in record header for CODA data type, other = 15. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="180" column="33" bodyfile="src/libsrc/RecordHeader.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1ad19ddc97493261aaf446ac33991987b7" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::VERSION_MASK</definition>
        <argsstring></argsstring>
        <name>VERSION_MASK</name>
        <initializer>= 0xff</initializer>
        <briefdescription>
<para>Mask to get version number from 6th int in header. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="185" column="31" bodyfile="src/libsrc/RecordHeader.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a3e75aee4fcc5abe4fa8f3a9fef7bba18" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordHeader::LAST_RECORD_MASK</definition>
        <argsstring></argsstring>
        <name>LAST_RECORD_MASK</name>
        <initializer>= 0x400</initializer>
        <briefdescription>
<para>&quot;Last record&quot; is 11th bit in bitInfo word. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="187" column="31" bodyfile="src/libsrc/RecordHeader.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d6e/classevio_1_1_i_block_header_1ac5f22d640a8987649db4fd4c8c699cb7" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::IBlockHeader::MAGIC_NUMBER</definition>
        <argsstring></argsstring>
        <name>MAGIC_NUMBER</name>
        <initializer>= 0xc0da0100</initializer>
        <briefdescription>
<para>The magic number, should be the value of <computeroutput>magicNumber</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IBlockHeader.h" line="41" column="31" bodyfile="src/libsrc/IBlockHeader.h" bodystart="41" bodyend="-1"/>
        <referencedby refid="d3/d87/classevio_1_1_util_1a480d33b2eeef523ab4d2109d88d5f323" compoundref="dd/d90/_util_8h" startline="412" endline="446">evio::Util::findEvioVersion</referencedby>
        <referencedby refid="dd/db3/classevio_1_1_evio_reader_v4_1ab851d0a680a06875f14cbeee08c62c62" compoundref="de/da5/_evio_reader_v4_8cpp" startline="455" endline="574">evio::EvioReaderV4::parseFirstHeader</referencedby>
        <referencedby refid="d7/d9e/classevio_1_1_block_header_v2_1a0fc718e078e962ca590de71d8a03c308" compoundref="da/d19/_block_header_v2_8h" startline="368" endline="374">evio::BlockHeaderV2::setMagicNumber</referencedby>
        <referencedby refid="da/de6/classevio_1_1_block_header_v4_1aea332a5d6321b9fdd23958356f49ffff" compoundref="d8/da4/_block_header_v4_8h" startline="691" endline="697">evio::BlockHeaderV4::setMagicNumber</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1afe5638e9debe18063838d6060da230b2" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t evio::RecordHeader::recordUserRegisterFirst</definition>
        <argsstring></argsstring>
        <name>recordUserRegisterFirst</name>
        <initializer>= 0ULL</initializer>
        <briefdescription>
<para>First user-defined 64-bit register. </para>
        </briefdescription>
        <detaileddescription>
<para>11th and 12th words. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="203" column="18" bodyfile="src/libsrc/RecordHeader.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a659120baa1b318ad2b23ca9d6dbeddfe" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t evio::RecordHeader::recordUserRegisterSecond</definition>
        <argsstring></argsstring>
        <name>recordUserRegisterSecond</name>
        <initializer>= 0ULL</initializer>
        <briefdescription>
<para>Second user-defined 64-bit register. </para>
        </briefdescription>
        <detaileddescription>
<para>13th and 14th words. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="205" column="18" bodyfile="src/libsrc/RecordHeader.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a33ade91bcb5d750236b5f5f50118cdad" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t evio::RecordHeader::position</definition>
        <argsstring></argsstring>
        <name>position</name>
        <initializer>= 0ULL</initializer>
        <briefdescription>
<para>Position of this header in a file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="207" column="16" bodyfile="src/libsrc/RecordHeader.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a2f025633b2c7e4d17a5034bf9951af50" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::recordLength</definition>
        <argsstring></argsstring>
        <name>recordLength</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Length of the entire record this header is a part of (bytes). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="209" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1aeccbdb500e2958c12bbaf0409b33fdb8" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::recordLengthWords</definition>
        <argsstring></argsstring>
        <name>recordLengthWords</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Length of the entire record this header is a part of (32-bit words). </para>
        </briefdescription>
        <detaileddescription>
<para>1st word. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="211" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1af77e6d8727d96bc8162058bf3dc74320" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::recordNumber</definition>
        <argsstring></argsstring>
        <name>recordNumber</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>Record number. </para>
        </briefdescription>
        <detaileddescription>
<para>2nd word. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="213" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1ad2c8820188ce9d3ed44234463594be97" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::entries</definition>
        <argsstring></argsstring>
        <name>entries</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Event or record count. </para>
        </briefdescription>
        <detaileddescription>
<para>4th word. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="217" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a12185906a1b11a2a72a76d9b7c013015" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::bitInfo</definition>
        <argsstring></argsstring>
        <name>bitInfo</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>BitInfo &amp; version. </para>
        </briefdescription>
        <detaileddescription>
<para>6th word. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="219" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a317b672e939472031b8b4dc18d9ec2c2" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::eventType</definition>
        <argsstring></argsstring>
        <name>eventType</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Type of events in record, encoded in bitInfo word (0=ROC raw, 1=Physics, 2=Partial Physics, 3=Disentangled, 4=User, 5=Control, 15=Other). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="225" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a8c9bab0a505bd28d55d14e27862f10e4" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::headerLength</definition>
        <argsstring></argsstring>
        <name>headerLength</name>
        <initializer>= <ref refid="d8/d64/classevio_1_1_record_header_1a0e09d731589bcfe2705d0c606192f6eb" kindref="member">HEADER_SIZE_BYTES</ref></initializer>
        <briefdescription>
<para>Length of this header NOT including user header or index (bytes). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="227" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a4cd8bdca3c2d001a4a6b7a4294c5845d" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::headerLengthWords</definition>
        <argsstring></argsstring>
        <name>headerLengthWords</name>
        <initializer>= <ref refid="d8/d64/classevio_1_1_record_header_1ac6566ea9b1bba9c25b545831bcbb5200" kindref="member">HEADER_SIZE_WORDS</ref></initializer>
        <briefdescription>
<para>Length of this header (words). </para>
        </briefdescription>
        <detaileddescription>
<para>3rd word. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="229" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1aae752c32d5b5f2411a39f5d61357579c" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::userHeaderLength</definition>
        <argsstring></argsstring>
        <name>userHeaderLength</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Length of user-defined header (bytes). </para>
        </briefdescription>
        <detaileddescription>
<para>7th word. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="231" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a2cb176d66dc8d93dac77c9e0fbcf0197" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::userHeaderLengthWords</definition>
        <argsstring></argsstring>
        <name>userHeaderLengthWords</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Length of user-defined header when padded (words). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="233" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a8f45a493e25d088e58f38d24b4d5f45d" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::indexLength</definition>
        <argsstring></argsstring>
        <name>indexLength</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Length of index array (bytes). </para>
        </briefdescription>
        <detaileddescription>
<para>5th word. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="235" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a59e598f27be1b5bf3d86b0459cbf2fce" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::dataLength</definition>
        <argsstring></argsstring>
        <name>dataLength</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Uncompressed data length (bytes). </para>
        </briefdescription>
        <detaileddescription>
<para>9th word. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="237" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1ac25f697b08578995820305ecf954e920" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::dataLengthWords</definition>
        <argsstring></argsstring>
        <name>dataLengthWords</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Uncompressed data length when padded (words). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="239" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a8bc5a140901563b07907da2bd73aa4ab" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::compressedDataLength</definition>
        <argsstring></argsstring>
        <name>compressedDataLength</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Compressed data length (bytes). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="241" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1af17879d4b1b79e741b4b4ed454cde09f" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::compressedDataLengthWords</definition>
        <argsstring></argsstring>
        <name>compressedDataLengthWords</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Compressed data length (words) when padded. </para>
        </briefdescription>
        <detaileddescription>
<para>Lowest 28 bits of 10th word. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="243" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a79d5a65ef13fe995ac2af91ab15829ae" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::headerVersion</definition>
        <argsstring></argsstring>
        <name>headerVersion</name>
        <initializer>= 6</initializer>
        <briefdescription>
<para>Evio format version number. </para>
        </briefdescription>
        <detaileddescription>
<para>It is 6 when being written, else the version of file/buffer being read. Lowest byte of 6th word. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="246" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a7a16196700f81fecd2ab7167b68561f4" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::headerMagicWord</definition>
        <argsstring></argsstring>
        <name>headerMagicWord</name>
        <initializer>= <ref refid="d8/d64/classevio_1_1_record_header_1a92896dc06aad1eb7f4add3ce7fec5424" kindref="member">HEADER_MAGIC</ref></initializer>
        <briefdescription>
<para>Magic number for tracking endianness. </para>
        </briefdescription>
        <detaileddescription>
<para>8th word. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="248" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1abab691d970e77202d137b85ac7ff1edb" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::userHeaderLengthPadding</definition>
        <argsstring></argsstring>
        <name>userHeaderLengthPadding</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of bytes required to bring uncompressed user header to 4-byte boundary. </para>
        </briefdescription>
        <detaileddescription>
<para>Stored in 6th word. Updated automatically when lengths are set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="253" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a9e12112750d264a495ea4bd0c3e44a3c" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::dataLengthPadding</definition>
        <argsstring></argsstring>
        <name>dataLengthPadding</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of bytes required to bring uncompressed data to 4-byte boundary. </para>
        </briefdescription>
        <detaileddescription>
<para>Stored in 6th word. Updated automatically when lengths are set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="257" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1ad4686497cf935d321fba97c0bcc0a794" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::compressedDataLengthPadding</definition>
        <argsstring></argsstring>
        <name>compressedDataLengthPadding</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of bytes required to bring compressed data to 4-byte boundary. </para>
        </briefdescription>
        <detaileddescription>
<para>Stored in 6th word. Updated automatically when lengths are set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="261" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1ac011040cd74809922ad965d8c44aa547" prot="private" static="no" mutable="no">
        <type><ref refid="df/dd8/classevio_1_1_header_type" kindref="compound">HeaderType</ref></type>
        <definition>HeaderType evio::RecordHeader::headerType</definition>
        <argsstring></argsstring>
        <name>headerType</name>
        <initializer>{<ref refid="df/dd8/classevio_1_1_header_type_1a2b01085c1ea7b23010e4cb4447f2d04a" kindref="member">HeaderType::EVIO_RECORD</ref>}</initializer>
        <briefdescription>
<para>Type of header this is. </para>
        </briefdescription>
        <detaileddescription>
<para>Normal EVIO record by default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="264" column="20" bodyfile="src/libsrc/RecordHeader.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1a4b55dd5cedb266290ccfea5773f3820d" prot="private" static="no" mutable="no">
        <type><ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref></type>
        <definition>ByteOrder evio::RecordHeader::byteOrder</definition>
        <argsstring></argsstring>
        <name>byteOrder</name>
        <initializer>{<ref refid="da/d7d/classevio_1_1_byte_order_1ae4055f708921d4e6540ab4662d27147c" kindref="member">ByteOrder::ENDIAN_LOCAL</ref>}</initializer>
        <briefdescription>
<para>Byte order of file/buffer this header was read from. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="267" column="19" bodyfile="src/libsrc/RecordHeader.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d64/classevio_1_1_record_header_1acab811ee1ad6ccd7dcb5cc7c8f1a328a" prot="private" static="no" mutable="no">
        <type><ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747" kindref="member">Compressor::CompressionType</ref></type>
        <definition>Compressor::CompressionType evio::RecordHeader::compressionType</definition>
        <argsstring></argsstring>
        <name>compressionType</name>
        <initializer>{<ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747a056585718cbf5c7808c0e37b1f88dbb9" kindref="member">Compressor::UNCOMPRESSED</ref>}</initializer>
        <briefdescription>
<para>Type of data compression (0=none, 1=LZ4 fast, 2=LZ4 best, 3=gzip). </para>
        </briefdescription>
        <detaileddescription>
<para>Highest 4 bits of 10th word. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="271" column="37" bodyfile="src/libsrc/RecordHeader.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a87b6be69045dbe4a61b41bb0a5cf2d87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::RecordHeader::RecordHeader</definition>
        <argsstring>()</argsstring>
        <name>RecordHeader</name>
        <briefdescription>
<para>Default, no-arg constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="276" column="9" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a164a648f183c58e90ea6fd6623f8bb82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::RecordHeader::RecordHeader</definition>
        <argsstring>(const RecordHeader &amp;head)</argsstring>
        <name>RecordHeader</name>
        <param>
          <type>const <ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
          <declname>head</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>header to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="277" column="9" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="64" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1ac78ebb09279e9891dffcf75616494787" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::RecordHeader::RecordHeader</definition>
        <argsstring>(const HeaderType &amp;type)</argsstring>
        <name>RecordHeader</name>
        <param>
          <type>const <ref refid="df/dd8/classevio_1_1_header_type" kindref="compound">HeaderType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Constructor which sets the type of header this is. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of header this is </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if type is for file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="278" column="18" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="33" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1aea40f77aade540a904a4da54cead7c17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::RecordHeader::RecordHeader</definition>
        <argsstring>(size_t pos, uint32_t len, uint32_t ent)</argsstring>
        <name>RecordHeader</name>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ent</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position in file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of record in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ent</parametername>
</parameternamelist>
<parameterdescription>
<para>number of events </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="279" column="9" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="49" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a811ee974e1d1aadcf8485cb7132f8142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::RecordHeader::~RecordHeader</definition>
        <argsstring>()=default</argsstring>
        <name>~RecordHeader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="280" column="9"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a94e631bc5534631bca120086b28f5452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
        <definition>RecordHeader &amp; evio::RecordHeader::operator=</definition>
        <argsstring>(const RecordHeader &amp;head)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="282" column="23" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="100" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a33d3063df6c17cafcad63b75f3005a34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::copy</definition>
        <argsstring>(std::shared_ptr&lt; RecordHeader &gt; const &amp;head)</argsstring>
        <name>copy</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &gt; const &amp;</type>
          <declname>head</declname>
        </param>
        <briefdescription>
<para>Copy method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>header to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="291" column="14" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="142" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a25b332a34f112a61e614a41dce5633c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Reset generated data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="292" column="14" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="179" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a6cf59ba0454092a2e55f29e33096242b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="df/dd8/classevio_1_1_header_type" kindref="compound">HeaderType</ref> &amp;</type>
        <definition>const HeaderType &amp; evio::RecordHeader::getHeaderType</definition>
        <argsstring>() const</argsstring>
        <name>getHeaderType</name>
        <briefdescription>
<para>Get the type of header this is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>type of header this is. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="299" column="27" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="404" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1ace2be836d16a4e4b58df6a6059d378b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getUncompressedRecordLength</definition>
        <argsstring>() const</argsstring>
        <name>getUncompressedRecordLength</name>
        <briefdescription>
<para>Get the padded length in bytes of the entire uncompressed record. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>padded length in bytes of the entire uncompressed record. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="302" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="240" bodyend="243"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a2df955f07faf6a4cd92cc8184eaa5d04" compoundref="d8/d15/_reader_8cpp" startline="1049" endline="1249">evio::Reader::scanBuffer</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a0af2d3f06fb440be383b72d5e9ba5db4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getCompressedRecordLength</definition>
        <argsstring>() const</argsstring>
        <name>getCompressedRecordLength</name>
        <briefdescription>
<para>Get the padded length in bytes of the entire compressed record. </para>
        </briefdescription>
        <detaileddescription>
<para>If the data is not compressed, then this returns 0; <simplesect kind="return"><para>padded length in bytes of the entire compressed record, else 0 if not compressed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="303" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="251" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1ac33a0f8082aa36f0e8fd2562d82e647a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getLength</definition>
        <argsstring>() const</argsstring>
        <name>getLength</name>
        <briefdescription>
<para>Get the total length of this record in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>total length of this record in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="304" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="278" bodyend="278"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1aa9102d8facfed74bd17872cb452be8e8" compoundref="d8/d15/_reader_8cpp" startline="1404" endline="1480">evio::Reader::forceScanFile</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a2df955f07faf6a4cd92cc8184eaa5d04" compoundref="d8/d15/_reader_8cpp" startline="1049" endline="1249">evio::Reader::scanBuffer</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a703075aab48cc798dbccc8cb14d74725" compoundref="d8/d15/_reader_8cpp" startline="1259" endline="1394">evio::Reader::scanUncompressedBuffer</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1af0ece247a3718515ff1e393c3b810337" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getLengthWords</definition>
        <argsstring>() const</argsstring>
        <name>getLengthWords</name>
        <briefdescription>
<para>Get the total length of this record in 32 bit words. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>total length of this record in 32 bit words. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="305" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="285" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a850be1f267c82ff109e5db4ac59522a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getEntries</definition>
        <argsstring>() const</argsstring>
        <name>getEntries</name>
        <briefdescription>
<para>Get the number of events or entries in index. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of events or entries in index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="306" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="292" bodyend="292"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1aa9102d8facfed74bd17872cb452be8e8" compoundref="d8/d15/_reader_8cpp" startline="1404" endline="1480">evio::Reader::forceScanFile</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a2df955f07faf6a4cd92cc8184eaa5d04" compoundref="d8/d15/_reader_8cpp" startline="1049" endline="1249">evio::Reader::scanBuffer</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a703075aab48cc798dbccc8cb14d74725" compoundref="d8/d15/_reader_8cpp" startline="1259" endline="1394">evio::Reader::scanUncompressedBuffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a3e6b9d38de5b13bcc2b7741578de3d64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getUserHeaderLength</definition>
        <argsstring>() const</argsstring>
        <name>getUserHeaderLength</name>
        <briefdescription>
<para>Get the length of the user-defined header in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>length of the user-defined header in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="307" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="306" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a84ab13deb24469bc81dba390eeb72577" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getUserHeaderLengthWords</definition>
        <argsstring>() const</argsstring>
        <name>getUserHeaderLengthWords</name>
        <briefdescription>
<para>Get the length of the user-defined header in words. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>length of the user-defined header in words. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="308" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="313" bodyend="313"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a703075aab48cc798dbccc8cb14d74725" compoundref="d8/d15/_reader_8cpp" startline="1259" endline="1394">evio::Reader::scanUncompressedBuffer</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a146a11c790b34ab190a340c206f17dc1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getDataLength</definition>
        <argsstring>() const</argsstring>
        <name>getDataLength</name>
        <briefdescription>
<para>Get the length of the uncompressed data in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>length of the uncompressed data in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="310" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="327" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1aa434393ea672e70e77bd7fa188eff393" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getDataLengthWords</definition>
        <argsstring>() const</argsstring>
        <name>getDataLengthWords</name>
        <briefdescription>
<para>Get the length of the uncompressed data in words (padded). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>length of the uncompressed data in words (padded). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="311" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="334" bodyend="334"/>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1af943f7595eb02bbbb769a27ccc8f5aa4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getIndexLength</definition>
        <argsstring>() const</argsstring>
        <name>getIndexLength</name>
        <briefdescription>
<para>Get the length of the index array in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>length of the index array in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="312" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="341" bodyend="341"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a7a3c02dd9c1c87a57f4b73076071bced" compoundref="d8/d15/_reader_8cpp" startline="1491" endline="1619">evio::Reader::scanFile</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a703075aab48cc798dbccc8cb14d74725" compoundref="d8/d15/_reader_8cpp" startline="1259" endline="1394">evio::Reader::scanUncompressedBuffer</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1af1acf0f962eed8b770022681f6e10a5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getCompressedDataLength</definition>
        <argsstring>() const</argsstring>
        <name>getCompressedDataLength</name>
        <briefdescription>
<para>Get the length of the compressed data in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>length of the compressed data in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="313" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="348" bodyend="348"/>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1afe2516d4567fdbc86f2477047425e1a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getCompressedDataLengthPadding</definition>
        <argsstring>() const</argsstring>
        <name>getCompressedDataLengthPadding</name>
        <briefdescription>
<para>Get the padding of the compressed data in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>padding of the compressed data in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="314" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="355" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1add07a5f160f5e8e4467da1424c7df057" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getCompressedDataLengthWords</definition>
        <argsstring>() const</argsstring>
        <name>getCompressedDataLengthWords</name>
        <briefdescription>
<para>Get the length of the compressed data in words (padded). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>length of the compressed data in words (padded). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="315" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="362" bodyend="362"/>
        <referencedby refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" compoundref="dd/d2d/_record_header_8cpp" startline="1703" endline="1741">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a0221831e904860de343cfa2fcbe05f2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getHeaderLength</definition>
        <argsstring>() const</argsstring>
        <name>getHeaderLength</name>
        <briefdescription>
<para>Get the length of this header in bytes (NOT including user header or index). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>length of this header in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="316" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="369" bodyend="369"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a2df955f07faf6a4cd92cc8184eaa5d04" compoundref="d8/d15/_reader_8cpp" startline="1049" endline="1249">evio::Reader::scanBuffer</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a703075aab48cc798dbccc8cb14d74725" compoundref="d8/d15/_reader_8cpp" startline="1259" endline="1394">evio::Reader::scanUncompressedBuffer</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a622ecbac309d428a1e9a916827e1b112" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getRecordNumber</definition>
        <argsstring>() const</argsstring>
        <name>getRecordNumber</name>
        <briefdescription>
<para>Get the record number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>record number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="318" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="383" bodyend="383"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1aa9102d8facfed74bd17872cb452be8e8" compoundref="d8/d15/_reader_8cpp" startline="1404" endline="1480">evio::Reader::forceScanFile</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a2df955f07faf6a4cd92cc8184eaa5d04" compoundref="d8/d15/_reader_8cpp" startline="1049" endline="1249">evio::Reader::scanBuffer</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a703075aab48cc798dbccc8cb14d74725" compoundref="d8/d15/_reader_8cpp" startline="1259" endline="1394">evio::Reader::scanUncompressedBuffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a6c473546949efdcc7a977e88e7ee07f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t evio::RecordHeader::getUserRegisterFirst</definition>
        <argsstring>() const</argsstring>
        <name>getUserRegisterFirst</name>
        <briefdescription>
<para>Get the first user-defined 64-bit register. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>first user-defined 64-bit register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="319" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="390" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a41e78ea2a910e0e544267912ef0b7d62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t evio::RecordHeader::getUserRegisterSecond</definition>
        <argsstring>() const</argsstring>
        <name>getUserRegisterSecond</name>
        <briefdescription>
<para>Get the second user-defined 64-bit register. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>second user-defined 64-bit register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="320" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="397" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a391bafd39f9bdd962ccc114b3ff66aeb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t evio::RecordHeader::getPosition</definition>
        <argsstring>() const</argsstring>
        <name>getPosition</name>
        <briefdescription>
<para>Get the position of this record in a file. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>position of this record in a file. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="321" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="271" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1aba16ed1ed865333327bf64ad53d09e76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747" kindref="member">Compressor::CompressionType</ref></type>
        <definition>Compressor::CompressionType evio::RecordHeader::getCompressionType</definition>
        <argsstring>() const</argsstring>
        <name>getCompressionType</name>
        <briefdescription>
<para>Get the type of compression used. </para>
        </briefdescription>
        <detaileddescription>
<para>0=none, 1=LZ4 fast, 2=LZ4 best, 3=gzip. <simplesect kind="return"><para>type of compression used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="322" column="38" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="299" bodyend="299"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a703075aab48cc798dbccc8cb14d74725" compoundref="d8/d15/_reader_8cpp" startline="1259" endline="1394">evio::Reader::scanUncompressedBuffer</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a3f77e14621f9abcb226b48a1939cb8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::setBitInfo</definition>
        <argsstring>(bool isLastRecord, bool haveFirstEvent, bool haveDictionary)</argsstring>
        <name>setBitInfo</name>
        <param>
          <type>bool</type>
          <declname>isLastRecord</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>haveFirstEvent</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>haveDictionary</declname>
        </param>
        <briefdescription>
<para>Set the bit info word for a record header. </para>
        </briefdescription>
        <detaileddescription>
<para>Current value of bitInfo is lost. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>isLastRecord</parametername>
</parameternamelist>
<parameterdescription>
<para>true if record is last in stream or file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>haveFirstEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>true if record has a first event in user header. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>haveDictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>true if record has dictionary in user header. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new bit info word. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="326" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="424" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1ada84924ed1f01899fc4500b07c7f488b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getBitInfoWord</definition>
        <argsstring>() const</argsstring>
        <name>getBitInfoWord</name>
        <briefdescription>
<para>Get the bit info word. </para>
        </briefdescription>
        <detaileddescription>
<para>Will initialize if not already done. <simplesect kind="return"><para>bit info word. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="327" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="446" bodyend="446"/>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1acbd14b3e5c1cd26c7b5d8a734aca59b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::setBitInfoWord</definition>
        <argsstring>(uint32_t word)</argsstring>
        <name>setBitInfoWord</name>
        <param>
          <type>uint32_t</type>
          <declname>word</declname>
        </param>
        <briefdescription>
<para>Set the bit info word and related values. </para>
        </briefdescription>
        <detaileddescription>
<para>NOT FOR GENERAL USE! <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>word</parametername>
</parameternamelist>
<parameterdescription>
<para>bit info word. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="328" column="14" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="454" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a97ec36a30b04e8ef05c8bd0ee4eb496a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::setBitInfoWord</definition>
        <argsstring>(std::bitset&lt; 24 &gt; const &amp;set)</argsstring>
        <name>setBitInfoWord</name>
        <param>
          <type>std::bitset&lt; 24 &gt; const &amp;</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Set the bit info word and related values. </para>
        </briefdescription>
        <detaileddescription>
<para>NOT FOR GENERAL USE! <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to bitset containing all bits to be set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="329" column="14" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="465" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a13c64348c2dd2f25aed34ead5c9ca74b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::hasFirstEvent</definition>
        <argsstring>(bool hasFirst)</argsstring>
        <name>hasFirstEvent</name>
        <param>
          <type>bool</type>
          <declname>hasFirst</declname>
        </param>
        <briefdescription>
<para>Set the bit which says record has a first event in the user header. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hasFirst</parametername>
</parameternamelist>
<parameterdescription>
<para>true if record has a first event in the user header. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new bitInfo word. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="340" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="587" bodyend="598"/>
        <referencedby refid="d6/dca/classevio_1_1_writer_1acaf968c34f10e8004994a91175e5a829" compoundref="dc/d0e/_writer_8cpp" startline="618" endline="669">evio::Writer::createRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1aeb2283945519b97d1f33b32cf7fcdaa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::hasDictionary</definition>
        <argsstring>(bool hasFirst)</argsstring>
        <name>hasDictionary</name>
        <param>
          <type>bool</type>
          <declname>hasFirst</declname>
        </param>
        <briefdescription>
<para>Set the bit which says record has a dictionary in the user header. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hasFirst</parametername>
</parameternamelist>
<parameterdescription>
<para>true if record has a dictionary in the user header. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new bitInfo word. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="343" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="613" bodyend="624"/>
        <referencedby refid="d6/dca/classevio_1_1_writer_1acaf968c34f10e8004994a91175e5a829" compoundref="dc/d0e/_writer_8cpp" startline="618" endline="669">evio::Writer::createRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1adb2fa395660e3d9656ef5ae91e12b4be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::isLastRecord</definition>
        <argsstring>(bool isLast)</argsstring>
        <name>isLastRecord</name>
        <param>
          <type>bool</type>
          <declname>isLast</declname>
        </param>
        <briefdescription>
<para>Set the bit which says record is last in file/buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>isLast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if record is last in file/buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new bitInfo word. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="347" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="647" bodyend="658"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a2df955f07faf6a4cd92cc8184eaa5d04" compoundref="d8/d15/_reader_8cpp" startline="1049" endline="1249">evio::Reader::scanBuffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a6f65ae4d0740ac3c7fcf29056c15c7ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::isLastRecord</definition>
        <argsstring>() const</argsstring>
        <name>isLastRecord</name>
        <briefdescription>
<para>Is this the header of the last record? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this is the header of the last record, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="348" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="665" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1af29b64992fcd30c456db80719c56a60f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::isCompressed</definition>
        <argsstring>() const</argsstring>
        <name>isCompressed</name>
        <briefdescription>
<para>Does this header indicate compressed data? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if header indicates compressed data, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="351" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="688" bodyend="688"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a2df955f07faf6a4cd92cc8184eaa5d04" compoundref="d8/d15/_reader_8cpp" startline="1049" endline="1249">evio::Reader::scanBuffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a0c5c80cf8f9b97679fd5a65c4e27a9a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::isEvioTrailer</definition>
        <argsstring>() const</argsstring>
        <name>isEvioTrailer</name>
        <briefdescription>
<para>Is this header an evio trailer? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this is an evio trailer, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="353" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="695" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a1e880f7a2c2538a6a8744213bea33d58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::isEvioRecord</definition>
        <argsstring>() const</argsstring>
        <name>isEvioRecord</name>
        <briefdescription>
<para>Is this header an evio record? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this is an evio record, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="354" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="709" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1ac9bba6ed72735786246a3e0409410eb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::isHipoTrailer</definition>
        <argsstring>() const</argsstring>
        <name>isHipoTrailer</name>
        <briefdescription>
<para>Is this header a hipo trailer? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this is a hipo trailer, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="355" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="702" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a713c0ca6447c818f9a7246e929f941a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::isHipoRecord</definition>
        <argsstring>() const</argsstring>
        <name>isHipoRecord</name>
        <briefdescription>
<para>Is this header a hipo record? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this is a hipo record, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="356" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="716" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a7c493d2545cfe5b936932b436bbe8188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::setBitInfoEventType</definition>
        <argsstring>(uint32_t type)</argsstring>
        <name>setBitInfoEventType</name>
        <param>
          <type>uint32_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Set the bit info of a record header for a specified CODA event type. </para>
        </briefdescription>
        <detaileddescription>
<para>Must be called AFTER <ref refid="d8/d64/classevio_1_1_record_header_1a3f77e14621f9abcb226b48a1939cb8c5" kindref="member">setBitInfo(bool, bool, bool)</ref> or <ref refid="d8/d64/classevio_1_1_record_header_1acbd14b3e5c1cd26c7b5d8a734aca59b5" kindref="member">setBitInfoWord(uint32_t)</ref> in order to have change preserved. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>event type (0=ROC raw, 1=Physics, 2=Partial Physics, 3=Disentangled, 4=User, 5=Control, 15=Other, else = nothing set). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new bit info word. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="366" column="19" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="771" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a0f835c88afb20af5c792e80c6700b4a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
        <definition>RecordHeader &amp; evio::RecordHeader::setHeaderType</definition>
        <argsstring>(HeaderType const &amp;type)</argsstring>
        <name>setHeaderType</name>
        <param>
          <type><ref refid="df/dd8/classevio_1_1_header_type" kindref="compound">HeaderType</ref> const &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Set this header&apos;s type. </para>
        </briefdescription>
        <detaileddescription>
<para>Normally done in constructor. Limited access. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of header. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="368" column="23" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="818" bodyend="830"/>
        <references refid="df/dd8/classevio_1_1_header_type_1a0788a70e8ebc44dd451025a6dc17290d" compoundref="d5/d98/_header_type_8h" startline="82" endline="82">evio::HeaderType::getValue</references>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a11dd11333c8ebb6190d59082ce547e03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
        <definition>RecordHeader &amp; evio::RecordHeader::setPosition</definition>
        <argsstring>(size_t pos)</argsstring>
        <name>setPosition</name>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Set the position of this record in a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of this record in a file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="369" column="23" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="838" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a09a3d3895345bc8c9133f3ce86947161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
        <definition>RecordHeader &amp; evio::RecordHeader::setRecordNumber</definition>
        <argsstring>(uint32_t num)</argsstring>
        <name>setRecordNumber</name>
        <param>
          <type>uint32_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Set the record number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>record number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="370" column="23" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="846" bodyend="846"/>
        <referencedby refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" compoundref="dd/d2d/_record_header_8cpp" startline="1703" endline="1741">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a2eb84874448358dc0fc468b537eed18a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
        <definition>RecordHeader &amp; evio::RecordHeader::setLength</definition>
        <argsstring>(uint32_t length)</argsstring>
        <name>setLength</name>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Set the record length in bytes &amp; words. </para>
        </briefdescription>
        <detaileddescription>
<para>If length is not a multiple of 4, you&apos;re on your own! <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of record in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="371" column="23" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="855" bodyend="861"/>
        <referencedby refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" compoundref="dd/d2d/_record_header_8cpp" startline="1703" endline="1741">main</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a2fef7d1826dc5c587f61f5f3a6a41039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
        <definition>RecordHeader &amp; evio::RecordHeader::setDataLength</definition>
        <argsstring>(uint32_t length)</argsstring>
        <name>setDataLength</name>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Set the uncompressed data length in bytes &amp; words and the padding. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of uncompressed data in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="372" column="23" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="869" bodyend="879"/>
        <referencedby refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" compoundref="dd/d2d/_record_header_8cpp" startline="1703" endline="1741">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a7270727098611e695f009bc6e125aaa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
        <definition>RecordHeader &amp; evio::RecordHeader::setCompressedDataLength</definition>
        <argsstring>(uint32_t length)</argsstring>
        <name>setCompressedDataLength</name>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Set the compressed data length in bytes &amp; words and the padding. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of compressed data in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="373" column="23" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="887" bodyend="897"/>
        <referencedby refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" compoundref="dd/d2d/_record_header_8cpp" startline="1703" endline="1741">main</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a50df756690ed1598f0bad7ce226ed1fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
        <definition>RecordHeader &amp; evio::RecordHeader::setIndexLength</definition>
        <argsstring>(uint32_t length)</argsstring>
        <name>setIndexLength</name>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Set the length of the index array in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>Length is forced to be a multiple of 4! <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of index array in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="374" column="23" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="906" bodyend="909"/>
        <referencedby refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" compoundref="dd/d2d/_record_header_8cpp" startline="1703" endline="1741">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1ae5812b82ce0e7ca51921ad30c9de7fe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
        <definition>RecordHeader &amp; evio::RecordHeader::setCompressionType</definition>
        <argsstring>(Compressor::CompressionType type)</argsstring>
        <name>setCompressionType</name>
        <param>
          <type><ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747" kindref="member">Compressor::CompressionType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Set the compression type. </para>
        </briefdescription>
        <detaileddescription>
<para>0=none, 1=LZ4 fast, 2=LZ4 best, 3=gzip. No compression for other values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>compression type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="375" column="23" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="918" bodyend="926"/>
        <referencedby refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" compoundref="dd/d2d/_record_header_8cpp" startline="1703" endline="1741">main</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a6dd3c88ba3a335fb5b9ba1aef76e456c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
        <definition>RecordHeader &amp; evio::RecordHeader::setEntries</definition>
        <argsstring>(uint32_t n)</argsstring>
        <name>setEntries</name>
        <param>
          <type>uint32_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Set the number of events or index entries. </para>
        </briefdescription>
        <detaileddescription>
<para>No compression for other values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of events or index entries. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="376" column="23" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="935" bodyend="935"/>
        <referencedby refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" compoundref="dd/d2d/_record_header_8cpp" startline="1703" endline="1741">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a45d972dacbf827ae6aed32f899ae6469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
        <definition>RecordHeader &amp; evio::RecordHeader::setUserHeaderLength</definition>
        <argsstring>(uint32_t length)</argsstring>
        <name>setUserHeaderLength</name>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Set the user-defined header&apos;s length in bytes &amp; words and the padding. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>user-defined header&apos;s length in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="377" column="23" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="943" bodyend="953"/>
        <referencedby refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" compoundref="dd/d2d/_record_header_8cpp" startline="1703" endline="1741">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a7592953012addde450fbf3100220e7b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
        <definition>RecordHeader &amp; evio::RecordHeader::setHeaderLength</definition>
        <argsstring>(uint32_t length)</argsstring>
        <name>setHeaderLength</name>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Set the this header&apos;s length in bytes &amp; words. </para>
        </briefdescription>
        <detaileddescription>
<para>If length is not a multiple of 4, you&apos;re on your own! <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>this header&apos;s length in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="378" column="23" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="962" bodyend="966"/>
        <referencedby refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" compoundref="dd/d2d/_record_header_8cpp" startline="1703" endline="1741">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a607d46d06781914cc7fc3bb37f0c9b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
        <definition>RecordHeader &amp; evio::RecordHeader::setUserRegisterFirst</definition>
        <argsstring>(uint64_t reg)</argsstring>
        <name>setUserRegisterFirst</name>
        <param>
          <type>uint64_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Set the first, 64-bit, user-defined register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>first, 64-bit, user-defined register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="379" column="23" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="974" bodyend="977"/>
        <referencedby refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" compoundref="dd/d2d/_record_header_8cpp" startline="1703" endline="1741">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a09db52c9d129c9f9543001976f095336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
        <definition>RecordHeader &amp; evio::RecordHeader::setUserRegisterSecond</definition>
        <argsstring>(uint64_t reg)</argsstring>
        <name>setUserRegisterSecond</name>
        <param>
          <type>uint64_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Set the second, 64-bit, user-defined register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>second, 64-bit, user-defined register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="380" column="23" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="985" bodyend="988"/>
        <referencedby refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" compoundref="dd/d2d/_record_header_8cpp" startline="1703" endline="1741">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1af7071fc0538fde7d167e0f42fdeb74e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::writeHeader</definition>
        <argsstring>(ByteBuffer &amp;buf, size_t off=0)</argsstring>
        <name>writeHeader</name>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>off</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Writes this header into the given byte buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Position &amp; limit of given buffer does NOT change. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>byte buffer to write header into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>position in buffer to begin writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if buffer contains too little room. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="383" column="14" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1001" bodyend="1025"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1afb08d1dbc5fbf780afd27617a67eb750" compoundref="d4/d6c/_byte_buffer_8cpp" startline="511" endline="511">evio::ByteBuffer::limit</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a8bc5745c6525ec0e5bfaee09db9b5c60" compoundref="d4/d6c/_byte_buffer_8cpp" startline="1570" endline="1579">evio::ByteBuffer::putInt</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a0f3ae4b0b792506bb6ea752edb028dc3" compoundref="d4/d6c/_byte_buffer_8cpp" startline="1615" endline="1624">evio::ByteBuffer::putLong</references>
        <referencedby refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" compoundref="dd/d2d/_record_header_8cpp" startline="1703" endline="1741">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1abdb2f6d86b611b899465c7fc2cc6d04a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::writeHeader</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buffer, size_t off=0)</argsstring>
        <name>writeHeader</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>off</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Writes this header into the given byte buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Position &amp; limit of given buffer does NOT change. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>byte buffer to write header into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>position in buffer to begin writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if buffer contains too little room. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="384" column="14" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1035" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a2341f074c6b3a95b4fa391e80d34fa8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::writeHeader</definition>
        <argsstring>(uint8_t *array, const ByteOrder &amp;order)</argsstring>
        <name>writeHeader</name>
        <param>
          <type>uint8_t *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Writes this header at the given pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>byte array to write header into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>byte order of data to be written. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if array arg is null. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="385" column="14" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1047" bodyend="1072"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1ac212a9e36880e2bdcb107cbe5101b50a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::readHeader</definition>
        <argsstring>(ByteBuffer &amp;buffer, size_t offset=0)</argsstring>
        <name>readHeader</name>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Reads the header information from a byte buffer and validates it by checking the magic word (8th word). </para>
        </briefdescription>
        <detaileddescription>
<para>This magic word also determines the byte order.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>position of first word to be read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if buffer contains too little data, is not in proper format, or version earlier than 6. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="407" column="14" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1330" bodyend="1399"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a6496a99b06b5ed67b8c93b148fd87323" compoundref="d4/d6c/_byte_buffer_8cpp" startline="504" endline="504">evio::ByteBuffer::capacity</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a01783f61f04c093b71f58cd1adbde2fa" compoundref="d4/d6c/_byte_buffer_8cpp" startline="1074" endline="1082">evio::ByteBuffer::getInt</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a085757efaf22f29f6383d391498408a9" compoundref="d4/d6c/_byte_buffer_8cpp" startline="1156" endline="1164">evio::ByteBuffer::getLong</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a3d5f0120189717ffc8d2d480d89cb91a" compoundref="d4/d6c/_byte_buffer_8cpp" startline="466" endline="466">evio::ByteBuffer::order</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a080cb49cb33238fe74d54b0fc33f9990" compoundref="d4/d6c/_byte_buffer_8cpp" startline="1753" endline="1770">evio::ByteBuffer::printBytes</references>
        <references refid="d1/d02/_byte_order_8h_1a700fb30611761c46a674a45cc28ff561" compoundref="d1/d02/_byte_order_8h" startline="28">SWAP_32</references>
        <referencedby refid="d3/d56/classevio_1_1_reader_1aa9102d8facfed74bd17872cb452be8e8" compoundref="d8/d15/_reader_8cpp" startline="1404" endline="1480">evio::Reader::forceScanFile</referencedby>
        <referencedby refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" compoundref="dd/d2d/_record_header_8cpp" startline="1703" endline="1741">main</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a7a3c02dd9c1c87a57f4b73076071bced" compoundref="d8/d15/_reader_8cpp" startline="1491" endline="1619">evio::Reader::scanFile</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a703075aab48cc798dbccc8cb14d74725" compoundref="d8/d15/_reader_8cpp" startline="1259" endline="1394">evio::Reader::scanUncompressedBuffer</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" compoundref="d6/d35/_record_input_8cpp" startline="638" endline="742">evio::RecordInput::uncompressRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a75dbd605c84a552d53ed4e5aebd0a398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::readHeader</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buffer, size_t offset=0)</argsstring>
        <name>readHeader</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Reads the header information from a byte buffer and validates it by checking the magic word (8th word). </para>
        </briefdescription>
        <detaileddescription>
<para>This magic word also determines the byte order.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>position of first word to be read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if buffer contains too little data, is not in proper format, or version earlier than 6. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="408" column="14" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1412" bodyend="1414"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a1da78a3e6c2a32067cf40bfe9be9370a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::readHeader</definition>
        <argsstring>(uint8_t *src, ByteOrder order)</argsstring>
        <name>readHeader</name>
        <param>
          <type>uint8_t *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Reads the header information from a byte buffer and validates it by checking the magic word (8th word). </para>
        </briefdescription>
        <detaileddescription>
<para>This magic word also determines the byte order.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>data to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>byte order when reading. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if src arg is null, is not in proper format, or version earlier than 6. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="409" column="14" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1427" bodyend="1494"/>
        <references refid="d1/d02/_byte_order_8h_1a700fb30611761c46a674a45cc28ff561" compoundref="d1/d02/_byte_order_8h" startline="28">SWAP_32</references>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a037086d28ada572ea9d74dc3a0f5471d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string evio::RecordHeader::eventTypeToString</definition>
        <argsstring>() const</argsstring>
        <name>eventTypeToString</name>
        <briefdescription>
<para>Return a meaningful string associated with event type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a meaningful string associated with event type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="411" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1597" bodyend="1616"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a7f7f62ad9cdf5c9b3c0445df9d4433cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getSize</definition>
        <argsstring>() override</argsstring>
        <name>getSize</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1a0fa8834832fdd7a168937066755fe804">getSize</reimplements>
        <briefdescription>
<para>Get the size of the record)in 32 bit words. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size of the record)in 32 bit words. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="415" column="18" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1553" bodyend="1553"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1afef970a92510347c34197d85e61953db" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getNumber</definition>
        <argsstring>() override</argsstring>
        <name>getNumber</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1a2907bba40e8b0293d6072d8eeff36356">getNumber</reimplements>
        <briefdescription>
<para>Get the block number for this record) In a file, this is usually sequential. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number for this record) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="416" column="18" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1561" bodyend="1561"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a915332d264c1be0c015fba59e0c95e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getHeaderWords</definition>
        <argsstring>() override</argsstring>
        <name>getHeaderWords</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1a7f406555551224d492355b0a06ef288d">getHeaderWords</reimplements>
        <briefdescription>
<para>Get the length of this header in words. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>length of this header in words. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="417" column="18" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="376" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a6148d45a3207d03f6eb13bd130caddd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getSourceId</definition>
        <argsstring>() override</argsstring>
        <name>getSourceId</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1aee975823b6487d3ef48ed192385a8681">getSourceId</reimplements>
        <briefdescription>
<para>Get the source ID number if in CODA online context and data is coming from ROC. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>source ID number if in CODA online context and data is coming from ROC. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="418" column="18" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1583" bodyend="1583"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a890212c74be79021bf3e3b185cc6505a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::hasFirstEvent</definition>
        <argsstring>() override</argsstring>
        <name>hasFirstEvent</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1a953e010d22af7c17885f8411f559f25e">hasFirstEvent</reimplements>
        <briefdescription>
<para>Does this header have a first event in the user header? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if header has a first event in the user header, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="419" column="18" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="605" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a2dcd97069067546c8ea3e2d919b48ce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getEventType</definition>
        <argsstring>() override</argsstring>
        <name>getEventType</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1a9d795e9674048b744bfb937ee63d6ffe">getEventType</reimplements>
        <briefdescription>
<para>Get the type of events in record (see values of <ref refid="d5/d23/classevio_1_1_data_type" kindref="compound">DataType</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>type of events in record. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="420" column="18" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1590" bodyend="1590"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1ac6ce4d8a602fe70693a80435ed6f1361" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getVersion</definition>
        <argsstring>() override</argsstring>
        <name>getVersion</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1afc9fbda2c8a8c35a1a82a5beb958aeae">getVersion</reimplements>
        <briefdescription>
<para>Get the Evio format version number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Evio format version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="421" column="18" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="320" bodyend="320"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a2df955f07faf6a4cd92cc8184eaa5d04" compoundref="d8/d15/_reader_8cpp" startline="1049" endline="1249">evio::Reader::scanBuffer</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a703075aab48cc798dbccc8cb14d74725" compoundref="d8/d15/_reader_8cpp" startline="1259" endline="1394">evio::Reader::scanUncompressedBuffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a60481775dd3c657447c412117bd6f5c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getMagicNumber</definition>
        <argsstring>() override</argsstring>
        <name>getMagicNumber</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1ab4dabd24ab85878ff2d66dacd56558eb">getMagicNumber</reimplements>
        <briefdescription>
<para>Get the magic number the record)header which should be 0xc0da0100. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>magic number in the record) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="422" column="18" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1568" bodyend="1568"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1ac0fff5d178b4f360080891fb9079d469" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
        <definition>ByteOrder &amp; evio::RecordHeader::getByteOrder</definition>
        <argsstring>() override</argsstring>
        <name>getByteOrder</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1a5d6c5594f809fb7e32a8f89a7c2fb1c8">getByteOrder</reimplements>
        <briefdescription>
<para>Get the byte order of the file/buffer this header was read from. </para>
        </briefdescription>
        <detaileddescription>
<para>Defaults to little endian. <simplesect kind="return"><para>byte order of the file/buffer this header was read from. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="423" column="20" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="264" bodyend="264"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a2df955f07faf6a4cd92cc8184eaa5d04" compoundref="d8/d15/_reader_8cpp" startline="1049" endline="1249">evio::Reader::scanBuffer</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a703075aab48cc798dbccc8cb14d74725" compoundref="d8/d15/_reader_8cpp" startline="1259" endline="1394">evio::Reader::scanUncompressedBuffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a2191f994494219676bb241d30a7188e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::hasDictionary</definition>
        <argsstring>() override</argsstring>
        <name>hasDictionary</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1a53aa1de9a52e068cd70bb2e9363b77e1">hasDictionary</reimplements>
        <briefdescription>
<para>Does this record have a dictionary in the user header? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if record has a dictionary in the user header, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="425" column="22" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="631" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1abc2a3ecd19d781080b1c1deb086e7887" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::isLastBlock</definition>
        <argsstring>() override</argsstring>
        <name>isLastBlock</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1ab050cc01445362e75370ee83febb3bdf">isLastBlock</reimplements>
        <briefdescription>
<para>Is this the last record in the file or being sent over the network? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if this is the last record in the file or being sent over the network, else <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="426" column="22" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1576" bodyend="1576"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1ac0ca1f17791bc93f7debda59e6c58604" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>string evio::RecordHeader::toString</definition>
        <argsstring>() override</argsstring>
        <name>toString</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1acb7353227cb5c75302ba2541e6639f64">toString</reimplements>
        <briefdescription>
<para>Returns a string representation of this record. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a string representation of this record. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="427" column="22" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1506" bodyend="1546"/>
        <referencedby refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" compoundref="dd/d2d/_record_header_8cpp" startline="1703" endline="1741">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a704b6f3d11f83b5c7c7fbae318e97f0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t evio::RecordHeader::write</definition>
        <argsstring>(ByteBuffer &amp;byteBuffer) override</argsstring>
        <name>write</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1a03b840b5f0f886432110748ff677d843">write</reimplements>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>byteBuffer</declname>
        </param>
        <briefdescription>
<para>Write myself out into a byte buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This write is relative<ndash/>i.e., it uses the current position of the buffer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>byteBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the byteBuffer to write to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes written. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="428" column="22" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1625" bodyend="1628"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a88f84e6b1757db70542eac13294fc80e" compoundref="d4/d6c/_byte_buffer_8cpp" startline="518" endline="518">evio::ByteBuffer::position</references>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a8bf9f714e7e904eb3bb274acca6d1c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t evio::RecordHeader::getBufferEndingPosition</definition>
        <argsstring>() override</argsstring>
        <name>getBufferEndingPosition</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1ab5fb3e39f3b25cade3d3d1daa203010d">getBufferEndingPosition</reimplements>
        <briefdescription>
<para>Get the position in the buffer (bytes) of this record&apos;s last data word. </para>
        </briefdescription>
        <detaileddescription>
<para><linebreak/>
 <simplesect kind="return"><para>position in the buffer (bytes) of this record&apos;s last data word. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="432" column="16" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1635" bodyend="1635"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a86e1740b02aae9f051b7cfa04b9dc998" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t evio::RecordHeader::getBufferStartingPosition</definition>
        <argsstring>() override</argsstring>
        <name>getBufferStartingPosition</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1a55167e524646197063b9d536a934c642">getBufferStartingPosition</reimplements>
        <briefdescription>
<para>Get the starting position in the buffer (bytes) from which this header was read<ndash/>if that happened. </para>
        </briefdescription>
        <detaileddescription>
<para><linebreak/>
 This is not part of the record header proper. It is a position in a memory buffer of the start of the record It is kept for convenience. It is up to the reader to set it.</para>
<para><simplesect kind="return"><para>starting position in buffer (bytes) from which this header was read<ndash/>if that happened. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="433" column="16" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1645" bodyend="1645"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a843708bc011fc813287dcfb5c7825ee6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::setBufferStartingPosition</definition>
        <argsstring>(size_t bufferStartingPosition) override</argsstring>
        <name>setBufferStartingPosition</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1a002a72c5150ebcc37d202271881aba3d">setBufferStartingPosition</reimplements>
        <param>
          <type>size_t</type>
          <declname>bufferStartingPosition</declname>
        </param>
        <briefdescription>
<para>Set the starting position in the buffer (bytes) from which this header was read<ndash/>if that happened. </para>
        </briefdescription>
        <detaileddescription>
<para><linebreak/>
 This is not part of the record header proper. It is a position in a memory buffer of the start of the record It is kept for convenience. It is up to the reader to set it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bufferStartingPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>starting position in buffer from which this header was read<ndash/>if that happened. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="434" column="16" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1656" bodyend="1656"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a564244bf54a9fdfd22c8ba6167e616a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t evio::RecordHeader::nextBufferStartingPosition</definition>
        <argsstring>() override</argsstring>
        <name>nextBufferStartingPosition</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1aabc390043eb275ffc75c05a393dbd5f4">nextBufferStartingPosition</reimplements>
        <briefdescription>
<para>Determines where the start of the next record header in some buffer is located (bytes). </para>
        </briefdescription>
        <detaileddescription>
<para>This assumes the start position has been maintained by the object performing the buffer read.</para>
<para><simplesect kind="return"><para>the start of the next record header in some buffer is located (bytes). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="435" column="16" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1665" bodyend="1665"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1aed3556a7d1b6d4625d096ea94c9a5289" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t evio::RecordHeader::firstEventStartingPosition</definition>
        <argsstring>() override</argsstring>
        <name>firstEventStartingPosition</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1a912dcd287e30558238b6ad00c2454cde">firstEventStartingPosition</reimplements>
        <briefdescription>
<para>Determines where the start of the first event in this record is located (bytes). </para>
        </briefdescription>
        <detaileddescription>
<para>This assumes the start position has been maintained by the object performing the buffer read.</para>
<para><simplesect kind="return"><para>where the start of the first event in this record is located (bytes). In evio format version 2, returns 0 if start is 0, signaling that this entire record is part of a logical record that spans at least three physical records. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="436" column="16" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1677" bodyend="1677"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a486a8dbb7f9519b95fe2bb3e883dcea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t evio::RecordHeader::bytesRemaining</definition>
        <argsstring>(size_t pos) override</argsstring>
        <name>bytesRemaining</name>
        <reimplements refid="d5/d6e/classevio_1_1_i_block_header_1a5bbd2488c7847efb83bf2d5e8c81f5c5">bytesRemaining</reimplements>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Gives the bytes remaining in this record given a buffer position. </para>
        </briefdescription>
        <detaileddescription>
<para>The position is an absolute position in a byte buffer. This assumes that the absolute position in <computeroutput>bufferStartingPosition</computeroutput> is being maintained properly by the reader.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>the absolute current position in a byte buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes remaining in this record. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if position out of bounds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="437" column="16" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1689" bodyend="1689"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int evio::RecordHeader::main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Run this class as an executable which tests the writing and reading of a record. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>argument count </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>argument list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="441" column="13" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1703" bodyend="1741"/>
        <references refid="d8/d64/classevio_1_1_record_header_1add07a5f160f5e8e4467da1424c7df057" compoundref="dd/d2d/_record_header_8cpp" startline="362" endline="362">getCompressedDataLengthWords</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a3d5f0120189717ffc8d2d480d89cb91a" compoundref="d4/d6c/_byte_buffer_8cpp" startline="466" endline="466">evio::ByteBuffer::order</references>
        <references refid="d8/d64/classevio_1_1_record_header_1ac212a9e36880e2bdcb107cbe5101b50a" compoundref="dd/d2d/_record_header_8cpp" startline="1330" endline="1399">readHeader</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a7270727098611e695f009bc6e125aaa7" compoundref="dd/d2d/_record_header_8cpp" startline="887" endline="897">setCompressedDataLength</references>
        <references refid="d8/d64/classevio_1_1_record_header_1ae5812b82ce0e7ca51921ad30c9de7fe1" compoundref="dd/d2d/_record_header_8cpp" startline="918" endline="926">setCompressionType</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a2fef7d1826dc5c587f61f5f3a6a41039" compoundref="dd/d2d/_record_header_8cpp" startline="869" endline="879">setDataLength</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a6dd3c88ba3a335fb5b9ba1aef76e456c" compoundref="dd/d2d/_record_header_8cpp" startline="935" endline="935">setEntries</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a7592953012addde450fbf3100220e7b5" compoundref="dd/d2d/_record_header_8cpp" startline="962" endline="966">setHeaderLength</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a50df756690ed1598f0bad7ce226ed1fc" compoundref="dd/d2d/_record_header_8cpp" startline="906" endline="909">setIndexLength</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a2eb84874448358dc0fc468b537eed18a" compoundref="dd/d2d/_record_header_8cpp" startline="855" endline="861">setLength</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a09a3d3895345bc8c9133f3ce86947161" compoundref="dd/d2d/_record_header_8cpp" startline="846" endline="846">setRecordNumber</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a45d972dacbf827ae6aed32f899ae6469" compoundref="dd/d2d/_record_header_8cpp" startline="943" endline="953">setUserHeaderLength</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a607d46d06781914cc7fc3bb37f0c9b32" compoundref="dd/d2d/_record_header_8cpp" startline="974" endline="977">setUserRegisterFirst</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a09db52c9d129c9f9543001976f095336" compoundref="dd/d2d/_record_header_8cpp" startline="985" endline="988">setUserRegisterSecond</references>
        <references refid="d8/d64/classevio_1_1_record_header_1ac0ca1f17791bc93f7debda59e6c58604" compoundref="dd/d2d/_record_header_8cpp" startline="1506" endline="1546">toString</references>
        <references refid="d8/d64/classevio_1_1_record_header_1af7071fc0538fde7d167e0f42fdeb74e7" compoundref="dd/d2d/_record_header_8cpp" startline="1001" endline="1025">writeHeader</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1ac126bea537f0893b1c1d5cbe23b478fd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::bitInfoInit</definition>
        <argsstring>()</argsstring>
        <name>bitInfoInit</name>
        <briefdescription>
<para>Initialize bitInfo word to this value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="286" column="14" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="411" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a71adffec209c2371816483756b7d9cad" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::decodeBitInfoWord</definition>
        <argsstring>(uint32_t word)</argsstring>
        <name>decodeBitInfoWord</name>
        <param>
          <type>uint32_t</type>
          <declname>word</declname>
        </param>
        <briefdescription>
<para>Decodes the padding and header type info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>word</parametername>
</parameternamelist>
<parameterdescription>
<para>int to decode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="287" column="14" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="559" bodyend="576"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1ac144531a0a05448fe2901d5160f236a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getWords</definition>
        <argsstring>(uint32_t length)</argsstring>
        <name>getWords</name>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Returns length padded to 4-byte boundary for given length in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length in bytes padded to 4-byte boundary. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="294" column="25" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="218" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a4997815178581e8a16d7fa5e9aedff8f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::getPadding</definition>
        <argsstring>(uint32_t length)</argsstring>
        <name>getPadding</name>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Returns number of bytes needed to pad to 4-byte boundary for the given length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes needed to pad to 4-byte boundary. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="295" column="25" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="230" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1abef5b84c1929a20a6429dee0f54ea979" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::generateSixthWord</definition>
        <argsstring>(std::bitset&lt; 24 &gt; const &amp;set)</argsstring>
        <name>generateSixthWord</name>
        <param>
          <type>std::bitset&lt; 24 &gt; const &amp;</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Calculates the sixth word of this header which has the version number (6) in the lowest 8 bits and the set in the upper 24 bits. </para>
        </briefdescription>
        <detaileddescription>
<para>NOT FOR GENERAL USE!</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to bitset containing all bits to be set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>generated sixth word of this header. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="331" column="25" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="479" bodyend="494"/>
        <referencedby refid="de/dce/classevio_1_1_compact_event_builder_1a9042fd06e8d738ef387684b6df3c765f" compoundref="da/d47/_compact_event_builder_8cpp" startline="1189" endline="1287">evio::CompactEventBuilder::toFile</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a8ed1e9c3b53e8ebffc9c708c3520291a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::generateSixthWord</definition>
        <argsstring>(uint32_t version, bool hasDictionary, bool isEnd, uint32_t eventType)</argsstring>
        <name>generateSixthWord</name>
        <param>
          <type>uint32_t</type>
          <declname>version</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasDictionary</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isEnd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>eventType</declname>
        </param>
        <briefdescription>
<para>Calculates the sixth word of this header which has the version number in the lowest 8 bits. </para>
        </briefdescription>
        <detaileddescription>
<para>The arg hasDictionary is set in the 9th bit and isEnd is set in the 10th bit. Four bits of an int (event type) are set in bits 11-14.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>evio version number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hasDictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>does this block include an evio xml dictionary as the first event? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>is this the last block of a file or a buffer? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventType</parametername>
</parameternamelist>
<parameterdescription>
<para>4 bit type of events header is containing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>generated sixth word of this header. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="332" column="25" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="509" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1aa5bed48ba9c49172d0adb1144f44ee99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::generateSixthWord</definition>
        <argsstring>(std::bitset&lt; 24 &gt; const &amp;set, uint32_t version, bool hasDictionary, bool isEnd, uint32_t eventType, uint32_t headerType=0)</argsstring>
        <name>generateSixthWord</name>
        <param>
          <type>std::bitset&lt; 24 &gt; const &amp;</type>
          <declname>set</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>version</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasDictionary</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isEnd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>eventType</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>headerType</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Calculates the sixth word of this header which has the version number (4) in the lowest 8 bits and the set in the upper 24 bits. </para>
        </briefdescription>
        <detaileddescription>
<para>The arg isDictionary is set in the 9th bit and isEnd is set in the 10th bit. Four bits of an int (event type) are set in bits 11-14. Four bits of this header type are set in bits 28-31 (defaults to 0 which is an evio record header).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to bitset containing all bits to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>evio version number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hasDictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>does this block include an evio xml dictionary as the first event? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>is this the last block of a file or a buffer? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventType</parametername>
</parameternamelist>
<parameterdescription>
<para>4 bit type of events header is containing </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headerType</parametername>
</parameternamelist>
<parameterdescription>
<para>4 bit type of this header (defaults to 0 which is an evio record header). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>generated sixth word of this header. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="334" column="25" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="532" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a4d8ed1bc00f5a8bdd0a8a632a0fc4c16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::hasDictionary</definition>
        <argsstring>(int bitInfo)</argsstring>
        <name>hasDictionary</name>
        <param>
          <type>int</type>
          <declname>bitInfo</declname>
        </param>
        <briefdescription>
<para>Does this bitInfo arg indicate the existence of a dictionary in the user header? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>bitInfo word. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if header has a dictionary in the user header, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="345" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="639" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a0cd0301674740a2924e81fbbd73524c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::isLastRecord</definition>
        <argsstring>(uint32_t bitInfo)</argsstring>
        <name>isLastRecord</name>
        <param>
          <type>uint32_t</type>
          <declname>bitInfo</declname>
        </param>
        <briefdescription>
<para>Does this word indicate this is the header of the last record? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>bitInfo word. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this is the header of the last record, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="349" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="673" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a9ef4098ca6b8d53e88083a817763d98c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::isEvioTrailer</definition>
        <argsstring>(uint32_t bitInfo)</argsstring>
        <name>isEvioTrailer</name>
        <param>
          <type>uint32_t</type>
          <declname>bitInfo</declname>
        </param>
        <briefdescription>
<para>Does this arg indicate its header is an evio trailer? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>bitInfo word. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if arg represents an evio trailer, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="358" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="724" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a58ed23eee73398f914a1d26703a04bb0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::isEvioRecord</definition>
        <argsstring>(uint32_t bitInfo)</argsstring>
        <name>isEvioRecord</name>
        <param>
          <type>uint32_t</type>
          <declname>bitInfo</declname>
        </param>
        <briefdescription>
<para>Does this arg indicate its header is an evio record? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>bitInfo word. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if arg represents an evio record, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="359" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="744" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a3663c283621dd18c1f261aec2740bcab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::isHipoTrailer</definition>
        <argsstring>(uint32_t bitInfo)</argsstring>
        <name>isHipoTrailer</name>
        <param>
          <type>uint32_t</type>
          <declname>bitInfo</declname>
        </param>
        <briefdescription>
<para>Does this arg indicate its header is a hipo trailer? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>bitInfo word. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if arg represents a hipo trailer, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="360" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="734" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a36442b7809604862853dde71f79d27fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::isHipoRecord</definition>
        <argsstring>(uint32_t bitInfo)</argsstring>
        <name>isHipoRecord</name>
        <param>
          <type>uint32_t</type>
          <declname>bitInfo</declname>
        </param>
        <briefdescription>
<para>Does this arg indicate its header is a hipo record? </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>bitInfo word. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if arg represents a hipo record, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="361" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="754" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1aedd5cd2e0d2d70e8c58bfa14dcb356b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordHeader::clearLastRecordBit</definition>
        <argsstring>(uint32_t i)</argsstring>
        <name>clearLastRecordBit</name>
        <param>
          <type>uint32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Clear the bit in the given arg to indicate it is NOT the last record. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>integer in which to clear the last-record bit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>arg with last-record bit cleared </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="365" column="25" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="681" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1ad50204c6561532848d91fe9599cad958" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::writeTrailer</definition>
        <argsstring>(uint8_t *array, size_t arrayLen, uint32_t recordNum, const ByteOrder &amp;order, const std::shared_ptr&lt; std::vector&lt; uint32_t &gt;&gt; &amp;recordLengths=nullptr)</argsstring>
        <name>writeTrailer</name>
        <param>
          <type>uint8_t *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>arrayLen</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>recordNum</declname>
        </param>
        <param>
          <type>const <ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; std::vector&lt; uint32_t &gt;&gt; &amp;</type>
          <declname>recordLengths</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Writes a trailer with an optional index array into the given byte array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>byte array to write trailer into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arrayLen</parametername>
</parameternamelist>
<parameterdescription>
<para>number of available bytes in array to write into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recordNum</parametername>
</parameternamelist>
<parameterdescription>
<para>record number of trailer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>byte order of data to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recordLengths</parametername>
</parameternamelist>
<parameterdescription>
<para>vector containing record lengths interspersed with event counts to be written to trailer. Null if no index array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if array arg is null, array too small to hold trailer + index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="388" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1086" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a6d050b7987ced52233fe736c2d382711" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::writeTrailer</definition>
        <argsstring>(std::vector&lt; uint8_t &gt; &amp;array, size_t off, uint32_t recordNum, const ByteOrder &amp;order, const std::shared_ptr&lt; std::vector&lt; uint32_t &gt;&gt; &amp;recordLengths=nullptr)</argsstring>
        <name>writeTrailer</name>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>off</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>recordNum</declname>
        </param>
        <param>
          <type>const <ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; std::vector&lt; uint32_t &gt;&gt; &amp;</type>
          <declname>recordLengths</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Writes a trailer with an optional index array into the given vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>vector to write trailer into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>offset into vector&apos;s array to start writing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recordNum</parametername>
</parameternamelist>
<parameterdescription>
<para>record number of trailer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>byte order of data to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recordLengths</parametername>
</parameternamelist>
<parameterdescription>
<para>vector containing record lengths interspersed with event counts to be written to trailer. Null if no index array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="392" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1141" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1ad2c56e2218a83d9e338c12639ab5dc73" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::writeTrailer</definition>
        <argsstring>(ByteBuffer &amp;buf, size_t off, uint32_t recordNum, const std::shared_ptr&lt; std::vector&lt; uint32_t &gt;&gt; &amp;recordLengths=nullptr)</argsstring>
        <name>writeTrailer</name>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>off</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>recordNum</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; std::vector&lt; uint32_t &gt;&gt; &amp;</type>
          <declname>recordLengths</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Writes a trailer with an optional index array into the given buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> to write trailer into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>offset into buffer to start writing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recordNum</parametername>
</parameternamelist>
<parameterdescription>
<para>record number of trailer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recordLengths</parametername>
</parameternamelist>
<parameterdescription>
<para>vector containing record lengths interspersed with event counts to be written to trailer. Null if no index array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if buf too small to hold trailer + index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="396" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1192" bodyend="1240"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1aa0e335238a57eaa0bffee8f968e5995f" compoundref="d4/d6c/_byte_buffer_8cpp" startline="475" endline="475">evio::ByteBuffer::array</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1abf7abf99aa7544601997f40eba298648" compoundref="d4/d6c/_byte_buffer_8cpp" startline="490" endline="490">evio::ByteBuffer::arrayOffset</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a6496a99b06b5ed67b8c93b148fd87323" compoundref="d4/d6c/_byte_buffer_8cpp" startline="504" endline="504">evio::ByteBuffer::capacity</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a39605fc83d34737d5b78b36cb37f32fb" compoundref="d4/d6c/_byte_buffer_8cpp" startline="444" endline="444">evio::ByteBuffer::hasArray</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1afb08d1dbc5fbf780afd27617a67eb750" compoundref="d4/d6c/_byte_buffer_8cpp" startline="511" endline="511">evio::ByteBuffer::limit</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a3d5f0120189717ffc8d2d480d89cb91a" compoundref="d4/d6c/_byte_buffer_8cpp" startline="466" endline="466">evio::ByteBuffer::order</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a88f84e6b1757db70542eac13294fc80e" compoundref="d4/d6c/_byte_buffer_8cpp" startline="518" endline="518">evio::ByteBuffer::position</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a8bc5745c6525ec0e5bfaee09db9b5c60" compoundref="d4/d6c/_byte_buffer_8cpp" startline="1570" endline="1579">evio::ByteBuffer::putInt</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a0f3ae4b0b792506bb6ea752edb028dc3" compoundref="d4/d6c/_byte_buffer_8cpp" startline="1615" endline="1624">evio::ByteBuffer::putLong</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a32b043081cd3a62187f2577ce2966e7d" compoundref="d4/d6c/_byte_buffer_8cpp" startline="497" endline="497">evio::ByteBuffer::remaining</references>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a946a8669127473dac8cb3ba7f82fd5ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordHeader::writeTrailer</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buf, size_t off, uint32_t recordNum, const std::shared_ptr&lt; std::vector&lt; uint32_t &gt;&gt; &amp;recordLengths=nullptr)</argsstring>
        <name>writeTrailer</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>off</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>recordNum</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; std::vector&lt; uint32_t &gt;&gt; &amp;</type>
          <declname>recordLengths</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Writes a trailer with an optional index array into the given buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> to write trailer into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>offset into buffer to start writing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recordNum</parametername>
</parameternamelist>
<parameterdescription>
<para>record number of trailer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recordLengths</parametername>
</parameternamelist>
<parameterdescription>
<para>vector containing record lengths interspersed with event counts to be written to trailer. Null if no index array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if buf too small to hold trailer + index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="399" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1252" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a4b37e34188e374bb01a0e9c61dfece67" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::isCompressed</definition>
        <argsstring>(ByteBuffer &amp;buffer, size_t offset)</argsstring>
        <name>isCompressed</name>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Quickly check to see if this buffer contains compressed data or not. </para>
        </briefdescription>
        <detaileddescription>
<para>The offset must point to the beginning of a valid hipo/evio record in the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>position of record header to be read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if data in record is compressed, else false. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if buffer contains too little data, or is not in proper format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="403" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1272" bodyend="1301"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a01783f61f04c093b71f58cd1adbde2fa" compoundref="d4/d6c/_byte_buffer_8cpp" startline="1074" endline="1082">evio::ByteBuffer::getInt</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1afb08d1dbc5fbf780afd27617a67eb750" compoundref="d4/d6c/_byte_buffer_8cpp" startline="511" endline="511">evio::ByteBuffer::limit</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a3d5f0120189717ffc8d2d480d89cb91a" compoundref="d4/d6c/_byte_buffer_8cpp" startline="466" endline="466">evio::ByteBuffer::order</references>
        <references refid="d1/d02/_byte_order_8h_1a700fb30611761c46a674a45cc28ff561" compoundref="d1/d02/_byte_order_8h" startline="28">SWAP_32</references>
      </memberdef>
      <memberdef kind="function" id="d8/d64/classevio_1_1_record_header_1a5991ae5872f2106b2eae43c7bd0de6af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordHeader::isCompressed</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buffer, size_t offset)</argsstring>
        <name>isCompressed</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Quickly check to see if this buffer contains compressed data or not. </para>
        </briefdescription>
        <detaileddescription>
<para>The offset must point to the beginning of a valid hipo/evio record in the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>position of record header to be read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if data in record is compressed, else false. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if buffer contains too little data, or is not in proper format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordHeader.h" line="404" column="21" bodyfile="src/libsrc/RecordHeader.cpp" bodystart="1315" bodyend="1317"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><preformatted></preformatted></para>
<para><preformatted>GENERAL RECORD HEADER STRUCTURE ( 56 bytes, 14 integers (32 bit) )</preformatted></para>
<para><preformatted>   +----------------------------------+
 1 |         Record Length            | // 32bit words, inclusive
   +----------------------------------+
 2 +         Record Number            |
   +----------------------------------+
 3 +         Header Length            | // 14 (words)
   +----------------------------------+
 4 +       Event (Index) Count        |
   +----------------------------------+
 5 +      Index Array Length          | // bytes
   +-----------------------+----------+
 6 +       Bit Info        | Version  | // version (8 bits)
   +-----------------------+----------+
 7 +      User Header Length          | // bytes
   +----------------------------------+
 8 +          Magic Number            | // 0xc0da0100
   +----------------------------------+
 9 +     Uncompressed Data Length     | // bytes
   +------+---------------------------+
10 +  CT  |  Data Length Compressed   | // CT = compression type (4 bits); compressed len in words
   +----------------------------------+
11 +          User Register 1         | // UID 1st (64 bits)
   +--                              --+
12 +                                  |
   +----------------------------------+
13 +          User Register 2         | // UID 2nd (64 bits)
   +--                              --+
14 +                                  |
   +----------------------------------+</preformatted></para>
<para><preformatted>-------------------
  Compression Type
-------------------
    0  = none
    1  = LZ4 fastest
    2  = LZ4 best
    3  = gzip</preformatted></para>
<para><preformatted>-------------------
  Bit Info Word
-------------------
    0-7  = version
    8    = true if dictionary is included (relevant for first record only)
    9    = true if this record has &quot;first&quot; event (to be in every split file)
   10    = true if this record is the last in file or stream
   11-14 = type of events contained: 0 = ROC Raw,
                                     1 = Physics
                                     2 = PartialPhysics
                                     3 = DisentangledPhysics
                                     4 = User
                                     5 = Control
                                    15 = Other
   15-19 = reserved
   20-21 = pad 1
   22-23 = pad 2
   24-25 = pad 3
   26-27 = reserved
   28-31 = general header type: 0 = Evio record,
                                3 = Evio file trailer
                                4 = HIPO record,
                                7 = HIPO file trailer</preformatted></para>
<para><preformatted>------------------------------------------------------------
</preformatted></para>
<para><simplesect kind="version"><para>6.0 </para>
</simplesect>
<simplesect kind="since"><para>6.0 4/9/2019 </para>
</simplesect>
<simplesect kind="author"><para>timmer </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>evio::IBlockHeader</label>
        <link refid="d5/d6e/classevio_1_1_i_block_header"/>
      </node>
      <node id="1">
        <label>evio::RecordHeader</label>
        <link refid="d8/d64/classevio_1_1_record_header"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>evio::IBlockHeader</label>
        <link refid="d5/d6e/classevio_1_1_i_block_header"/>
      </node>
      <node id="1">
        <label>evio::RecordHeader</label>
        <link refid="d8/d64/classevio_1_1_record_header"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/libsrc/RecordHeader.h" line="115" column="5" bodyfile="src/libsrc/RecordHeader.h" bodystart="115" bodyend="443"/>
    <listofallmembers>
      <member refid="d8/d64/classevio_1_1_record_header_1ac420593fe475899308138f3bd98e5f38" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>BIT_INFO_OFFSET</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a12185906a1b11a2a72a76d9b7c013015" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>bitInfo</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac126bea537f0893b1c1d5cbe23b478fd" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>bitInfoInit</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a4b55dd5cedb266290ccfea5773f3820d" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>byteOrder</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a486a8dbb7f9519b95fe2bb3e883dcea7" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>bytesRemaining</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1aedd5cd2e0d2d70e8c58bfa14dcb356b6" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>clearLastRecordBit</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a056afbf222a666e1c9a2131284454f8f" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>COMP_PADDING_MASK</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a8bc5a140901563b07907da2bd73aa4ab" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>compressedDataLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ad4686497cf935d321fba97c0bcc0a794" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>compressedDataLengthPadding</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1af17879d4b1b79e741b4b4ed454cde09f" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>compressedDataLengthWords</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a588247cf4b37ae9e2f35912cd2b7aae5" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>COMPRESSION_TYPE_OFFSET</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1acab811ee1ad6ccd7dcb5cc7c8f1a328a" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>compressionType</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a33d3063df6c17cafcad63b75f3005a34" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>copy</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a3d79799c4b5b39454015f6be834e55aa" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>DATA_CONTROL_BITS</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac91d9c4b40dfe746ed015799870b7dd3" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>DATA_DISENTANGLED_BITS</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1aa79aabcabbbad053f77fb9a43999cc17" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>DATA_OTHER_BITS</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac629dbf20a470d2e8b5822389c25a0d8" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>DATA_PADDING_MASK</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a57c866e62d930b5ad4b6a977cf6eff4b" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>DATA_PARTIAL_BITS</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ae471e5df8fd97c256bc8b63ff97f4de5" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>DATA_PHYSICS_BITS</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a5740099aa9816824f9c28240d10c4104" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>DATA_ROC_RAW_BITS</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a3de06a9ab2b0231d9e17554b606c95b3" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>DATA_USER_BITS</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a59e598f27be1b5bf3d86b0459cbf2fce" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>dataLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a9e12112750d264a495ea4bd0c3e44a3c" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>dataLengthPadding</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac25f697b08578995820305ecf954e920" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>dataLengthWords</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a71adffec209c2371816483756b7d9cad" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>decodeBitInfoWord</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a0acd86bd77c7a853b56ecfd981161469" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>DICTIONARY_BIT</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ad2c8820188ce9d3ed44234463594be97" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>entries</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ae5d68743951ae65bd72a1477a728993c" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>EVENT_COUNT_OFFSET</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a317b672e939472031b8b4dc18d9ec2c2" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>eventType</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a037086d28ada572ea9d74dc3a0f5471d" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>eventTypeToString</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac5620e051ef9ec48823e228d6e212770" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>FIRST_EVENT_BIT</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1aed3556a7d1b6d4625d096ea94c9a5289" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>firstEventStartingPosition</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1abef5b84c1929a20a6429dee0f54ea979" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>generateSixthWord</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a8ed1e9c3b53e8ebffc9c708c3520291a" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>generateSixthWord</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1aa5bed48ba9c49172d0adb1144f44ee99" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>generateSixthWord</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ada84924ed1f01899fc4500b07c7f488b" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getBitInfoWord</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a8bf9f714e7e904eb3bb274acca6d1c6b" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>getBufferEndingPosition</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a86e1740b02aae9f051b7cfa04b9dc998" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>getBufferStartingPosition</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac0fff5d178b4f360080891fb9079d469" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>getByteOrder</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1af1acf0f962eed8b770022681f6e10a5b" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getCompressedDataLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1afe2516d4567fdbc86f2477047425e1a2" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getCompressedDataLengthPadding</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1add07a5f160f5e8e4467da1424c7df057" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getCompressedDataLengthWords</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a0af2d3f06fb440be383b72d5e9ba5db4" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getCompressedRecordLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1aba16ed1ed865333327bf64ad53d09e76" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getCompressionType</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a146a11c790b34ab190a340c206f17dc1" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getDataLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1aa434393ea672e70e77bd7fa188eff393" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getDataLengthWords</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a850be1f267c82ff109e5db4ac59522a3" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getEntries</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a2dcd97069067546c8ea3e2d919b48ce0" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>getEventType</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a0221831e904860de343cfa2fcbe05f2c" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getHeaderLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a6cf59ba0454092a2e55f29e33096242b" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getHeaderType</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a915332d264c1be0c015fba59e0c95e28" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>getHeaderWords</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1af943f7595eb02bbbb769a27ccc8f5aa4" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getIndexLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac33a0f8082aa36f0e8fd2562d82e647a" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1af0ece247a3718515ff1e393c3b810337" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getLengthWords</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a60481775dd3c657447c412117bd6f5c6" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>getMagicNumber</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1afef970a92510347c34197d85e61953db" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>getNumber</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a4997815178581e8a16d7fa5e9aedff8f" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getPadding</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a391bafd39f9bdd962ccc114b3ff66aeb" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getPosition</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a622ecbac309d428a1e9a916827e1b112" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getRecordNumber</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a7f7f62ad9cdf5c9b3c0445df9d4433cd" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>getSize</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a6148d45a3207d03f6eb13bd130caddd4" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>getSourceId</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ace2be836d16a4e4b58df6a6059d378b2" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getUncompressedRecordLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a3e6b9d38de5b13bcc2b7741578de3d64" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getUserHeaderLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a84ab13deb24469bc81dba390eeb72577" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getUserHeaderLengthWords</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a6c473546949efdcc7a977e88e7ee07f8" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getUserRegisterFirst</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a41e78ea2a910e0e544267912ef0b7d62" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getUserRegisterSecond</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac6ce4d8a602fe70693a80435ed6f1361" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>getVersion</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac144531a0a05448fe2901d5160f236a0" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>getWords</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1aeb2283945519b97d1f33b32cf7fcdaa7" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>hasDictionary</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a4d8ed1bc00f5a8bdd0a8a632a0fc4c16" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>hasDictionary</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a2191f994494219676bb241d30a7188e5" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>hasDictionary</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a13c64348c2dd2f25aed34ead5c9ca74b" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>hasFirstEvent</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a890212c74be79021bf3e3b185cc6505a" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>hasFirstEvent</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1aed99e247427969d1e27670edea24f0e2" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>HEADER_LENGTH_OFFSET</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a92896dc06aad1eb7f4add3ce7fec5424" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>HEADER_MAGIC</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a0e09d731589bcfe2705d0c606192f6eb" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>HEADER_SIZE_BYTES</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac6566ea9b1bba9c25b545831bcbb5200" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>HEADER_SIZE_WORDS</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1aec76580e37780772011ce4833a1e9942" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>HEADER_TYPE_MASK</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a8c9bab0a505bd28d55d14e27862f10e4" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>headerLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a4cd8bdca3c2d001a4a6b7a4294c5845d" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>headerLengthWords</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a7a16196700f81fecd2ab7167b68561f4" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>headerMagicWord</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac011040cd74809922ad965d8c44aa547" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>headerType</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a79d5a65ef13fe995ac2af91ab15829ae" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>headerVersion</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a1b0ce8aa63d88b861fca36a5561c7122" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>INDEX_ARRAY_OFFSET</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a8f45a493e25d088e58f38d24b4d5f45d" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>indexLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1af29b64992fcd30c456db80719c56a60f" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>isCompressed</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a4b37e34188e374bb01a0e9c61dfece67" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>isCompressed</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a5991ae5872f2106b2eae43c7bd0de6af" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>isCompressed</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a1e880f7a2c2538a6a8744213bea33d58" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>isEvioRecord</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a58ed23eee73398f914a1d26703a04bb0" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>isEvioRecord</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a0c5c80cf8f9b97679fd5a65c4e27a9a7" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>isEvioTrailer</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a9ef4098ca6b8d53e88083a817763d98c" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>isEvioTrailer</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a713c0ca6447c818f9a7246e929f941a6" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>isHipoRecord</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a36442b7809604862853dde71f79d27fb" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>isHipoRecord</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac9bba6ed72735786246a3e0409410eb5" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>isHipoTrailer</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a3663c283621dd18c1f261aec2740bcab" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>isHipoTrailer</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1abc2a3ecd19d781080b1c1deb086e7887" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>isLastBlock</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1adb2fa395660e3d9656ef5ae91e12b4be" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>isLastRecord</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a6f65ae4d0740ac3c7fcf29056c15c7ed" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>isLastRecord</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a0cd0301674740a2924e81fbbd73524c0" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>isLastRecord</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac7ddde1d360d02cf22ba9790bf70c6b7" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>LAST_RECORD_BIT</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a3e75aee4fcc5abe4fa8f3a9fef7bba18" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>LAST_RECORD_MASK</name></member>
      <member refid="d5/d6e/classevio_1_1_i_block_header_1ac5f22d640a8987649db4fd4c8c699cb7" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>MAGIC_NUMBER</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a001af5c0f57d829c9d104e0582140b92" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>MAGIC_OFFSET</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ae024fb4c94d944577e44dcec1b16d418" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>main</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a564244bf54a9fdfd22c8ba6167e616a3" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>nextBufferStartingPosition</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a94e631bc5534631bca120086b28f5452" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>operator=</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a427468949a18c282f58f931c6763c769" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>padValue</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a33ade91bcb5d750236b5f5f50118cdad" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>position</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac212a9e36880e2bdcb107cbe5101b50a" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>readHeader</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a75dbd605c84a552d53ed4e5aebd0a398" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>readHeader</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a1da78a3e6c2a32067cf40bfe9be9370a" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>readHeader</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a58e2767d98597e040d5640e4c288b90c" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>RECORD_LENGTH_OFFSET</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a98137b725cd54ed93c12217ae249483b" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>RECORD_NUMBER_OFFSET</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a87b6be69045dbe4a61b41bb0a5cf2d87" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>RecordHeader</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a164a648f183c58e90ea6fd6623f8bb82" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>RecordHeader</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac78ebb09279e9891dffcf75616494787" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>RecordHeader</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1aea40f77aade540a904a4da54cead7c17" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>RecordHeader</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a2f025633b2c7e4d17a5034bf9951af50" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>recordLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1aeccbdb500e2958c12bbaf0409b33fdb8" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>recordLengthWords</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1af77e6d8727d96bc8162058bf3dc74320" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>recordNumber</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1afe5638e9debe18063838d6060da230b2" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>recordUserRegisterFirst</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a659120baa1b318ad2b23ca9d6dbeddfe" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>recordUserRegisterSecond</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ae5f1f849eacf94dbd4bc3855d9565588" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>REGISTER1_OFFSET</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a4b2b8d0940219944a8d3ba9467e79824" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>REGISTER2_OFFSET</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a25b332a34f112a61e614a41dce5633c8" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>reset</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a3f77e14621f9abcb226b48a1939cb8c5" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setBitInfo</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a7c493d2545cfe5b936932b436bbe8188" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setBitInfoEventType</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1acbd14b3e5c1cd26c7b5d8a734aca59b5" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setBitInfoWord</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a97ec36a30b04e8ef05c8bd0ee4eb496a" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setBitInfoWord</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a843708bc011fc813287dcfb5c7825ee6" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>setBufferStartingPosition</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a7270727098611e695f009bc6e125aaa7" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setCompressedDataLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ae5812b82ce0e7ca51921ad30c9de7fe1" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setCompressionType</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a2fef7d1826dc5c587f61f5f3a6a41039" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setDataLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a6dd3c88ba3a335fb5b9ba1aef76e456c" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setEntries</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a7592953012addde450fbf3100220e7b5" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setHeaderLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a0f835c88afb20af5c792e80c6700b4a6" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setHeaderType</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a50df756690ed1598f0bad7ce226ed1fc" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setIndexLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a2eb84874448358dc0fc468b537eed18a" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a11dd11333c8ebb6190d59082ce547e03" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setPosition</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a09a3d3895345bc8c9133f3ce86947161" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setRecordNumber</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a45d972dacbf827ae6aed32f899ae6469" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setUserHeaderLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a607d46d06781914cc7fc3bb37f0c9b32" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setUserRegisterFirst</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a09db52c9d129c9f9543001976f095336" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>setUserRegisterSecond</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ac0ca1f17791bc93f7debda59e6c58604" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>toString</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1aa8e92627a8294434d3e4762fd42e4dff" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>UNCOMPRESSED_LENGTH_OFFSET</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a37f1b0d0b94e58f9015204f675bbd3f8" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>USER_LENGTH_OFFSET</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ade2222416567a873a39656e78bbc48c3" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>USER_PADDING_MASK</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1aae752c32d5b5f2411a39f5d61357579c" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>userHeaderLength</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1abab691d970e77202d137b85ac7ff1edb" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>userHeaderLengthPadding</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a2cb176d66dc8d93dac77c9e0fbcf0197" prot="private" virt="non-virtual"><scope>evio::RecordHeader</scope><name>userHeaderLengthWords</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ad19ddc97493261aaf446ac33991987b7" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>VERSION_MASK</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a704b6f3d11f83b5c7c7fbae318e97f0c" prot="public" virt="virtual"><scope>evio::RecordHeader</scope><name>write</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1af7071fc0538fde7d167e0f42fdeb74e7" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>writeHeader</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1abdb2f6d86b611b899465c7fc2cc6d04a" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>writeHeader</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a2341f074c6b3a95b4fa391e80d34fa8f" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>writeHeader</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ad50204c6561532848d91fe9599cad958" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>writeTrailer</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a6d050b7987ced52233fe736c2d382711" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>writeTrailer</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1ad2c56e2218a83d9e338c12639ab5dc73" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>writeTrailer</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a946a8669127473dac8cb3ba7f82fd5ba" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>writeTrailer</name></member>
      <member refid="d8/d64/classevio_1_1_record_header_1a811ee974e1d1aadcf8485cb7132f8142" prot="public" virt="non-virtual"><scope>evio::RecordHeader</scope><name>~RecordHeader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
