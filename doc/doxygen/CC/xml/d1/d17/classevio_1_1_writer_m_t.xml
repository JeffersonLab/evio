<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="d1/d17/classevio_1_1_writer_m_t" kind="class" language="C++" prot="public">
    <compoundname>evio::WriterMT</compoundname>
    <includes local="no">WriterMT.h</includes>
    <innerclass refid="d1/d4f/classevio_1_1_writer_m_t_1_1_record_writer" prot="private">evio::WriterMT::RecordWriter</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1af04c73979fc44d2a4c12de4e88fd1b52" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t evio::WriterMT::writerBytesWritten</definition>
        <argsstring></argsstring>
        <name>writerBytesWritten</name>
        <initializer>= 0ULL</initializer>
        <briefdescription>
<para>Number of bytes written to file/buffer at current moment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="202" column="16" bodyfile="src/libsrc/WriterMT.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1ab51c2aa3c88d3579a3f2c8d587484d78" prot="private" static="no" mutable="no">
        <type>uint8_t *</type>
        <definition>uint8_t* evio::WriterMT::firstEvent</definition>
        <argsstring></argsstring>
        <name>firstEvent</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Evio format &quot;first&quot; event to store in file header&apos;s user header. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="204" column="17" bodyfile="src/libsrc/WriterMT.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a7ca0cfde98096ffb094f28d5171912c8" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::WriterMT::firstEventLength</definition>
        <argsstring></argsstring>
        <name>firstEventLength</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Length in bytes of firstEvent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="206" column="18" bodyfile="src/libsrc/WriterMT.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1ac73ee351b9c094f0e39c4c0f2692703d" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::WriterMT::maxEventCount</definition>
        <argsstring></argsstring>
        <name>maxEventCount</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Max number of events an internal record can hold. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="208" column="18" bodyfile="src/libsrc/WriterMT.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a87f6ad799e438d094e72bc95f5e81c81" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::WriterMT::maxBufferSize</definition>
        <argsstring></argsstring>
        <name>maxBufferSize</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Max number of uncompressed data bytes an internal record can hold. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="210" column="18" bodyfile="src/libsrc/WriterMT.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a410507f3b0da1be3ed2d22e6ba7b4bf9" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::WriterMT::recordNumber</definition>
        <argsstring></argsstring>
        <name>recordNumber</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>Number which is incremented and stored with each successive written record starting at 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="212" column="18" bodyfile="src/libsrc/WriterMT.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a0e9c0e7ac4a7e73595f24da7aac250b5" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::WriterMT::compressionThreadCount</definition>
        <argsstring></argsstring>
        <name>compressionThreadCount</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>Number of threads doing compression simultaneously. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="214" column="18" bodyfile="src/libsrc/WriterMT.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a9075cdbc6b0a4445657d68dd71ca8154" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string evio::WriterMT::fileName</definition>
        <argsstring></argsstring>
        <name>fileName</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
<para>File name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="217" column="21" bodyfile="src/libsrc/WriterMT.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a536f820d4479641c80434adbed5fc55f" prot="private" static="no" mutable="no">
        <type>std::ofstream</type>
        <definition>std::ofstream evio::WriterMT::outFile</definition>
        <argsstring></argsstring>
        <name>outFile</name>
        <briefdescription>
<para>Object for writing file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="220" column="23" bodyfile="src/libsrc/WriterMT.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a9ae58cd5ced813b37da5fdbb8e7f0f69" prot="private" static="no" mutable="no">
        <type><ref refid="d1/da6/classevio_1_1_file_header" kindref="compound">FileHeader</ref></type>
        <definition>FileHeader evio::WriterMT::fileHeader</definition>
        <argsstring></argsstring>
        <name>fileHeader</name>
        <briefdescription>
<para>Header to write to file, created in constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="223" column="20" bodyfile="src/libsrc/WriterMT.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a42deedd7d8d2184f97c51b8319c08b95" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string evio::WriterMT::dictionary</definition>
        <argsstring></argsstring>
        <name>dictionary</name>
        <briefdescription>
<para>String containing evio-format XML dictionary to store in file header&apos;s user header. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="226" column="21" bodyfile="src/libsrc/WriterMT.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a52b0bbae2614ec6453b91b2db9c890d2" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ByteBuffer&gt; evio::WriterMT::dictionaryFirstEventBuffer</definition>
        <argsstring></argsstring>
        <name>dictionaryFirstEventBuffer</name>
        <briefdescription>
<para>If dictionary and or firstEvent exist, this buffer contains them both as a record. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="229" column="25" bodyfile="src/libsrc/WriterMT.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a922198799ff50d9a6ad73dcdc47711f9" prot="private" static="no" mutable="no">
        <type><ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref></type>
        <definition>ByteOrder evio::WriterMT::byteOrder</definition>
        <argsstring></argsstring>
        <name>byteOrder</name>
        <initializer>{<ref refid="da/d7d/classevio_1_1_byte_order_1ae4055f708921d4e6540ab4662d27147c" kindref="member">ByteOrder::ENDIAN_LOCAL</ref>}</initializer>
        <briefdescription>
<para>Byte order of data to write to file/buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="232" column="19" bodyfile="src/libsrc/WriterMT.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a88b89eade8336a4730eb3f8c7913426c" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="d2/d7a/classevio_1_1_record_output" kindref="compound">RecordOutput</ref> &gt;</type>
        <definition>std::shared_ptr&lt;RecordOutput&gt; evio::WriterMT::outputRecord</definition>
        <argsstring></argsstring>
        <name>outputRecord</name>
        <briefdescription>
<para>Internal Record. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="235" column="25" bodyfile="src/libsrc/WriterMT.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1ab8d46cdf777b8409e1f89acd96357b09" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; evio::WriterMT::headerArray</definition>
        <argsstring></argsstring>
        <name>headerArray</name>
        <briefdescription>
<para>Byte array large enough to hold a header/trailer. </para>
        </briefdescription>
        <detaileddescription>
<para>This array may increase. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="238" column="21" bodyfile="src/libsrc/WriterMT.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a4c5ac16b166b97dd7b11764681c0af70" prot="private" static="no" mutable="no">
        <type><ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747" kindref="member">Compressor::CompressionType</ref></type>
        <definition>Compressor::CompressionType evio::WriterMT::compressionType</definition>
        <argsstring></argsstring>
        <name>compressionType</name>
        <initializer>{<ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747a056585718cbf5c7808c0e37b1f88dbb9" kindref="member">Compressor::UNCOMPRESSED</ref>}</initializer>
        <briefdescription>
<para>Type of compression to use on file. </para>
        </briefdescription>
        <detaileddescription>
<para>Default is none. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="241" column="37" bodyfile="src/libsrc/WriterMT.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a272c8cd0b6b15ae9dc453a27139b6ec1" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::vector&lt; uint32_t &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::vector&lt;uint32_t&gt; &gt; evio::WriterMT::recordLengths</definition>
        <argsstring></argsstring>
        <name>recordLengths</name>
        <briefdescription>
<para>List of record lengths interspersed with record event counts to be optionally written in trailer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="245" column="25" bodyfile="src/libsrc/WriterMT.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a4431ff99c4ba067d93313fd2810cc333" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="dc/de8/classevio_1_1_record_supply" kindref="compound">RecordSupply</ref> &gt;</type>
        <definition>std::shared_ptr&lt;RecordSupply&gt; evio::WriterMT::supply</definition>
        <argsstring></argsstring>
        <name>supply</name>
        <briefdescription>
<para>Fast, thread-safe, lock-free supply of records. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="248" column="25" bodyfile="src/libsrc/WriterMT.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a8ff2c97ec6c511c88af86fa227b5c372" prot="private" static="no" mutable="no">
        <type>std::vector&lt; RecordWriter &gt;</type>
        <definition>std::vector&lt;RecordWriter&gt; evio::WriterMT::recordWriterThreads</definition>
        <argsstring></argsstring>
        <name>recordWriterThreads</name>
        <briefdescription>
<para>Vector to hold thread used to write data to file/buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Easier to use vector here so we don&apos;t have to construct it immediately. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="252" column="21" bodyfile="src/libsrc/WriterMT.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a643149c2a62954731ce36ffe3963e484" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="d4/d65/classevio_1_1_record_compressor" kindref="compound">RecordCompressor</ref> &gt;</type>
        <definition>std::vector&lt;RecordCompressor&gt; evio::WriterMT::recordCompressorThreads</definition>
        <argsstring></argsstring>
        <name>recordCompressorThreads</name>
        <briefdescription>
<para>Threads used to compress data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="255" column="21" bodyfile="src/libsrc/WriterMT.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a9fbdc0e733bcf75766dff85fc8474c9f" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="db/dc8/classevio_1_1_record_ring_item" kindref="compound">RecordRingItem</ref> &gt;</type>
        <definition>std::shared_ptr&lt;RecordRingItem&gt; evio::WriterMT::ringItem</definition>
        <argsstring></argsstring>
        <name>ringItem</name>
        <briefdescription>
<para>Current ring Item from which current record is taken. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="258" column="25" bodyfile="src/libsrc/WriterMT.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a581ad9fd2372e7f3b75bd2306ebac2ea" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::WriterMT::addingTrailer</definition>
        <argsstring></argsstring>
        <name>addingTrailer</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>Do we add a last header or trailer to file/buffer? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="262" column="14" bodyfile="src/libsrc/WriterMT.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1ab8bc7c5960e3e9426a7c6368147220bb" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::WriterMT::addTrailerIndex</definition>
        <argsstring></argsstring>
        <name>addTrailerIndex</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Do we add a record index to the trailer? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="264" column="14" bodyfile="src/libsrc/WriterMT.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a382d87cd8eabf4bace68606fcea515c3" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::WriterMT::closed</definition>
        <argsstring></argsstring>
        <name>closed</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Has <ref refid="d1/d17/classevio_1_1_writer_m_t_1a0647993716e981fbedd6040f80114048" kindref="member">close()</ref> been called? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="266" column="14" bodyfile="src/libsrc/WriterMT.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a41a4590d6f025c68c4dd4fd873322d5c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::WriterMT::opened</definition>
        <argsstring></argsstring>
        <name>opened</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Has <ref refid="d1/d17/classevio_1_1_writer_m_t_1a1f585f15aa1b56884dc8612eb5072e0d" kindref="member">open()</ref> been called? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="268" column="14" bodyfile="src/libsrc/WriterMT.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a51637bb1df42c926b9b78d2a0cc73492" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::WriterMT::firstRecordWritten</definition>
        <argsstring></argsstring>
        <name>firstRecordWritten</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Has the first record been written already? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="270" column="14" bodyfile="src/libsrc/WriterMT.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a1783ba3005a37ecf06ff781efc95fcbe" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::WriterMT::haveDictionary</definition>
        <argsstring></argsstring>
        <name>haveDictionary</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Has a dictionary been defined? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="272" column="14" bodyfile="src/libsrc/WriterMT.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1a235bfc6bdea51c11d90ec9115afe9399" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::WriterMT::haveFirstEvent</definition>
        <argsstring></argsstring>
        <name>haveFirstEvent</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Has a first event been defined? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="274" column="14" bodyfile="src/libsrc/WriterMT.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d17/classevio_1_1_writer_m_t_1acf06df3cfe83413833080a7d0365bf8c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::WriterMT::haveUserHeader</definition>
        <argsstring></argsstring>
        <name>haveUserHeader</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Has caller defined a file header&apos;s user-header which is not dictionary/first-event? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="276" column="14" bodyfile="src/libsrc/WriterMT.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a1c4aa6ec4d7e32a2177fc972634755b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::WriterMT::WriterMT</definition>
        <argsstring>()</argsstring>
        <name>WriterMT</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Compression is single-threaded, LZ4. Little endian. <bold>No</bold> file is opened. Any file will have little endian byte order. 1M max event count and 8M max buffer size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="281" column="9" bodyfile="src/libsrc/WriterMT.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a0006bbaee6c193371b30a8dfc208430e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::WriterMT::WriterMT</definition>
        <argsstring>(const ByteOrder &amp;order, uint32_t maxEventCount, uint32_t maxBufferSize, Compressor::CompressionType compType, uint32_t compressionThreads)</argsstring>
        <name>WriterMT</name>
        <param>
          <type>const <ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxEventCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxBufferSize</declname>
        </param>
        <param>
          <type><ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747" kindref="member">Compressor::CompressionType</ref></type>
          <declname>compType</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>compressionThreads</declname>
        </param>
        <briefdescription>
<para>Constructor with byte order. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>No</bold> file is opened. File header type is evio file (<ref refid="df/dd8/classevio_1_1_header_type_1a3d8831bdc7439f38987e017528f87462" kindref="member">HeaderType#EVIO_FILE</ref>). Any dictionary will be placed in the user header which will create a conflict if user tries to call <ref refid="d1/d17/classevio_1_1_writer_m_t_1a3974c139f38b0a73bf8f7dc51367a2d1" kindref="member">open(const std::string &amp;, uint8_t *, uint32_t)</ref> with another user header array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>byte order of written file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxEventCount</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of events a record can hold. Value of O means use default (1M). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of uncompressed data bytes a record can hold. Value of &lt; 8MB results in default of 8MB. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of data compression to do (one, lz4 fast, lz4 best, gzip). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compressionThreads</parametername>
</parameternamelist>
<parameterdescription>
<para>number of threads doing compression simultaneously. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="283" column="9" bodyfile="src/libsrc/WriterMT.cpp" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a756450758e08def3dcc61fb7a2e085b3" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::WriterMT::WriterMT</definition>
        <argsstring>(const HeaderType &amp;hType, const ByteOrder &amp;order=ByteOrder::ENDIAN_LITTLE, uint32_t maxEventCount=0, uint32_t maxBufferSize=0, const std::string &amp;dictionary=&quot;&quot;, uint8_t *firstEvent=nullptr, uint32_t firstEventLen=0, Compressor::CompressionType compressionType=Compressor::UNCOMPRESSED, uint32_t compressionThreads=1, bool addTrailerIndex=false, uint32_t ringSize=16)</argsstring>
        <name>WriterMT</name>
        <param>
          <type>const <ref refid="df/dd8/classevio_1_1_header_type" kindref="compound">HeaderType</ref> &amp;</type>
          <declname>hType</declname>
        </param>
        <param>
          <type>const <ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
          <declname>order</declname>
          <defval><ref refid="da/d7d/classevio_1_1_byte_order_1ae70d8b2df728e3776bb6bb843260bb71" kindref="member">ByteOrder::ENDIAN_LITTLE</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxEventCount</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxBufferSize</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dictionary</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>firstEvent</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>firstEventLen</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747" kindref="member">Compressor::CompressionType</ref></type>
          <declname>compressionType</declname>
          <defname>compType</defname>
          <defval><ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747a056585718cbf5c7808c0e37b1f88dbb9" kindref="member">Compressor::UNCOMPRESSED</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>compressionThreads</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>addTrailerIndex</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ringSize</declname>
          <defval>16</defval>
        </param>
        <briefdescription>
<para>Constructor with byte order. </para>
        </briefdescription>
        <detaileddescription>
<para>The given file is opened so any subsequent call to open will fail. This method places the dictionary and first event into the file header&apos;s user header.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hType</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the file. If set to <ref refid="df/dd8/classevio_1_1_header_type_1a7f4853d824b7a00c226afb9146fa9927" kindref="member">HeaderType#HIPO_FILE</ref>, the header will be written with the first 4 bytes set to HIPO. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>byte order of written file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxEventCount</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of events a record can hold. Value of O means use default (1M). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of uncompressed data bytes a record can hold. Value of &lt; 8MB results in default of 8MB. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>string holding an evio format dictionary to be placed in userHeader. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>byte array containing an evio event to be included in userHeader. It must be in the same byte order as the order argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstEventLen</parametername>
</parameternamelist>
<parameterdescription>
<para>number of valid bytes in firstEvent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of data compression to do (one, lz4 fast, lz4 best, gzip) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compressionThreads</parametername>
</parameternamelist>
<parameterdescription>
<para>number of threads doing compression simultaneously </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addTrailerIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, we add a record index to the trailer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ringSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of records in supply ring, must be multiple of 2 and &gt;= compressionThreads. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="286" column="18" bodyfile="src/libsrc/WriterMT.cpp" bodystart="70" bodyend="133"/>
        <references refid="d8/d64/classevio_1_1_record_header_1a0e09d731589bcfe2705d0c606192f6eb" compoundref="d6/dea/_record_header_8h" startline="127">evio::RecordHeader::HEADER_SIZE_BYTES</references>
        <references refid="df/dd8/classevio_1_1_header_type_1a7f4853d824b7a00c226afb9146fa9927" compoundref="d5/d98/_header_type_8h" startline="41">evio::HeaderType::HIPO_FILE</references>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a6d41af0c23a70a4275baac708184c333" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::WriterMT::WriterMT</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>WriterMT</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Constructor with filename. </para>
        </briefdescription>
        <detaileddescription>
<para>The output file will be created with no user header. File byte order is little endian. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>output file name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="299" column="18" bodyfile="src/libsrc/WriterMT.cpp" bodystart="142" bodyend="144"/>
        <references refid="d1/d17/classevio_1_1_writer_m_t_1a1f585f15aa1b56884dc8612eb5072e0d" compoundref="d9/d77/_writer_m_t_8cpp" startline="256" endline="258">open</references>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1ac87e7c1c6f3f488b5baff39fa6762679" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::WriterMT::WriterMT</definition>
        <argsstring>(const std::string &amp;filename, const ByteOrder &amp;order, uint32_t maxEventCount, uint32_t maxBufferSize, Compressor::CompressionType compressionType, uint32_t compressionThreads)</argsstring>
        <name>WriterMT</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxEventCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxBufferSize</declname>
        </param>
        <param>
          <type><ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747" kindref="member">Compressor::CompressionType</ref></type>
          <declname>compressionType</declname>
          <defname>compType</defname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>compressionThreads</declname>
        </param>
        <briefdescription>
<para>Constructor with filename &amp; byte order. </para>
        </briefdescription>
        <detaileddescription>
<para>The output file will be created with no user header. Ring size is 16.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>output file name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>byte order of written file or null for default (little endian) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxEventCount</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of events a record can hold. Value of O means use default (1M). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of uncompressed data bytes a record can hold. Value of &lt; 8MB results in default of 8MB. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of data compression to do (0=none, 1=lz4 fast, 2=lz4 best, 3=gzip) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compressionThreads</parametername>
</parameternamelist>
<parameterdescription>
<para>number of threads doing compression simultaneously </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="301" column="9" bodyfile="src/libsrc/WriterMT.cpp" bodystart="161" bodyend="167"/>
        <references refid="d1/d17/classevio_1_1_writer_m_t_1a1f585f15aa1b56884dc8612eb5072e0d" compoundref="d9/d77/_writer_m_t_8cpp" startline="256" endline="258">open</references>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a19e17694d785f9cb315fbb8bb45dd98e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::WriterMT::~WriterMT</definition>
        <argsstring>()=default</argsstring>
        <name>~WriterMT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="304" column="9"/>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1aca66655847ba07efaa2c9d68e5757fb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
        <definition>const ByteOrder &amp; evio::WriterMT::getByteOrder</definition>
        <argsstring>() const</argsstring>
        <name>getByteOrder</name>
        <briefdescription>
<para>Get the file&apos;s byte order. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>file&apos;s byte order. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="315" column="26" bodyfile="src/libsrc/WriterMT.cpp" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a68b05c4f9a45ec56f9c5594d513da6d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/da6/classevio_1_1_file_header" kindref="compound">FileHeader</ref> &amp;</type>
        <definition>FileHeader &amp; evio::WriterMT::getFileHeader</definition>
        <argsstring>()</argsstring>
        <name>getFileHeader</name>
        <briefdescription>
<para>Get the file header. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>file header. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="317" column="23" bodyfile="src/libsrc/WriterMT.cpp" bodystart="184" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a507b0794073feaba80658f006e3f8103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747" kindref="member">Compressor::CompressionType</ref></type>
        <definition>Compressor::CompressionType evio::WriterMT::getCompressionType</definition>
        <argsstring>()</argsstring>
        <name>getCompressionType</name>
        <briefdescription>
<para><zwj/>** </para>
        </briefdescription>
        <detaileddescription>
<para><zwj/>** Convenience method that gets compression type for the file being written. <simplesect kind="return"><para>compression type for the file being written. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="320" column="37" bodyfile="src/libsrc/WriterMT.cpp" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a602ade27297bb163f4c85452d7b3d0ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::WriterMT::addTrailer</definition>
        <argsstring>() const</argsstring>
        <name>addTrailer</name>
        <briefdescription>
<para>Does this writer add a trailer to the end of the file/buffer? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this writer adds a trailer to the end of the file/buffer, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="322" column="14" bodyfile="src/libsrc/WriterMT.cpp" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1af9f6fb10f2b791d56a2a86356e404b25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::WriterMT::addTrailer</definition>
        <argsstring>(bool add)</argsstring>
        <name>addTrailer</name>
        <param>
          <type>bool</type>
          <declname>add</declname>
        </param>
        <briefdescription>
<para>Set whether this writer adds a trailer to the end of the file/buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>add</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, at the end of file/buffer, add an ending header (trailer) with no index of records and no following data. Update the file header to contain a file offset to the trailer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="323" column="14" bodyfile="src/libsrc/WriterMT.cpp" bodystart="220" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1af121e05d362ecaef240c67a3dd7fd33d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::WriterMT::addTrailerWithIndex</definition>
        <argsstring>()</argsstring>
        <name>addTrailerWithIndex</name>
        <briefdescription>
<para>Does this writer add a trailer with a record index to the end of the file? Or, if writing to a buffer, is a trailer added with no index? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if writing to a file: true if this writer adds a trailer with a record index to the end of the file, else false. If writing to a buffer, true if this writer adds a traile to the end of the buffer, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="324" column="14" bodyfile="src/libsrc/WriterMT.cpp" bodystart="230" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a5b0363d26c10365ac6bb115298c137d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::WriterMT::addTrailerWithIndex</definition>
        <argsstring>(bool addTrailingIndex)</argsstring>
        <name>addTrailerWithIndex</name>
        <param>
          <type>bool</type>
          <declname>addTrailingIndex</declname>
        </param>
        <briefdescription>
<para>Set whether this writer adds a trailer with a record index to the end of the file. </para>
        </briefdescription>
        <detaileddescription>
<para>Or, if writing to a buffer, set whether a trailer is added with no index. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addTrailingIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, at the end of file, add an ending header (trailer) with an index of all records but with no following data. Update the file header to contain a file offset to the trailer. If true, and writing to a buffer, add a trailer with no index to the end of the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="325" column="14" bodyfile="src/libsrc/WriterMT.cpp" bodystart="242" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a1f585f15aa1b56884dc8612eb5072e0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::WriterMT::open</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>open</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Open a new file and write file header with no user header. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>output file name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if open already called without being followed by calling close. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IOException</parametername>
</parameternamelist>
<parameterdescription>
<para>if file cannot be found or IO error writing to file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="327" column="14" bodyfile="src/libsrc/WriterMT.cpp" bodystart="256" bodyend="258"/>
        <referencedby refid="d1/d17/classevio_1_1_writer_m_t_1a6d41af0c23a70a4275baac708184c333" compoundref="d9/d77/_writer_m_t_8cpp" startline="142" endline="144">WriterMT</referencedby>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a3974c139f38b0a73bf8f7dc51367a2d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::WriterMT::open</definition>
        <argsstring>(const std::string &amp;filename, uint8_t *userHdr, uint32_t userLen)</argsstring>
        <name>open</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>userHdr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>userLen</declname>
        </param>
        <briefdescription>
<para>Open a file and write file header with given user header. </para>
        </briefdescription>
        <detaileddescription>
<para>User header is automatically padded when written. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of file to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userHdr</parametername>
</parameternamelist>
<parameterdescription>
<para>byte array representing the optional user&apos;s header. If this is null AND dictionary and/or first event are given, the dictionary and/or first event will be placed in its own record and written as the user header. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of userHdr in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if filename arg is bad, or if <ref refid="d1/d17/classevio_1_1_writer_m_t_1a1f585f15aa1b56884dc8612eb5072e0d" kindref="member">open()</ref> was already called without being followed by <ref refid="d1/d17/classevio_1_1_writer_m_t_1adebafad3524a67dae57ff4a50c991229" kindref="member">reset()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IOException</parametername>
</parameternamelist>
<parameterdescription>
<para>if file cannot be found or IO error writing to file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="328" column="14" bodyfile="src/libsrc/WriterMT.cpp" bodystart="274" bodyend="334"/>
        <references refid="d1/d17/classevio_1_1_writer_m_t_1abe4a6ab09bc138dbd08057262b87d77b" compoundref="d9/d77/_writer_m_t_8cpp" startline="359" endline="396">createHeader</references>
        <references refid="d1/da6/classevio_1_1_file_header_1a01c1f92000c5a0f3b2f11b0c0e5e3a74" compoundref="de/d46/_file_header_8cpp" startline="218" endline="218">evio::FileHeader::getLength</references>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1abe4a6ab09bc138dbd08057262b87d77b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ByteBuffer &gt; evio::WriterMT::createHeader</definition>
        <argsstring>(uint8_t *userHdr, uint32_t userLen)</argsstring>
        <name>createHeader</name>
        <param>
          <type>uint8_t *</type>
          <declname>userHdr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>userLen</declname>
        </param>
        <briefdescription>
<para>Create and return a buffer containing a general file header followed by the user header given in the argument. </para>
        </briefdescription>
        <detaileddescription>
<para>If user header is not padded to 4-byte boundary, it&apos;s done here.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>userHdr</parametername>
</parameternamelist>
<parameterdescription>
<para>byte array containing a user-defined header, may be null. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userLen</parametername>
</parameternamelist>
<parameterdescription>
<para>array length in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> containing a file header followed by the user-defined header </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="330" column="25" bodyfile="src/libsrc/WriterMT.cpp" bodystart="359" bodyend="396"/>
        <references refid="d1/da6/classevio_1_1_file_header_1a01c1f92000c5a0f3b2f11b0c0e5e3a74" compoundref="de/d46/_file_header_8cpp" startline="218" endline="218">evio::FileHeader::getLength</references>
        <references refid="d1/da6/classevio_1_1_file_header_1a60a8eab054b6f02e84d8975e3aa436b9" compoundref="d2/d66/_file_header_8h" startline="105">evio::FileHeader::HEADER_SIZE_BYTES</references>
        <references refid="d1/da6/classevio_1_1_file_header_1af318676a4ffce0023d1bf669bb44cf31" compoundref="de/d46/_file_header_8cpp" startline="78" endline="99">evio::FileHeader::reset</references>
        <references refid="d1/da6/classevio_1_1_file_header_1ade550a2cc97d77fe89f81941a3e92fcc" compoundref="de/d46/_file_header_8cpp" startline="284" endline="297">evio::FileHeader::setBitInfo</references>
        <references refid="d1/da6/classevio_1_1_file_header_1a5d19dfdbc256c2bf9025795442cb59ff" compoundref="de/d46/_file_header_8cpp" startline="531" endline="538">evio::FileHeader::setUserHeaderLength</references>
        <references refid="d1/da6/classevio_1_1_file_header_1aabd952c177a47ed7875b6c9d988bff8e" compoundref="de/d46/_file_header_8cpp" startline="589" endline="608">evio::FileHeader::writeHeader</references>
        <referencedby refid="d1/d17/classevio_1_1_writer_m_t_1a3974c139f38b0a73bf8f7dc51367a2d1" compoundref="d9/d77/_writer_m_t_8cpp" startline="274" endline="334">open</referencedby>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a8524b1765b4c4f8ac7ed7eff80b56af7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ByteBuffer &gt; evio::WriterMT::createHeader</definition>
        <argsstring>(ByteBuffer &amp;userHdr)</argsstring>
        <name>createHeader</name>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>userHdr</declname>
        </param>
        <briefdescription>
<para>Return a buffer with a general file header followed by the given user header (userHdr). </para>
        </briefdescription>
        <detaileddescription>
<para>The buffer is cleared and set to desired byte order prior to writing. If user header is not padded to 4-byte boundary, it&apos;s done here.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>userHdr</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer containing a user-defined header which must be READY-TO-READ! </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>buffer containing a file header followed by the user-defined header. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if writing to buffer, not file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="331" column="25" bodyfile="src/libsrc/WriterMT.cpp" bodystart="408" bodyend="440"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1aa0e335238a57eaa0bffee8f968e5995f" compoundref="d4/d6c/_byte_buffer_8cpp" startline="475" endline="475">evio::ByteBuffer::array</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1abf7abf99aa7544601997f40eba298648" compoundref="d4/d6c/_byte_buffer_8cpp" startline="490" endline="490">evio::ByteBuffer::arrayOffset</references>
        <references refid="d1/da6/classevio_1_1_file_header_1a01c1f92000c5a0f3b2f11b0c0e5e3a74" compoundref="de/d46/_file_header_8cpp" startline="218" endline="218">evio::FileHeader::getLength</references>
        <references refid="d1/da6/classevio_1_1_file_header_1a60a8eab054b6f02e84d8975e3aa436b9" compoundref="d2/d66/_file_header_8h" startline="105">evio::FileHeader::HEADER_SIZE_BYTES</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a88f84e6b1757db70542eac13294fc80e" compoundref="d4/d6c/_byte_buffer_8cpp" startline="518" endline="518">evio::ByteBuffer::position</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a32b043081cd3a62187f2577ce2966e7d" compoundref="d4/d6c/_byte_buffer_8cpp" startline="497" endline="497">evio::ByteBuffer::remaining</references>
        <references refid="d1/da6/classevio_1_1_file_header_1af318676a4ffce0023d1bf669bb44cf31" compoundref="de/d46/_file_header_8cpp" startline="78" endline="99">evio::FileHeader::reset</references>
        <references refid="d1/da6/classevio_1_1_file_header_1ade550a2cc97d77fe89f81941a3e92fcc" compoundref="de/d46/_file_header_8cpp" startline="284" endline="297">evio::FileHeader::setBitInfo</references>
        <references refid="d1/da6/classevio_1_1_file_header_1a5d19dfdbc256c2bf9025795442cb59ff" compoundref="de/d46/_file_header_8cpp" startline="531" endline="538">evio::FileHeader::setUserHeaderLength</references>
        <references refid="d1/da6/classevio_1_1_file_header_1aabd952c177a47ed7875b6c9d988bff8e" compoundref="de/d46/_file_header_8cpp" startline="589" endline="608">evio::FileHeader::writeHeader</references>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a9185ec115b3b04111345b53c7fa64190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::WriterMT::writeRecord</definition>
        <argsstring>(RecordOutput &amp;record)</argsstring>
        <name>writeRecord</name>
        <param>
          <type><ref refid="d2/d7a/classevio_1_1_record_output" kindref="compound">RecordOutput</ref> &amp;</type>
          <declname>record</declname>
          <defname>rec</defname>
        </param>
        <briefdescription>
<para>Appends the record to the file. </para>
        </briefdescription>
        <detaileddescription>
<para>Using this method in conjunction with <ref refid="d1/d17/classevio_1_1_writer_m_t_1a78421457d086cf500d64150da99c6505" kindref="member">addEvent()</ref> is not thread-safe. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rec</parametername>
</parameternamelist>
<parameterdescription>
<para>record object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if record&apos;s byte order is opposite to output endian. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="333" column="14" bodyfile="src/libsrc/WriterMT.cpp" bodystart="523" bodyend="550"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1a7d31fb593c433d6c5be6961a5b43d1da" compoundref="d4/df6/_record_output_8cpp" startline="414" endline="414">evio::RecordOutput::getByteOrder</references>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a78421457d086cf500d64150da99c6505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::WriterMT::addEvent</definition>
        <argsstring>(uint8_t *buffer, uint32_t offset, uint32_t length)</argsstring>
        <name>addEvent</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Add a byte array to the current internal record. </para>
        </briefdescription>
        <detaileddescription>
<para>If the length of the buffer exceeds the maximum size of the record, the record will be written to the file (compressed if the flag is set). And another record will be obtained from the supply to receive the buffer. Using this method in conjunction with <ref refid="d1/d17/classevio_1_1_writer_m_t_1a9185ec115b3b04111345b53c7fa64190" kindref="member">writeRecord(RecordOutput &amp;)</ref> is not thread-safe.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>array to add to the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset into array from which to start writing data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to write from array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="337" column="14" bodyfile="src/libsrc/WriterMT.cpp" bodystart="565" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a904111fb56c2dad2141173754827994b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::WriterMT::addEvent</definition>
        <argsstring>(ByteBuffer &amp;buffer)</argsstring>
        <name>addEvent</name>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Add a <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> to the internal record. </para>
        </briefdescription>
        <detaileddescription>
<para>If the length of the buffer exceeds the maximum size of the record, the record will be written to the file (compressed if the flag is set). Internal record will be reset to receive new buffers. Using this method in conjunction with <ref refid="d1/d17/classevio_1_1_writer_m_t_1a9185ec115b3b04111345b53c7fa64190" kindref="member">writeRecord()</ref> is not thread-safe. <bold>The byte order of event&apos;s data must match the byte order given in constructor!</bold></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>array to add to the file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if cannot write to file or buffer arg&apos;s byte order is wrong. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="338" column="14" bodyfile="src/libsrc/WriterMT.cpp" bodystart="598" bodyend="620"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a3d5f0120189717ffc8d2d480d89cb91a" compoundref="d4/d6c/_byte_buffer_8cpp" startline="466" endline="466">evio::ByteBuffer::order</references>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a329d5fd7ee27378b2d532e715742bd87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::WriterMT::addEvent</definition>
        <argsstring>(EvioNode &amp;node)</argsstring>
        <name>addEvent</name>
        <param>
          <type><ref refid="de/dd0/classevio_1_1_evio_node" kindref="compound">EvioNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Add an <ref refid="de/dd0/classevio_1_1_evio_node" kindref="compound">EvioNode</ref> to the internal record. </para>
        </briefdescription>
        <detaileddescription>
<para>If the length of the data exceeds the maximum size of the record, the record will be written to the file (compressed if the flag is set). Internal record will be reset to receive new buffers. Using this method in conjunction with <ref refid="d1/d17/classevio_1_1_writer_m_t_1a9185ec115b3b04111345b53c7fa64190" kindref="member">writeRecord()</ref> is not thread-safe. <bold>The byte order of node&apos;s data must match the byte order given in constructor!</bold></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>node to add to the file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if cannot write to file or node arg&apos;s byte order is wrong. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="340" column="14" bodyfile="src/libsrc/WriterMT.cpp" bodystart="635" bodyend="657"/>
        <references refid="de/dd0/classevio_1_1_evio_node_1a62277033890518669c730a7b41296ec6" compoundref="d9/d45/_evio_node_8cpp" startline="854" endline="854">evio::EvioNode::getBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1adebafad3524a67dae57ff4a50c991229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::WriterMT::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Get this object ready for re-use. </para>
        </briefdescription>
        <detaileddescription>
<para>Follow calling this with call to <ref refid="d1/d17/classevio_1_1_writer_m_t_1a1f585f15aa1b56884dc8612eb5072e0d" kindref="member">open(const std::string &amp;)</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="342" column="14" bodyfile="src/libsrc/WriterMT.cpp" bodystart="665" bodyend="675"/>
        <references refid="d1/da6/classevio_1_1_file_header_1af318676a4ffce0023d1bf669bb44cf31" compoundref="de/d46/_file_header_8cpp" startline="78" endline="99">evio::FileHeader::reset</references>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a0647993716e981fbedd6040f80114048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::WriterMT::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
<para>Close opened file. </para>
        </briefdescription>
        <detaileddescription>
<para>If the output record contains events, they will be flushed to file. Trailer and its optional index written if requested.</para>
<para><bold>The addEvent or addRecord methods must no longer be called.</bold> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="343" column="14" bodyfile="src/libsrc/WriterMT.cpp" bodystart="684" bodyend="731"/>
        <references refid="da/d7d/classevio_1_1_byte_order_1ae4055f708921d4e6540ab4662d27147c" compoundref="d1/d02/_byte_order_8h" startline="61">evio::ByteOrder::ENDIAN_LOCAL</references>
        <references refid="d1/da6/classevio_1_1_file_header_1a13a655d1b16e70688ec555e1f6cd7f5b" compoundref="d2/d66/_file_header_8h" startline="118">evio::FileHeader::RECORD_COUNT_OFFSET</references>
        <references refid="d1/d02/_byte_order_8h_1a700fb30611761c46a674a45cc28ff561" compoundref="d1/d02/_byte_order_8h" startline="28">SWAP_32</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1aa9e5d3b0244833028ba2d7e898af6ba7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ByteBuffer &gt; evio::WriterMT::createDictionaryRecord</definition>
        <argsstring>()</argsstring>
        <name>createDictionaryRecord</name>
        <briefdescription>
<para>Create a buffer representation of a record containing the dictionary and/or the first event. </para>
        </briefdescription>
        <detaileddescription>
<para>No compression. <simplesect kind="return"><para>buffer representation of record containing dictionary and/or first event, of zero size if first event and dictionary don&apos;t exist. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="310" column="25" bodyfile="src/libsrc/WriterMT.cpp" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="d1/d17/classevio_1_1_writer_m_t_1a7ff08f542a89c11a338373ea4179883d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::WriterMT::writeTrailer</definition>
        <argsstring>(bool writeIndex, uint32_t recordNum)</argsstring>
        <name>writeTrailer</name>
        <param>
          <type>bool</type>
          <declname>writeIndex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>recordNum</declname>
        </param>
        <briefdescription>
<para>Write a general header as the last &quot;header&quot; or trailer in the file optionally followed by an index of all record lengths. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s best <bold>NOT</bold> to call this directly. The way to write a trailer to fis to call <ref refid="d1/d17/classevio_1_1_writer_m_t_1af9f6fb10f2b791d56a2a86356e404b25" kindref="member">addTrailer(bool)</ref> or <ref refid="d1/d17/classevio_1_1_writer_m_t_1a5b0363d26c10365ac6bb115298c137d0" kindref="member">addTrailerWithIndex(bool)</ref>. Then when <ref refid="d1/d17/classevio_1_1_writer_m_t_1a0647993716e981fbedd6040f80114048" kindref="member">close()</ref> is called, the trailer will be written.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>writeIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, write an index of all record lengths in trailer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recordNum</parametername>
</parameternamelist>
<parameterdescription>
<para>record number for trailing record. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if error writing to file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/WriterMT.h" line="311" column="14" bodyfile="src/libsrc/WriterMT.cpp" bodystart="455" bodyend="514"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class to write Evio/HIPO files only (not to buffers). </para>
    </briefdescription>
    <detaileddescription>
<para>Able to multithread the compression of data.</para>
<para><simplesect kind="version"><para>6.0 </para>
</simplesect>
<simplesect kind="since"><para>6.0 5/13/19 </para>
</simplesect>
<simplesect kind="author"><para>timmer </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="src/libsrc/WriterMT.h" line="56" column="5" bodyfile="src/libsrc/WriterMT.h" bodystart="56" bodyend="345"/>
    <listofallmembers>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a78421457d086cf500d64150da99c6505" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>addEvent</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a904111fb56c2dad2141173754827994b" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>addEvent</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a329d5fd7ee27378b2d532e715742bd87" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>addEvent</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a581ad9fd2372e7f3b75bd2306ebac2ea" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>addingTrailer</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a602ade27297bb163f4c85452d7b3d0ec" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>addTrailer</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1af9f6fb10f2b791d56a2a86356e404b25" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>addTrailer</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1ab8bc7c5960e3e9426a7c6368147220bb" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>addTrailerIndex</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1af121e05d362ecaef240c67a3dd7fd33d" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>addTrailerWithIndex</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a5b0363d26c10365ac6bb115298c137d0" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>addTrailerWithIndex</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a922198799ff50d9a6ad73dcdc47711f9" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>byteOrder</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a0647993716e981fbedd6040f80114048" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>close</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a382d87cd8eabf4bace68606fcea515c3" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>closed</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a0e9c0e7ac4a7e73595f24da7aac250b5" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>compressionThreadCount</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a4c5ac16b166b97dd7b11764681c0af70" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>compressionType</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1aa9e5d3b0244833028ba2d7e898af6ba7" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>createDictionaryRecord</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1abe4a6ab09bc138dbd08057262b87d77b" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>createHeader</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a8524b1765b4c4f8ac7ed7eff80b56af7" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>createHeader</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a42deedd7d8d2184f97c51b8319c08b95" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>dictionary</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a52b0bbae2614ec6453b91b2db9c890d2" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>dictionaryFirstEventBuffer</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a9ae58cd5ced813b37da5fdbb8e7f0f69" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>fileHeader</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a9075cdbc6b0a4445657d68dd71ca8154" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>fileName</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1ab51c2aa3c88d3579a3f2c8d587484d78" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>firstEvent</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a7ca0cfde98096ffb094f28d5171912c8" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>firstEventLength</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a51637bb1df42c926b9b78d2a0cc73492" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>firstRecordWritten</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1aca66655847ba07efaa2c9d68e5757fb5" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>getByteOrder</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a507b0794073feaba80658f006e3f8103" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>getCompressionType</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a68b05c4f9a45ec56f9c5594d513da6d1" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>getFileHeader</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a1783ba3005a37ecf06ff781efc95fcbe" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>haveDictionary</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a235bfc6bdea51c11d90ec9115afe9399" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>haveFirstEvent</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1acf06df3cfe83413833080a7d0365bf8c" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>haveUserHeader</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1ab8d46cdf777b8409e1f89acd96357b09" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>headerArray</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a87f6ad799e438d094e72bc95f5e81c81" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>maxBufferSize</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1ac73ee351b9c094f0e39c4c0f2692703d" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>maxEventCount</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a1f585f15aa1b56884dc8612eb5072e0d" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>open</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a3974c139f38b0a73bf8f7dc51367a2d1" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>open</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a41a4590d6f025c68c4dd4fd873322d5c" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>opened</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a536f820d4479641c80434adbed5fc55f" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>outFile</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a88b89eade8336a4730eb3f8c7913426c" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>outputRecord</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a643149c2a62954731ce36ffe3963e484" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>recordCompressorThreads</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a272c8cd0b6b15ae9dc453a27139b6ec1" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>recordLengths</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a410507f3b0da1be3ed2d22e6ba7b4bf9" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>recordNumber</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a8ff2c97ec6c511c88af86fa227b5c372" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>recordWriterThreads</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1adebafad3524a67dae57ff4a50c991229" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>reset</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a9fbdc0e733bcf75766dff85fc8474c9f" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>ringItem</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a4431ff99c4ba067d93313fd2810cc333" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>supply</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1af04c73979fc44d2a4c12de4e88fd1b52" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>writerBytesWritten</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a9185ec115b3b04111345b53c7fa64190" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>writeRecord</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a1c4aa6ec4d7e32a2177fc972634755b2" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>WriterMT</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a0006bbaee6c193371b30a8dfc208430e" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>WriterMT</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a756450758e08def3dcc61fb7a2e085b3" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>WriterMT</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a6d41af0c23a70a4275baac708184c333" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>WriterMT</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1ac87e7c1c6f3f488b5baff39fa6762679" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>WriterMT</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a7ff08f542a89c11a338373ea4179883d" prot="private" virt="non-virtual"><scope>evio::WriterMT</scope><name>writeTrailer</name></member>
      <member refid="d1/d17/classevio_1_1_writer_m_t_1a19e17694d785f9cb315fbb8bb45dd98e" prot="public" virt="non-virtual"><scope>evio::WriterMT</scope><name>~WriterMT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
