<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="d9/dcd/classevio_1_1_event_writer" kind="class" language="C++" prot="public">
    <compoundname>evio::EventWriter</compoundname>
    <includes local="no">EventWriter.h</includes>
    <innerclass refid="d7/d52/classevio_1_1_event_writer_1_1_file_closer" prot="private">evio::EventWriter::FileCloser</innerclass>
    <innerclass refid="d0/d02/classevio_1_1_event_writer_1_1_record_writer" prot="private">evio::EventWriter::RecordWriter</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a763629f3f5a87ae70f5304947876d40a" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="d2/d7a/classevio_1_1_record_output" kindref="compound">RecordOutput</ref> &gt;</type>
        <definition>std::shared_ptr&lt;RecordOutput&gt; evio::EventWriter::commonRecord</definition>
        <argsstring></argsstring>
        <name>commonRecord</name>
        <briefdescription>
<para>Dictionary and first event are stored in user header part of file header. </para>
        </briefdescription>
        <detaileddescription>
<para>They&apos;re written as a record which allows multiple events. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="673" column="25" bodyfile="src/libsrc/EventWriter.h" bodystart="673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a2c9c400ce1578dba5b904e437d2df12b" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="d2/d7a/classevio_1_1_record_output" kindref="compound">RecordOutput</ref> &gt;</type>
        <definition>std::shared_ptr&lt;RecordOutput&gt; evio::EventWriter::currentRecord</definition>
        <argsstring></argsstring>
        <name>currentRecord</name>
        <briefdescription>
<para>Record currently being filled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="676" column="25" bodyfile="src/libsrc/EventWriter.h" bodystart="676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a84604cc8b654cf221be36a954aeda7fe" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="db/dc8/classevio_1_1_record_ring_item" kindref="compound">RecordRingItem</ref> &gt;</type>
        <definition>std::shared_ptr&lt;RecordRingItem&gt; evio::EventWriter::currentRingItem</definition>
        <argsstring></argsstring>
        <name>currentRingItem</name>
        <briefdescription>
<para>Record supply item from which current record comes from. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="679" column="25" bodyfile="src/libsrc/EventWriter.h" bodystart="679" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a7dccb5060816aa88812f5fb50df9df80" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="dc/de8/classevio_1_1_record_supply" kindref="compound">RecordSupply</ref> &gt;</type>
        <definition>std::shared_ptr&lt;RecordSupply&gt; evio::EventWriter::supply</definition>
        <argsstring></argsstring>
        <name>supply</name>
        <briefdescription>
<para>Fast supply of record items for filling, compressing and writing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="682" column="25" bodyfile="src/libsrc/EventWriter.h" bodystart="682" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a2ea1e53597502980a9caffdd64ecbdd9" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::maxSupplyBytes</definition>
        <argsstring></argsstring>
        <name>maxSupplyBytes</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Max number of bytes held by all records in the supply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="685" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="685" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a9f6c884a4d073779848bc1b200eec8f4" prot="private" static="no" mutable="no">
        <type><ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747" kindref="member">Compressor::CompressionType</ref></type>
        <definition>Compressor::CompressionType evio::EventWriter::compressionType</definition>
        <argsstring></argsstring>
        <name>compressionType</name>
        <initializer>{<ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747a056585718cbf5c7808c0e37b1f88dbb9" kindref="member">Compressor::UNCOMPRESSED</ref>}</initializer>
        <briefdescription>
<para>Type of compression being done on data (0=none, 1=LZ4fastest, 2=LZ4best, 3=gzip). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="689" column="37" bodyfile="src/libsrc/EventWriter.h" bodystart="689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a69e28446ebacd07a27bb7c005364b269" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::compressionFactor</definition>
        <argsstring></argsstring>
        <name>compressionFactor</name>
        <briefdescription>
<para>The estimated ratio of compressed to uncompressed data. </para>
        </briefdescription>
        <detaileddescription>
<para>(Used to figure out when to split a file). Percentage of original size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="693" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1af55e1f21cba18c98d879f0ee346f8d74" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::vector&lt; uint32_t &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::vector&lt;uint32_t&gt; &gt; evio::EventWriter::recordLengths</definition>
        <argsstring></argsstring>
        <name>recordLengths</name>
        <briefdescription>
<para>List of record length followed by count to be optionally written in trailer. </para>
        </briefdescription>
        <detaileddescription>
<para>Easiest to make this a shared pointer since it gets passed as a method arg. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="697" column="25" bodyfile="src/libsrc/EventWriter.h" bodystart="697" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1ae488db178719d5b0dace1ac0e08125ca" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t evio::EventWriter::bytesWritten</definition>
        <argsstring></argsstring>
        <name>bytesWritten</name>
        <initializer>= 0ULL</initializer>
        <briefdescription>
<para>Number of uncompressed bytes written to the current file/buffer at the moment, including ending header and NOT the total in all split files. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="702" column="16" bodyfile="src/libsrc/EventWriter.h" bodystart="702" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1abfa82bd02498c83d5d079ccc77834aab" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::EventWriter::addingTrailer</definition>
        <argsstring></argsstring>
        <name>addingTrailer</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>Do we add a last header or trailer to file/buffer? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="705" column="14" bodyfile="src/libsrc/EventWriter.h" bodystart="705" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a9ad87a38a37400141e1a121530c67c70" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::EventWriter::addTrailerIndex</definition>
        <argsstring></argsstring>
        <name>addTrailerIndex</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Do we add a record index to the trailer? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="708" column="14" bodyfile="src/libsrc/EventWriter.h" bodystart="708" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a55e95a22ece4bba5477850af1d2849c6" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; evio::EventWriter::headerArray</definition>
        <argsstring></argsstring>
        <name>headerArray</name>
        <briefdescription>
<para>Byte array large enough to hold a header/trailer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="711" column="21" bodyfile="src/libsrc/EventWriter.h" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1af5cfadb7835d7416db46c3e58d503188" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="d4/d65/classevio_1_1_record_compressor" kindref="compound">RecordCompressor</ref> &gt;</type>
        <definition>std::vector&lt;RecordCompressor&gt; evio::EventWriter::recordCompressorThreads</definition>
        <argsstring></argsstring>
        <name>recordCompressorThreads</name>
        <briefdescription>
<para>Threads used to compress data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="714" column="21" bodyfile="src/libsrc/EventWriter.h" bodystart="714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1ae7a7e771e6d09a37b1c7db34bd7758c7" prot="private" static="no" mutable="no">
        <type>std::vector&lt; EventWriter::RecordWriter &gt;</type>
        <definition>std::vector&lt;EventWriter::RecordWriter&gt; evio::EventWriter::recordWriterThread</definition>
        <argsstring></argsstring>
        <name>recordWriterThread</name>
        <briefdescription>
<para>Thread used to write data to file/buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Easier to use vector here so we don&apos;t have to construct it immediately. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="718" column="21" bodyfile="src/libsrc/EventWriter.h" bodystart="718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a75705e1c597f07954c0618d0c6d76d5c" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::recordsWritten</definition>
        <argsstring></argsstring>
        <name>recordsWritten</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of records written to split-file/buffer at current moment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="721" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="721" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a5ca8e4f2493a7cb06ca254fd791aea93" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::recordNumber</definition>
        <argsstring></argsstring>
        <name>recordNumber</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>Running count of the record number. </para>
        </briefdescription>
        <detaileddescription>
<para>The next one to use starting with 1. Current value is generally for the next record. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="725" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1abf0aa9823f745840d513fbd2317b80b9" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string evio::EventWriter::xmlDictionary</definition>
        <argsstring></argsstring>
        <name>xmlDictionary</name>
        <briefdescription>
<para>Dictionary to include in xml format in the first event of the first record when writing the file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="731" column="21" bodyfile="src/libsrc/EventWriter.h" bodystart="731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a9aa2670528a09c63faed68297be9fefd" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; evio::EventWriter::dictionaryByteArray</definition>
        <argsstring></argsstring>
        <name>dictionaryByteArray</name>
        <briefdescription>
<para>Byte array containing dictionary in evio format but <bold>without</bold> record header. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="734" column="21" bodyfile="src/libsrc/EventWriter.h" bodystart="734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a8ae1e5a1991db811b34f725b8eb0f55e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; evio::EventWriter::firstEventByteArray</definition>
        <argsstring></argsstring>
        <name>firstEventByteArray</name>
        <briefdescription>
<para>Byte array containing firstEvent in evio format but <bold>without</bold> record header. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="737" column="21" bodyfile="src/libsrc/EventWriter.h" bodystart="737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a9efa7634d5e625f24be7e58473fe1431" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::EventWriter::haveFirstEvent</definition>
        <argsstring></argsstring>
        <name>haveFirstEvent</name>
        <initializer>= false</initializer>
        <briefdescription>
<para><computeroutput>True</computeroutput> if we have a &quot;first event&quot; to be written, else <computeroutput>false</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="740" column="14" bodyfile="src/libsrc/EventWriter.h" bodystart="740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a08ce71261ddd752cc89abffed65bfd23" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::EventWriter::closed</definition>
        <argsstring></argsstring>
        <name>closed</name>
        <initializer>= false</initializer>
        <briefdescription>
<para><computeroutput>True</computeroutput> if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> was called, else <computeroutput>false</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="743" column="14" bodyfile="src/libsrc/EventWriter.h" bodystart="743" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1aa5562af12cbb499334655c396324f705" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::EventWriter::toFile</definition>
        <argsstring></argsstring>
        <name>toFile</name>
        <initializer>= false</initializer>
        <briefdescription>
<para><computeroutput>True</computeroutput> if writing to file, else <computeroutput>false</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="746" column="14" bodyfile="src/libsrc/EventWriter.h" bodystart="746" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a7c4d2530d2cf3dd90682a468466b4493" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::EventWriter::append</definition>
        <argsstring></argsstring>
        <name>append</name>
        <initializer>= false</initializer>
        <briefdescription>
<para><computeroutput>True</computeroutput> if appending to file, <computeroutput>false</computeroutput> if (over)writing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="749" column="14" bodyfile="src/libsrc/EventWriter.h" bodystart="749" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a6c7f32f9c5be9b037642c733080c8b53" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::EventWriter::hasAppendDictionary</definition>
        <argsstring></argsstring>
        <name>hasAppendDictionary</name>
        <initializer>= false</initializer>
        <briefdescription>
<para><computeroutput>True</computeroutput> if appending to file/buffer with dictionary, <computeroutput>false</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="752" column="14" bodyfile="src/libsrc/EventWriter.h" bodystart="752" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a4da369173c249f0b4b1ab1d6d504d4d8" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::eventsWrittenTotal</definition>
        <argsstring></argsstring>
        <name>eventsWrittenTotal</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Total number of events written to buffer or file (although may not be flushed yet). </para>
        </briefdescription>
        <detaileddescription>
<para>Will be the same as eventsWrittenToBuffer (- dictionary) if writing to buffer. If the file being written to is split, this value refers to all split files taken together. Does NOT include dictionary(ies). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="760" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="760" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1aecb2df8127a40702522c80e68d63c9ad" prot="private" static="no" mutable="no">
        <type><ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref></type>
        <definition>ByteOrder evio::EventWriter::byteOrder</definition>
        <argsstring></argsstring>
        <name>byteOrder</name>
        <initializer>{<ref refid="da/d7d/classevio_1_1_byte_order_1ae4055f708921d4e6540ab4662d27147c" kindref="member">ByteOrder::ENDIAN_LOCAL</ref>}</initializer>
        <briefdescription>
<para>Byte order in which to write file or buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize to local endian. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="763" column="19" bodyfile="src/libsrc/EventWriter.h" bodystart="763" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1ae1623b2b4fec33c9cfe19796e57e283b" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::sourceId</definition>
        <argsstring></argsstring>
        <name>sourceId</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>CODA id of buffer sender. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="770" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="770" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a223b858a9d97b5f2cd4c39a3e643dfc6" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::bufferSize</definition>
        <argsstring></argsstring>
        <name>bufferSize</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Total size of the buffer in bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="773" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="773" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a4f68eb182a80b5e8d1bc26330c1964d5" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ByteBuffer&gt; evio::EventWriter::buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <briefdescription>
<para>The output buffer when writing to a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The buffer internal to the currentRecord when writing to a file and which is a reference to one of the internalBuffers. When dealing with files, this buffer does double duty and is initially used to read in record headers before appending data to an existing file and such. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="783" column="25" bodyfile="src/libsrc/EventWriter.h" bodystart="783" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1aec62b034c68b4d6a40f707483f881d8b" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ByteBuffer&gt; evio::EventWriter::usedBuffer</definition>
        <argsstring></argsstring>
        <name>usedBuffer</name>
        <briefdescription>
<para>Two internal buffers, first element last used in the future1 write, the second last used in future2 write. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="787" column="25" bodyfile="src/libsrc/EventWriter.h" bodystart="787" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a7e5b1cbb84b37beb49ef65ce099331d9" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;ByteBuffer&gt; &gt; evio::EventWriter::internalBuffers</definition>
        <argsstring></argsstring>
        <name>internalBuffers</name>
        <briefdescription>
<para>Three internal buffers used for writing to a file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="790" column="21" bodyfile="src/libsrc/EventWriter.h" bodystart="790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a4f71cf85d5a20a0b05b81962b1c9224f" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::commonRecordBytesToBuffer</definition>
        <argsstring></argsstring>
        <name>commonRecordBytesToBuffer</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of bytes written to the current buffer for the common record. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="793" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="793" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a72e747c35624c889714b8757ae22a9ac" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::eventsWrittenToBuffer</definition>
        <argsstring></argsstring>
        <name>eventsWrittenToBuffer</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of events written to final destination buffer or file&apos;s current record NOT including dictionary (&amp; first event?). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="797" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a6c919b33a5a0236812c3c2f1da38f25d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::EventWriter::diskIsFull</definition>
        <argsstring></argsstring>
        <name>diskIsFull</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Variable used to stop accepting events to be included in the inner buffer holding the current block. </para>
        </briefdescription>
        <detaileddescription>
<para>Used when disk space is inadequate. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="805" column="14" bodyfile="src/libsrc/EventWriter.h" bodystart="805" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a7fbcb1401658b879435e4b71c98236c8" prot="private" static="no" mutable="no">
        <type>std::atomic_bool</type>
        <definition>std::atomic_bool evio::EventWriter::diskIsFullVolatile</definition>
        <argsstring></argsstring>
        <name>diskIsFullVolatile</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Variable used to stop accepting events to be included in the inner buffer holding the current block. </para>
        </briefdescription>
        <detaileddescription>
<para>Used when disk space is inadequate. This is atomic and therefore works between threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="810" column="26" bodyfile="src/libsrc/EventWriter.h" bodystart="810" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a83e6201ce8d1fd43dbcee4f8023ab26b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::EventWriter::fileOpen</definition>
        <argsstring></argsstring>
        <name>fileOpen</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="812" column="14" bodyfile="src/libsrc/EventWriter.h" bodystart="812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1ab41aee93324a85c24f644573fcc3591f" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t evio::EventWriter::idCounter</definition>
        <argsstring></argsstring>
        <name>idCounter</name>
        <initializer>= 0ULL</initializer>
        <briefdescription>
<para>When forcing events to disk, this identifies which events for the writing thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="815" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="815" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a7e7a14a899c7c389eb997357193a4bb3" prot="private" static="no" mutable="no">
        <type><ref refid="d1/da6/classevio_1_1_file_header" kindref="compound">FileHeader</ref></type>
        <definition>FileHeader evio::EventWriter::fileHeader</definition>
        <argsstring></argsstring>
        <name>fileHeader</name>
        <briefdescription>
<para>Header for file only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="818" column="20" bodyfile="src/libsrc/EventWriter.h" bodystart="818" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1ac8aacbbbc184d4aa7217035b4e78d1b5" prot="private" static="no" mutable="no">
        <type><ref refid="d1/da6/classevio_1_1_file_header" kindref="compound">FileHeader</ref></type>
        <definition>FileHeader evio::EventWriter::appendFileHeader</definition>
        <argsstring></argsstring>
        <name>appendFileHeader</name>
        <briefdescription>
<para>Header of file being appended to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="821" column="20" bodyfile="src/libsrc/EventWriter.h" bodystart="821" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1af15e645a9be9eb1b3d2920846053ecb8" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string evio::EventWriter::currentFileName</definition>
        <argsstring></argsstring>
        <name>currentFileName</name>
        <initializer>{&quot;&quot;}</initializer>
        <briefdescription>
<para>File currently being written to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="824" column="21" bodyfile="src/libsrc/EventWriter.h" bodystart="824" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a1dd5873091ee51c5bd08ac646b7f4527" prot="private" static="no" mutable="no">
        <type>fs::path</type>
        <definition>fs::path evio::EventWriter::currentFilePath</definition>
        <argsstring></argsstring>
        <name>currentFilePath</name>
        <briefdescription>
<para>Path object corresponding to file currently being written. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="828" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="828" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a239dee5153aa9223c238386935d764e8" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::future&lt; void &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::future&lt;void&gt; &gt; evio::EventWriter::future1</definition>
        <argsstring></argsstring>
        <name>future1</name>
        <briefdescription>
<para>Objects to allow efficient, asynchronous file writing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="832" column="25" bodyfile="src/libsrc/EventWriter.h" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a8a2b84be16c955c5971072b8b6ed2bc5" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="db/dc8/classevio_1_1_record_ring_item" kindref="compound">RecordRingItem</ref> &gt;</type>
        <definition>std::shared_ptr&lt;RecordRingItem&gt; evio::EventWriter::ringItem1</definition>
        <argsstring></argsstring>
        <name>ringItem1</name>
        <briefdescription>
<para>RingItem1 is associated with future1, etc. </para>
        </briefdescription>
        <detaileddescription>
<para>When a write is finished, the associated ring item need to be released - but not before! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="836" column="25" bodyfile="src/libsrc/EventWriter.h" bodystart="836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1ab0f9389e21192b92cffdd2721dfbbbfc" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::futureIndex</definition>
        <argsstring></argsstring>
        <name>futureIndex</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Index for selecting which future (1 or 2) to use for next file write. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="839" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="839" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1aa342f4aaa9f776a8afe623d5cdb5e076" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::fstream &gt;</type>
        <definition>std::shared_ptr&lt;std::fstream&gt; evio::EventWriter::asyncFileChannel</definition>
        <argsstring></argsstring>
        <name>asyncFileChannel</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>The asynchronous file channel, used for writing a file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="842" column="25" bodyfile="src/libsrc/EventWriter.h" bodystart="842" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a7ac0f14d0ddbcaa248f32c3ad89333bc" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t evio::EventWriter::fileWritingPosition</definition>
        <argsstring></argsstring>
        <name>fileWritingPosition</name>
        <initializer>= 0ULL</initializer>
        <briefdescription>
<para>The location of the next write in the file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="845" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="845" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1af2abbdf7c1776acea3c87a7fcf17ce81" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::splitNumber</definition>
        <argsstring></argsstring>
        <name>splitNumber</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Split number associated with output file to be written next. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="848" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a8afecdacc67e92e631482b4b87cdcd9f" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::splitCount</definition>
        <argsstring></argsstring>
        <name>splitCount</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of split files produced by this writer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="851" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a8789d1f1c31deb3220d1ff4a0f877935" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string evio::EventWriter::baseFileName</definition>
        <argsstring></argsstring>
        <name>baseFileName</name>
        <briefdescription>
<para>Part of filename without run or split numbers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="854" column="21" bodyfile="src/libsrc/EventWriter.h" bodystart="854" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a0aa86dd9cfd3e00917c0df9b4af6f4e4" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::specifierCount</definition>
        <argsstring></argsstring>
        <name>specifierCount</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of C-style int format specifiers contained in baseFileName. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="857" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a2543142555e6f1cc3e4ebd47bdd534e3" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::runNumber</definition>
        <argsstring></argsstring>
        <name>runNumber</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Run number possibly used in naming split files. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="860" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="860" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1adde021198404b68ef3821c5e6b9c0481" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t evio::EventWriter::split</definition>
        <argsstring></argsstring>
        <name>split</name>
        <initializer>= 0ULL</initializer>
        <briefdescription>
<para>Do we split the file into several smaller ones (val &gt; 0)? If so, this gives the maximum number of bytes to make each file in size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="866" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="866" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a05bf1410e5f591320c0790ae799b28de" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::splitIncrement</definition>
        <argsstring></argsstring>
        <name>splitIncrement</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>If splitting file, the amount to increment the split number each time another file is written. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="872" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="872" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a228550082956bad0735c16ad8cffc31c" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t evio::EventWriter::splitEventBytes</definition>
        <argsstring></argsstring>
        <name>splitEventBytes</name>
        <initializer>= 0ULL</initializer>
        <briefdescription>
<para>Track bytes written to help split a file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="875" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="875" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a3cd3fec7986e2d7bed2a8894e20b261d" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::splitEventCount</definition>
        <argsstring></argsstring>
        <name>splitEventCount</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Track events written to help split a file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="878" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="878" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a352f053c8e828dfa0f549b9e1b314871" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::streamId</definition>
        <argsstring></argsstring>
        <name>streamId</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Id of this specific data stream. </para>
        </briefdescription>
        <detaileddescription>
<para>In CODA, a data stream is a chain of ROCS and EBs ending in a single specific ER. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="884" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="884" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a01a010b792b0bafc0c06a35ca2ff5977" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::streamCount</definition>
        <argsstring></argsstring>
        <name>streamCount</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>The total number of data streams in DAQ. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="887" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="887" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a85f8d0a2d335ffd45d1a80b1d16d9b95" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::EventWriter::singleThreadedCompression</definition>
        <argsstring></argsstring>
        <name>singleThreadedCompression</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Writing to file with single thread? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="890" column="14" bodyfile="src/libsrc/EventWriter.h" bodystart="890" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a4e2a2896ca757309ab5ca7a373b05aea" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::EventWriter::overWriteOK</definition>
        <argsstring></argsstring>
        <name>overWriteOK</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Is it OK to overwrite a previously existing file? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="893" column="14" bodyfile="src/libsrc/EventWriter.h" bodystart="893" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1af79430c8eb29d627661addab609de757" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::eventsWrittenToFile</definition>
        <argsstring></argsstring>
        <name>eventsWrittenToFile</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of events actually written to the current file - not the total in all split files - including dictionary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="897" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="897" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a38541d671beaf20a413db39450d56420" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::EventWriter::hasTrailerWithIndex</definition>
        <argsstring></argsstring>
        <name>hasTrailerWithIndex</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Does file have a trailer with record indexes? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="900" column="14" bodyfile="src/libsrc/EventWriter.h" bodystart="900" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a08b8231f976cfbe8b5b2d69fe9fa8c92" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::userHeaderLength</definition>
        <argsstring></argsstring>
        <name>userHeaderLength</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>File header&apos;s user header length in bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="903" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="903" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a49c9582ffe5b7400fd3f821e1374b763" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::userHeaderPadding</definition>
        <argsstring></argsstring>
        <name>userHeaderPadding</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>File header&apos;s user header&apos;s padding in bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="906" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="906" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a1189be84aa327ed6dd7975200cbe91f3" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::EventWriter::indexLength</definition>
        <argsstring></argsstring>
        <name>indexLength</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>File header&apos;s index array length in bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="909" column="18" bodyfile="src/libsrc/EventWriter.h" bodystart="909" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1af4b7f01ddf5b56c31a0983fc2f3e0d46" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; FileCloser &gt;</type>
        <definition>std::shared_ptr&lt;FileCloser&gt; evio::EventWriter::fileCloser</definition>
        <argsstring></argsstring>
        <name>fileCloser</name>
        <briefdescription>
<para>Object used to close files in a separate thread when splitting so as to allow writing speed not to dip so low. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="913" column="25" bodyfile="src/libsrc/EventWriter.h" bodystart="913" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcd/classevio_1_1_event_writer_1a9e2e3c69bba9a7531c2aab673672fe1d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::EventWriter::noFileWriting</definition>
        <argsstring></argsstring>
        <name>noFileWriting</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Flag to do everything except the actual writing of data to file. </para>
        </briefdescription>
        <detaileddescription>
<para>Set true for testing purposes ONLY. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="920" column="14" bodyfile="src/libsrc/EventWriter.h" bodystart="920" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a17225fd6d6a7fdfa9d20a75966f5c11a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::EventWriter::EventWriter</definition>
        <argsstring>(std::string &amp;filename, const ByteOrder &amp;byteOrder=ByteOrder::nativeOrder(), bool append=false)</argsstring>
        <name>EventWriter</name>
        <param>
          <type>std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
          <declname>byteOrder</declname>
          <defval><ref refid="da/d7d/classevio_1_1_byte_order_1aa96046df3a55b85a31f2c33e4d903cf1" kindref="member">ByteOrder::nativeOrder</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>append</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates an <computeroutput><ref refid="d9/dcd/classevio_1_1_event_writer" kindref="compound">EventWriter</ref></computeroutput> for writing to a file in the specified byte order. </para>
        </briefdescription>
        <detaileddescription>
<para>If the file already exists, its contents will be overwritten unless it is being appended to. If it doesn&apos;t exist, it will be created.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the file to write to.<linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byteOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte order in which to write the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>append</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>true</computeroutput> and the file already exists, all events to be written will be appended to the end of the file.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>file cannot be created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="927" column="18" bodyfile="src/libsrc/EventWriter.cpp" bodystart="35" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a92be16234de2fd45d4c19a710fdac9be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::EventWriter::EventWriter</definition>
        <argsstring>(std::string &amp;filename, std::string &amp;dictionary, const ByteOrder &amp;byteOrder=ByteOrder::nativeOrder(), bool append=false)</argsstring>
        <name>EventWriter</name>
        <param>
          <type>std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const <ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
          <declname>byteOrder</declname>
          <defval><ref refid="da/d7d/classevio_1_1_byte_order_1aa96046df3a55b85a31f2c33e4d903cf1" kindref="member">ByteOrder::nativeOrder</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>append</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates an <computeroutput><ref refid="d9/dcd/classevio_1_1_event_writer" kindref="compound">EventWriter</ref></computeroutput> for writing to a file in NATIVE byte order. </para>
        </briefdescription>
        <detaileddescription>
<para>If the file already exists, its contents will be overwritten unless it is being appended to. If it doesn&apos;t exist, it will be created.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the file object to write to.<linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>dictionary in xml format or null if none. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byteOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte order in which to write the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>append</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>true</computeroutput> and the file already exists, all events to be written will be appended to the end of the file.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>file cannot be created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="931" column="9" bodyfile="src/libsrc/EventWriter.cpp" bodystart="60" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a5271d9b38e1e974be98f3ff98d5ed602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::EventWriter::EventWriter</definition>
        <argsstring>(std::string baseName, const std::string &amp;directory, const std::string &amp;runType, uint32_t runNumber, uint64_t split, uint32_t maxRecordSize, uint32_t maxEventCount, const ByteOrder &amp;byteOrder, const std::string &amp;xmlDictionary, bool overWriteOK, bool append, std::shared_ptr&lt; EvioBank &gt; firstEvent, uint32_t streamId, uint32_t splitNumber, uint32_t splitIncrement, uint32_t streamCount, Compressor::CompressionType compressionType, uint32_t compressionThreads, uint32_t ringSize, uint32_t bufferSize)</argsstring>
        <name>EventWriter</name>
        <param>
          <type>std::string</type>
          <declname>baseName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>directory</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>runType</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>runNumber</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>split</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxRecordSize</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxEventCount</declname>
        </param>
        <param>
          <type>const <ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
          <declname>byteOrder</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>xmlDictionary</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>overWriteOK</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>append</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> &gt;</type>
          <declname>firstEvent</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>streamId</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>splitNumber</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>splitIncrement</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>streamCount</declname>
        </param>
        <param>
          <type><ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747" kindref="member">Compressor::CompressionType</ref></type>
          <declname>compressionType</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>compressionThreads</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ringSize</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bufferSize</declname>
        </param>
        <briefdescription>
<para>Create an <computeroutput><ref refid="d9/dcd/classevio_1_1_event_writer" kindref="compound">EventWriter</ref></computeroutput> for writing events to a file. </para>
        </briefdescription>
        <detaileddescription>
<para>If the file already exists, its contents will be overwritten unless the &quot;overWriteOK&quot; argument is <computeroutput>false</computeroutput> in which case an exception will be thrown. Unless ..., the option to append these events to an existing file is <computeroutput>true</computeroutput>, in which case everything is fine. If the file doesn&apos;t exist, it will be created. Byte order defaults to big endian if arg is null. File can be split while writing.</para>
<para>The base file name may contain up to 2, C-style integer format specifiers using &quot;d&quot; and &quot;x&quot; (such as <bold>%03d</bold>, or <bold>x</bold>). If more than 2 are found, an exception will be thrown. If no &quot;0&quot; precedes any integer between the &quot;%&quot; and the &quot;d&quot; or &quot;x&quot; of the format specifier, it will be added automatically in order to avoid spaces in the file name. The first specifier will be substituted with the given runNumber value. If the file is being split, the second will be substituted with the split number which starts at 0. If 2 specifiers exist and the file is not being split, no substitutions are made. If no specifier for the splitNumber exists, it is tacked onto the end of the file name after a dot (.). If streamCount &gt; 1, the split number is calculated starting with streamId and incremented by streamCount each time. In this manner, all split files will have unique, sequential names even though there are multiple parallel ERs. </para>
<para>The base file name may contain characters of the form <bold></bold> which will be substituted with the value of the associated environmental variable or a blank string if none is found.</para>
<para>The base file name may also contain occurrences of the string &quot;%s&quot; which will be substituted with the value of the runType arg or nothing if the runType is null.</para>
<para>If multiple streams of data, each writing a file, end up with the same file name, they can be difcompressionferentiated by a stream id, starting split # and split increment.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseName</parametername>
</parameternamelist>
<parameterdescription>
<para>base file name used to generate complete file name (may not be null) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>directory</parametername>
</parameternamelist>
<parameterdescription>
<para>directory in which file is to be placed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>runType</parametername>
</parameternamelist>
<parameterdescription>
<para>name of run type configuration to be used in naming files </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>runNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>number of the CODA run, used in naming files </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>split</parametername>
</parameternamelist>
<parameterdescription>
<para>if &lt; 1, do not split file, write to only one file of unlimited size. Else this is max size in bytes to make a file before closing it and starting writing another. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxRecordSize</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of uncompressed data bytes each record can hold. Value of &lt; 8MB results in default of 8MB. The size of the record will not be larger than this size unless a single event itself is larger. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxEventCount</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of events each record can hold. Value &lt;= O means use default (1M). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byteOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte order in which to write the file. This is ignored if appending to existing file. Defaults to Big Endian if null. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xmlDictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>dictionary in xml format or null if none. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overWriteOK</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>false</computeroutput> and the file already exists, an exception is thrown rather than overwriting it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>append</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>true</computeroutput> append written data to given file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>the first event written into each file (after any dictionary) including all split files; may be null. Useful for adding common, static info into each split file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>streamId</parametername>
</parameternamelist>
<parameterdescription>
<para>streamId number (100 &gt; id &gt; -1) for file name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>splitNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>number at which to start the split numbers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>splitIncrement</parametername>
</parameternamelist>
<parameterdescription>
<para>amount to increment split number each time another file is created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>streamCount</parametername>
</parameternamelist>
<parameterdescription>
<para>total number of streams in DAQ. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compressionType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of data compression to do (0=none, 1=lz4 fast, 2=lz4 best, 3=gzip). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compressionThreads</parametername>
</parameternamelist>
<parameterdescription>
<para>number of threads doing compression simultaneously. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ringSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of records in supply ring. If set to &lt; compressionThreads, it is forced to equal that value and is also forced to be a multiple of 2, rounded up. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to make each internal buffer which will be storing events before writing them to a file. 9MB = default if bufferSize = 0.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if maxRecordSize or maxEventCount exceed limits; if streamCount &gt; 1 and streamId &lt; 0; if defined dictionary or first event while appending; if splitting file while appending; if file name arg is null; if file could not be opened, positioned, or written to; if file exists but user requested no over-writing or appending; if streamId &lt; 0, splitNumber &lt; 0, or splitIncrement &lt; 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="936" column="9" bodyfile="src/libsrc/EventWriter.cpp" bodystart="155" bodyend="417"/>
        <references refid="df/dd8/classevio_1_1_header_type_1a2b01085c1ea7b23010e4cb4447f2d04a" compoundref="d5/d98/_header_type_8h" startline="36">evio::HeaderType::EVIO_RECORD</references>
        <references refid="d9/dcd/classevio_1_1_event_writer_1ae7a045426957215f5336f040a9d77f01" compoundref="db/dc8/_event_writer_8cpp" startline="1332" endline="1383">examineFileHeader</references>
        <references refid="d3/d87/classevio_1_1_util_1a542fb63b5849885087ac24795604b4b6" compoundref="dd/d90/_util_8h" startline="1118" endline="1152">evio::Util::generateBaseFileName</references>
        <references refid="d3/d87/classevio_1_1_util_1a76482198f230e3afadbb65d1e6feedd9" compoundref="dd/d90/_util_8h" startline="1191" endline="1338">evio::Util::generateFileName</references>
        <references refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747a4fd632e8126f17acee8a305f25885bb1" compoundref="dc/d17/_compressor_8h" startline="69">evio::Compressor::GZIP</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a0e09d731589bcfe2705d0c606192f6eb" compoundref="d6/dea/_record_header_8h" startline="127">evio::RecordHeader::HEADER_SIZE_BYTES</references>
        <references refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747ae7be56dd20228ef22b2c4f79d0a491ae" compoundref="dc/d17/_compressor_8h" startline="67">evio::Compressor::LZ4</references>
        <references refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747a4e6c89e2c89beb57840a5b0bdb2c539d" compoundref="dc/d17/_compressor_8h" startline="68">evio::Compressor::LZ4_BEST</references>
        <references refid="d3/d87/classevio_1_1_util_1aecf01b40cf83fcdd27115f66b67e848c" compoundref="dd/d90/_util_8h" startline="654" endline="676">evio::Util::powerOfTwo</references>
        <references refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747a056585718cbf5c7808c0e37b1f88dbb9" compoundref="dc/d17/_compressor_8h" startline="66">evio::Compressor::UNCOMPRESSED</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a93b4acef57cfd15dcc5844c385824c90" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::EventWriter::EventWriter</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buf)</argsstring>
        <name>EventWriter</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Create an <computeroutput><ref refid="d9/dcd/classevio_1_1_event_writer" kindref="compound">EventWriter</ref></computeroutput> for writing events to a <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses the default number and size of records in buffer. Will overwrite any existing data in buffer!</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to write to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if buf arg is null </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="947" column="18" bodyfile="src/libsrc/EventWriter.cpp" bodystart="433" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a66db745e2ef5e1fcca14eae4683dc160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::EventWriter::EventWriter</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buf, std::string &amp;xmlDictionary)</argsstring>
        <name>EventWriter</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>xmlDictionary</declname>
        </param>
        <briefdescription>
<para>Create an <computeroutput><ref refid="d9/dcd/classevio_1_1_event_writer" kindref="compound">EventWriter</ref></computeroutput> for writing events to a <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses the default number and size of records in buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xmlDictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>dictionary in xml format or null if none. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if buf arg is null </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="948" column="9" bodyfile="src/libsrc/EventWriter.cpp" bodystart="448" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a0a4c374c6cf244dfd6f777917b7c7ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::EventWriter::EventWriter</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buf, uint32_t maxRecordSize, uint32_t maxEventCount, const std::string &amp;xmlDictionary, uint32_t recordNumber, std::shared_ptr&lt; EvioBank &gt; const &amp;firstEvent, Compressor::CompressionType compressionType)</argsstring>
        <name>EventWriter</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxRecordSize</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxEventCount</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>xmlDictionary</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>recordNumber</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> &gt; const &amp;</type>
          <declname>firstEvent</declname>
        </param>
        <param>
          <type><ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747" kindref="member">Compressor::CompressionType</ref></type>
          <declname>compressionType</declname>
        </param>
        <briefdescription>
<para>Create an <computeroutput><ref refid="d9/dcd/classevio_1_1_event_writer" kindref="compound">EventWriter</ref></computeroutput> for writing events to a <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The buffer&apos;s position is set to 0 before writing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to write to starting at position = 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxRecordSize</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of data bytes each record can hold. Value of &lt; 8MB results in default of 8MB. The size of the record will not be larger than this size unless a single event itself is larger. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxEventCount</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of events each record can hold. Value &lt;= O means use default (1M). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xmlDictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>dictionary in xml format or null if none. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recordNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>number at which to start record number counting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>the first event written into the buffer (after any dictionary). May be null. Not useful when writing to a buffer as this event may be written using normal means. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compressionType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of data compression to do (0=none, 1=lz4 fast, 2=lz4 best, 3=gzip)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if maxRecordSize or maxEventCount exceed limits; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="949" column="9" bodyfile="src/libsrc/EventWriter.cpp" bodystart="475" bodyend="527"/>
        <references refid="df/dd8/classevio_1_1_header_type_1a2b01085c1ea7b23010e4cb4447f2d04a" compoundref="d5/d98/_header_type_8h" startline="36">evio::HeaderType::EVIO_RECORD</references>
        <references refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747a4fd632e8126f17acee8a305f25885bb1" compoundref="dc/d17/_compressor_8h" startline="69">evio::Compressor::GZIP</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a0e09d731589bcfe2705d0c606192f6eb" compoundref="d6/dea/_record_header_8h" startline="127">evio::RecordHeader::HEADER_SIZE_BYTES</references>
        <references refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747ae7be56dd20228ef22b2c4f79d0a491ae" compoundref="dc/d17/_compressor_8h" startline="67">evio::Compressor::LZ4</references>
        <references refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747a4e6c89e2c89beb57840a5b0bdb2c539d" compoundref="dc/d17/_compressor_8h" startline="68">evio::Compressor::LZ4_BEST</references>
        <references refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747a056585718cbf5c7808c0e37b1f88dbb9" compoundref="dc/d17/_compressor_8h" startline="66">evio::Compressor::UNCOMPRESSED</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a74140e35e3c934cf63e095d4d2ac73f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::EventWriter::isDiskFull</definition>
        <argsstring>()</argsstring>
        <name>isDiskFull</name>
        <briefdescription>
<para>If writing file, is the partition it resides on full? Not full, in this context, means there&apos;s enough space to write a full split file + a full record + an extra 10MB as a safety factor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the partition the file resides on is full, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="963" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="607" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a8d3e5edb367a7ca355e0f0e936db44b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventWriter::setBuffer</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buf, std::bitset&lt; 24 &gt; *bitInfo, uint32_t recNumber)</argsstring>
        <name>setBuffer</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>std::bitset&lt; 24 &gt; *</type>
          <declname>bitInfo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>recNumber</declname>
        </param>
        <briefdescription>
<para>Set the buffer being written into (initially set in constructor). </para>
        </briefdescription>
        <detaileddescription>
<para>This method allows the user to avoid having to create a new <ref refid="d9/dcd/classevio_1_1_event_writer" kindref="compound">EventWriter</ref> each time a bank needs to be written to a different buffer. This does nothing if writing to a file.</para>
<para>Do <bold>not</bold> use this method unless you know what you are doing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>set of bits to include in first record header. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>number at which to start record number counting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object was not closed prior to resetting the buffer, buffer arg is null, or writing to file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="964" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="626" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a59c84d3cc0d530dcafeb325d3fd78a79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventWriter::setBuffer</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buf)</argsstring>
        <name>setBuffer</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Set the buffer being written into (initially set in constructor). </para>
        </briefdescription>
        <detaileddescription>
<para>This method allows the user to avoid having to create a new <ref refid="d9/dcd/classevio_1_1_event_writer" kindref="compound">EventWriter</ref> each time a bank needs to be written to a different buffer. This does nothing if writing to a file.</para>
<para>Do <bold>not</bold> use this method unless you know what you are doing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to write to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object was not closed prior to resetting the buffer, buffer arg is null, or writing to file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="965" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="651" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1ab9f560ab96c146e6a3c288d202cadb1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ByteBuffer &gt; evio::EventWriter::getByteBuffer</definition>
        <argsstring>()</argsstring>
        <name>getByteBuffer</name>
        <briefdescription>
<para>If writing to a file, return null. </para>
        </briefdescription>
        <detaileddescription>
<para>If writing to a buffer, get a duplicate of the user-given buffer being written into. The buffer&apos;s position will be 0 and its limit will be the size of the valid data. Basically, it&apos;s ready to be read from. The returned buffer shares data with the original buffer but has separate limit, position, and mark. Useful if trying to send buffer over the network. Do not call this while simultaneously calling close, flush, setFirstEvent, or writeEvent.</para>
<para><simplesect kind="return"><para>buffer being written into, made ready for reading; null if writing to file </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="974" column="25" bodyfile="src/libsrc/EventWriter.cpp" bodystart="695" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1aa4b8192088442c20102b758a10c7d45e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventWriter::setSourceId</definition>
        <argsstring>(int sId)</argsstring>
        <name>setSourceId</name>
        <param>
          <type>int</type>
          <declname>sId</declname>
        </param>
        <briefdescription>
<para>Set the value of the source Id in the first block header. </para>
        </briefdescription>
        <detaileddescription>
<para>Only necessary to do this when using <ref refid="d9/dcd/classevio_1_1_event_writer" kindref="compound">EventWriter</ref> in EMU&apos;s RocSimulation module. Only the ROC sends sourceId in header. In evio 6, the source id is stored in user register 1. In earlier versions it&apos;s stored in reserved1. This should only be used internally by CODA in emu software.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sId</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the source Id. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="975" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="722" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a5177b190e06a2b28fd62136f4b4eb0a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventWriter::setEventType</definition>
        <argsstring>(int type)</argsstring>
        <name>setEventType</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Set the bit info of a record header for a specified CODA event type. </para>
        </briefdescription>
        <detaileddescription>
<para>Must be called AFTER <ref refid="d8/d64/classevio_1_1_record_header_1a3f77e14621f9abcb226b48a1939cb8c5" kindref="member">RecordHeader#setBitInfo(bool, bool, bool)</ref> or <ref refid="d8/d64/classevio_1_1_record_header_1acbd14b3e5c1cd26c7b5d8a734aca59b5" kindref="member">RecordHeader#setBitInfoWord(uint32_t)</ref> in order to have change preserved. This should only be used internally by CODA in emu software.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>event type (0=ROC raw, 1=Physics, 2=Partial Physics, 3=Disentangled, 4=User, 5=Control, 15=Other, else = nothing set). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="976" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="739" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a9314950dbd90b4d776549376c56160ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::EventWriter::writingToFile</definition>
        <argsstring>() const</argsstring>
        <name>writingToFile</name>
        <briefdescription>
<para>Is this object writing to file? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><programlisting><codeline><highlight class="normal">true<sp/></highlight></codeline>
</programlisting> if writing to file, else<programlisting><codeline><highlight class="normal">false<sp/></highlight></codeline>
</programlisting> . </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="978" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="749" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1aa82458e15e94f88450f061de51d1d3e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::EventWriter::isClosed</definition>
        <argsstring>() const</argsstring>
        <name>isClosed</name>
        <briefdescription>
<para>Has <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> been called (without reopening by calling <ref refid="d9/dcd/classevio_1_1_event_writer_1a8d3e5edb367a7ca355e0f0e936db44b6" kindref="member">setBuffer()</ref>) ? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><programlisting><codeline><highlight class="normal">true<sp/></highlight></codeline>
</programlisting> if this object closed, else<programlisting><codeline><highlight class="normal">false<sp/></highlight></codeline>
</programlisting> . </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="979" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="758" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a869c87c1e922b6e7cf509e7bd4e92c68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string evio::EventWriter::getCurrentFilename</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentFilename</name>
        <briefdescription>
<para>Get the name of the current file being written to. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns empty string if no file. <simplesect kind="return"><para>the name of the current file being written to. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="981" column="21" bodyfile="src/libsrc/EventWriter.cpp" bodystart="766" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a2456f9ee73604178342bb55792df85c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t evio::EventWriter::getBytesWrittenToBuffer</definition>
        <argsstring>() const</argsstring>
        <name>getBytesWrittenToBuffer</name>
        <briefdescription>
<para>If writing to a buffer, get the number of bytes written to it including the trailer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of bytes written to buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="982" column="16" bodyfile="src/libsrc/EventWriter.cpp" bodystart="774" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1aea264cc1787db07728ed795858c04c7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string evio::EventWriter::getCurrentFilePath</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentFilePath</name>
        <briefdescription>
<para>Get the full name or path of the current file being written to. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns empty string if no file. <simplesect kind="return"><para>the full name or path of the current file being written to. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="983" column="21" bodyfile="src/libsrc/EventWriter.cpp" bodystart="782" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1ae21d6b4fa57b43b338dab195a6c2be1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t EventWriter::getSplitNumber</definition>
        <argsstring>() const</argsstring>
        <name>getSplitNumber</name>
        <briefdescription>
<para>Get the current split number which is the split number of file to be written next. </para>
        </briefdescription>
        <detaileddescription>
<para>Warning, this value may be changing. <simplesect kind="return"><para>the current split number which is the split number of file to be written next. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="984" column="18" bodyfile="src/libsrc/EventWriter.cpp" bodystart="796" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1afb4093dbd44f2773872fce88855c9357" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t EventWriter::getSplitCount</definition>
        <argsstring>() const</argsstring>
        <name>getSplitCount</name>
        <briefdescription>
<para>Get the number of split files produced by this writer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of split files produced by this writer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="985" column="18" bodyfile="src/libsrc/EventWriter.cpp" bodystart="803" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a498ee5a0039c4265741917390b0a380e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t EventWriter::getRecordNumber</definition>
        <argsstring>() const</argsstring>
        <name>getRecordNumber</name>
        <briefdescription>
<para>Get the current record number. </para>
        </briefdescription>
        <detaileddescription>
<para>Warning, this value may be changing. <simplesect kind="return"><para>the current record number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="986" column="18" bodyfile="src/libsrc/EventWriter.cpp" bodystart="811" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a318697a18126aaf937a97f9bae3939f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t EventWriter::getEventsWritten</definition>
        <argsstring>() const</argsstring>
        <name>getEventsWritten</name>
        <briefdescription>
<para>Get the number of events written to a file/buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Remember that a particular event may not yet be flushed to the file/buffer. If the file being written to is split, the returned value refers to all split files taken together.</para>
<para><simplesect kind="return"><para>number of events written to a file/buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="987" column="18" bodyfile="src/libsrc/EventWriter.cpp" bodystart="823" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1aa6fed50d9fd092e3ae3a9ad2c18b8180" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref></type>
        <definition>ByteOrder EventWriter::getByteOrder</definition>
        <argsstring>() const</argsstring>
        <name>getByteOrder</name>
        <briefdescription>
<para>Get the byte order of the buffer/file being written into. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>byte order of the buffer/file being written into. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="988" column="19" bodyfile="src/libsrc/EventWriter.cpp" bodystart="834" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1af0beda1c8332e1f2785303fd21b15918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::setStartingRecordNumber</definition>
        <argsstring>(uint32_t startingRecordNumber)</argsstring>
        <name>setStartingRecordNumber</name>
        <param>
          <type>uint32_t</type>
          <declname>startingRecordNumber</declname>
        </param>
        <briefdescription>
<para><zwj/>** </para>
        </briefdescription>
        <detaileddescription>
<para>Set the number with which to start record numbers. This method does nothing if events have already been written. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startingRecordNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>the number with which to start record numbers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="990" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="856" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a17a40dc76bca3e2eff745130bc27fea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::setFirstEvent</definition>
        <argsstring>(std::shared_ptr&lt; EvioNode &gt; &amp;node)</argsstring>
        <name>setFirstEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/dd0/classevio_1_1_evio_node" kindref="compound">EvioNode</ref> &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Set an event which will be written to the file as well as to all split files. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s called the &quot;first event&quot; as it will be the first event written to each split file if this method is called early enough or the first event was defined in the constructor. In evio version 6, any dictionary and the first event are written to a common record which is stored in the user-header part of the file header if writing to a file. When writing to a buffer it&apos;s stored in the first record&apos;s user-header. The common record data is never compressed.</para>
<para><bold>FILE:</bold> Since this method can only be called after the constructor, the common record may have already been written with its dictionary and possibly another firstEvent. If that is the case, the event given here will be written immediately somewhere in the body of the file. Any subsequent splits will have this event as the first event in the file header. On the other hand, if the common record has not yet been written to the file, this event becomes the first event in the file header.</para>
<para><bold>BUFFER:</bold> By its nature this method is not all that useful for writing to a buffer since the buffer is never split. Writing this event is done by storing the common record in the main record&apos;s user-header. When writing to a buffer, the common record is not written until main buffer is full and flushCurrentRecordToBuffer() is called. That is not done until <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> or <ref refid="d9/dcd/classevio_1_1_event_writer_1a38cb01e88b8e2f2e4346eb3b93b58071" kindref="member">flush()</ref> is called. In other words, there is still time to change the common record up until close is called.</para>
<para>Do not call this while simultaneously calling close, flush, writeEvent, or getByteBuffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>node representing event to be placed first in each file written including all splits.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if error writing to file if first event is opposite byte order of internal buffer; if bad data format; if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called; if file could not be opened for writing; if file exists but user requested no over-writing; if no room when writing to user-given buffer; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="992" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="904" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a820160c1cd81b96cb9ea01d1d9f0771d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::setFirstEvent</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buf)</argsstring>
        <name>setFirstEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Set an event which will be written to the file as well as to all split files. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s called the &quot;first event&quot; as it will be the first event written to each split file if this method is called early enough or the first event was defined in the constructor. In evio version 6, any dictionary and the first event are written to a common record which is stored in the user-header part of the file header if writing to a file. When writing to a buffer it&apos;s stored in the first record&apos;s user-header. The common record data is never compressed.</para>
<para><bold>FILE:</bold> Since this method can only be called after the constructor, the common record may have already been written with its dictionary and possibly another firstEvent. If that is the case, the event given here will be written immediately somewhere in the body of the file. Any subsequent splits will have this event as the first event in the file header. On the other hand, if the common record has not yet been written to the file, this event becomes the first event in the file header.</para>
<para><bold>BUFFER:</bold> By its nature this method is not all that useful for writing to a buffer since the buffer is never split. Writing this event is done by storing the common record in the main record&apos;s user-header. When writing to a buffer, the common record is not written until main buffer is full and flushCurrentRecordToBuffer() is called. That is not done until <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> or <ref refid="d9/dcd/classevio_1_1_event_writer_1a38cb01e88b8e2f2e4346eb3b93b58071" kindref="member">flush()</ref> is called. In other words, there is still time to change the common record up until close is called.</para>
<para>Do not call this while simultaneously calling close, flush, writeEvent, or getByteBuffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer containing event to be placed first in each file written including all splits.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if error writing to file if first event is opposite byte order of internal buffer; if bad data format; if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called; if file could not be opened for writing; if file exists but user requested no over-writing; if no room when writing to user-given buffer; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="993" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="966" bodyend="980"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a6e10cb04c9523dba4030e1e9be6f22ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::setFirstEvent</definition>
        <argsstring>(std::shared_ptr&lt; EvioBank &gt; bank)</argsstring>
        <name>setFirstEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> &gt;</type>
          <declname>bank</declname>
        </param>
        <briefdescription>
<para>Set an event which will be written to the file as well as to all split files. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s called the &quot;first event&quot; as it will be the first event written to each split file if this method is called early enough or the first event was defined in the constructor. In evio version 6, any dictionary and the first event are written to a common record which is stored in the user-header part of the file header if writing to a file. When writing to a buffer it&apos;s stored in the first record&apos;s user-header. The common record data is never compressed.</para>
<para><bold>FILE:</bold> Since this method can only be called after the constructor, the common record may have already been written with its dictionary and possibly another firstEvent. If that is the case, the event given here will be written immediately somewhere in the body of the file. Any subsequent splits will have this event as the first event in the file header. On the other hand, if the common record has not yet been written to the file, this event becomes the first event in the file header.</para>
<para><bold>BUFFER:</bold> By its nature this method is not all that useful for writing to a buffer since the buffer is never split. Writing this event is done by storing the common record in the main record&apos;s user-header. When writing to a buffer, the common record is not written until main buffer is full and flushCurrentRecordToBuffer() is called. That is not done until <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> or <ref refid="d9/dcd/classevio_1_1_event_writer_1a38cb01e88b8e2f2e4346eb3b93b58071" kindref="member">flush()</ref> is called. In other words, there is still time to change the common record up until close is called.</para>
<para>Do not call this while simultaneously calling close, flush, writeEvent, or getByteBuffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bank</parametername>
</parameternamelist>
<parameterdescription>
<para>event to be placed first in each file written including all splits.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if error writing to file if first event is opposite byte order of internal buffer; if bad data format; if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called; if file could not be opened for writing; if file exists but user requested no over-writing; if no room when writing to user-given buffer; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="994" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1022" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a38cb01e88b8e2f2e4346eb3b93b58071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::flush</definition>
        <argsstring>()</argsstring>
        <name>flush</name>
        <briefdescription>
<para>This method flushes any remaining internally buffered data to file. </para>
        </briefdescription>
        <detaileddescription>
<para>Calling <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> automatically does this so it isn&apos;t necessary to call before closing. This method should only be used when writing events at such a low rate that it takes an inordinate amount of time for internally buffered data to be written to the file.</para>
<para>Calling this may easily kill performance. May not call this when simultaneously calling writeEvent, close, setFirstEvent, or getByteBuffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1008" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1184" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
<para>This method flushes any remaining data to file and disables this object. </para>
        </briefdescription>
        <detaileddescription>
<para>May not call this when simultaneously calling writeEvent, flush, setFirstEvent, or getByteBuffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1009" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1224" bodyend="1321"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1aa0e335238a57eaa0bffee8f968e5995f" compoundref="d4/d6c/_byte_buffer_8cpp" startline="475" endline="475">evio::ByteBuffer::array</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a3d5f0120189717ffc8d2d480d89cb91a" compoundref="d4/d6c/_byte_buffer_8cpp" startline="466" endline="466">evio::ByteBuffer::order</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a8bc5745c6525ec0e5bfaee09db9b5c60" compoundref="d4/d6c/_byte_buffer_8cpp" startline="1570" endline="1579">evio::ByteBuffer::putInt</references>
        <referencedby refid="db/d06/classevio_1_1_event_builder_1ad11bd244d4bc1fef7cc84e0de74af323" compoundref="d4/dfa/_event_builder_8cpp" startline="792" endline="896">evio::EventBuilder::main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a91a3edcbf2d5e3005ecb0cec061dfbaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EventWriter::hasRoom</definition>
        <argsstring>(uint32_t bytes)</argsstring>
        <name>hasRoom</name>
        <param>
          <type>uint32_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Is there room to write this many bytes to an output buffer as a single event? Will always return true when writing to a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><programlisting><codeline><highlight class="normal">true<sp/></highlight></codeline>
</programlisting> if there still room in the output buffer, else<programlisting><codeline><highlight class="normal">false<sp/></highlight></codeline>
</programlisting> . </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1021" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1625" bodyend="1632"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a34bf54cb6551a7e6d151741bcc798d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EventWriter::writeEvent</definition>
        <argsstring>(std::shared_ptr&lt; EvioNode &gt; &amp;node, bool force)</argsstring>
        <name>writeEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/dd0/classevio_1_1_evio_node" kindref="compound">EvioNode</ref> &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Write an event (bank) into a record in evio/hipo version 6 format. </para>
        </briefdescription>
        <detaileddescription>
<para>Once the record is full and if writing to a file (for multiple compression threads), the record will be sent to a thread which may compress the data, then it will be sent to a thread to write the record to file. If there is only 1 compression thread, it&apos;s all done in the thread which call this method.</para>
<para>If writing to a buffer, once the record is full this method returns false - indicating that the last event was NOT written to the record. To finish the writing process, call <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref>. This will compress the data if desired and then write it to the buffer.</para>
<para>The buffer must contain only the event&apos;s data (event header and event data) and must <bold>not</bold> be in complete evio file format. Do not call this while simultaneously calling close, flush, setFirstEvent, or getByteBuffer.</para>
<para>Be warned that injudicious use of a true 2nd arg, the force flag, will <bold>kill</bold> performance when writing to a file.</para>
<para>This method is not used to write the dictionary or the first event which are both placed in the common record which, in turn, is the user header part of the file header.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>object representing the event to write in buffer form </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>if writing to disk, force it to write event to the disk. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if writing to buffer: true if event was added to record, false if buffer full, or record event count limit exceeded.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if error writing file if event is opposite byte order of internal buffer; if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called; if bad eventBuffer format; if file could not be opened for writing; if file exists but user requested no over-writing; if null node arg; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1023" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1671" bodyend="1674"/>
        <referencedby refid="db/d06/classevio_1_1_event_builder_1ad11bd244d4bc1fef7cc84e0de74af323" compoundref="d4/dfa/_event_builder_8cpp" startline="792" endline="896">evio::EventBuilder::main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a945805c4c7a8697b5f98089a2c6a4f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EventWriter::writeEvent</definition>
        <argsstring>(std::shared_ptr&lt; EvioNode &gt; &amp;node, bool force, bool duplicate)</argsstring>
        <name>writeEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/dd0/classevio_1_1_evio_node" kindref="compound">EvioNode</ref> &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>duplicate</declname>
        </param>
        <briefdescription>
<para>Write an event (bank) into a record in evio/hipo version 6 format. </para>
        </briefdescription>
        <detaileddescription>
<para>Once the record is full and if writing to a file (for multiple compression threads), the record will be sent to a thread which may compress the data, then it will be sent to a thread to write the record to file. If there is only 1 compression thread, it&apos;s all done in the thread which call this method.</para>
<para>If writing to a buffer, once the record is full this method returns false - indicating that the last event was NOT written to the record. To finish the writing process, call <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref>. This will compress the data if desired and then write it to the buffer.</para>
<para>The buffer must contain only the event&apos;s data (event header and event data) and must <bold>not</bold> be in complete evio file format. Do not call this while simultaneously calling close, flush, setFirstEvent, or getByteBuffer.</para>
<para>Be warned that injudicious use of a true 2nd arg, the force flag, will <bold>kill</bold> performance when writing to a file. A true 3rd arg can be used when the backing buffer of the node is accessed by multiple threads simultaneously. This allows that buffer&apos;s limit and position to be changed without interfering with the other threads.</para>
<para>This method is not used to write the dictionary or the first event which are both placed in the common record which, in turn, is the user header part of the file header.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>object representing the event to write in buffer form </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>if writing to disk, force it to write event to the disk. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duplicate</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, duplicate node&apos;s buffer so its position and limit can be changed without issue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if writing to buffer: true if event was added to record, false if buffer full, or record event count limit exceeded.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if error writing file if event is opposite byte order of internal buffer; if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called; if bad eventBuffer format; if file could not be opened for writing; if file exists but user requested no over-writing; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1024" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1718" bodyend="1735"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a6c347265d6480cd5e6c85d873d6399f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EventWriter::writeEventToFile</definition>
        <argsstring>(std::shared_ptr&lt; EvioNode &gt; &amp;node, bool force, bool duplicate)</argsstring>
        <name>writeEventToFile</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/dd0/classevio_1_1_evio_node" kindref="compound">EvioNode</ref> &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>duplicate</declname>
        </param>
        <briefdescription>
<para>Write an event (bank) into a record and eventually to a file in evio/hipo version 6 format. </para>
        </briefdescription>
        <detaileddescription>
<para>Once the record is full and if writing with multiple compression threads, the record will be sent to a thread which may compress the data, then it will be sent to a thread to write the record to file. If there is only 1 compression thread, it&apos;s all done in the thread which call this method.</para>
<para><bold> If splitting files, this method returns false if disk partition is too full to write the complete, next split file. If force arg is true, write anyway. DO NOT mix calling this method with calling <ref refid="d9/dcd/classevio_1_1_event_writer_1a34bf54cb6551a7e6d151741bcc798d3a" kindref="member">writeEvent()</ref> (all variants). Results are unpredictable as it messes up the logic used to quit writing to full disk. </bold></para>
<para>The buffer must contain only the event&apos;s data (event header and event data) and must <bold>not</bold> be in complete evio file format. Do not call this while simultaneously calling close, flush, setFirstEvent, or getByteBuffer.</para>
<para>Be warned that injudicious use of a true 2nd arg, the force flag, will <bold>kill</bold> performance when writing to a file. A true 3rd arg can be used when the backing buffer of the node is accessed by multiple threads simultaneously. This allows that buffer&apos;s limit and position to be changed without interfering with the other threads.</para>
<para>This method is not used to write the dictionary or the first event which are both placed in the common record which, in turn, is the user header part of the file header.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>object representing the event to write in buffer form </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>if writing to disk, force it to write event to the disk. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duplicate</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, duplicate node&apos;s buffer so its position and limit can be changed without issue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if event was added to record. If splitting files, false if disk partition too full to write the complete, next split file. False if interrupted. If force arg is true, write anyway.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if error writing file if event is opposite byte order of internal buffer; if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called; if bad eventBuffer format; if file could not be opened for writing; if file exists but user requested no over-writing; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1025" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1786" bodyend="1803"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a7e2483d8fe62cca4b1684b624ed85cc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EventWriter::writeEvent</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;bankBuffer)</argsstring>
        <name>writeEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>bankBuffer</declname>
        </param>
        <briefdescription>
<para>Write an event (bank) into a record in evio/hipo version 6 format. </para>
        </briefdescription>
        <detaileddescription>
<para>Once the record is full and if writing to a file (for multiple compression threads), the record will be sent to a thread which may compress the data, then it will be sent to a thread to write the record to file. If there is only 1 compression thread, it&apos;s all done in the thread which call this method.</para>
<para>If writing to a buffer, once the record is full this method returns false - indicating that the last event was NOT written to the record. To finish the writing process, call <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref>. This will compress the data if desired and then write it to the buffer.</para>
<para>The buffer must contain only the event&apos;s data (event header and event data) and must <bold>not</bold> be in complete evio file format. Do not call this while simultaneously calling close, flush, setFirstEvent, or getByteBuffer.</para>
<para>This method is not used to write the dictionary or the first event which are both placed in the common record which, in turn, is the user header part of the file header.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bankBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the bank (as a <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> object) to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if writing to buffer: true if event was added to record, false if buffer full, or record event count limit exceeded.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if error writing file if event is opposite byte order of internal buffer; if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called; if bad eventBuffer format; if file could not be opened for writing; if file exists but user requested no over-writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1027" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1837" bodyend="1839"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a1dd737141e74b419863aab6900fa2eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EventWriter::writeEvent</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;bankBuffer, bool force)</argsstring>
        <name>writeEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>bankBuffer</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Write an event (bank) into a record in evio/hipo version 6 format. </para>
        </briefdescription>
        <detaileddescription>
<para>Once the record is full and if writing to a file (for multiple compression threads), the record will be sent to a thread which may compress the data, then it will be sent to a thread to write the record to file. If there is only 1 compression thread, it&apos;s all done in the thread which call this method.</para>
<para>If writing to a buffer, once the record is full this method returns false - indicating that the last event was NOT written to the record. To finish the writing process, call <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref>. This will compress the data if desired and then write it to the buffer.</para>
<para>The buffer must contain only the event&apos;s data (event header and event data) and must <bold>not</bold> be in complete evio file format. Do not call this while simultaneously calling close, flush, setFirstEvent, or getByteBuffer.</para>
<para>Be warned that injudicious use of a true 2nd arg, the force flag, will <bold>kill</bold> performance when writing to a file.</para>
<para>This method is not used to write the dictionary or the first event which are both placed in the common record which, in turn, is the user header part of the file header.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bankBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the bank (as a <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> object) to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>if writing to disk, force it to write event to the disk. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if writing to buffer: true if event was added to record, false if buffer full, or record event count limit exceeded.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if error writing file if event is opposite byte order of internal buffer; if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called; if bad eventBuffer format; if file could not be opened for writing; if file exists but user requested no over-writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1028" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1877" bodyend="1879"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a4354616f2b2ad92ce267249f48c64d51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EventWriter::writeEvent</definition>
        <argsstring>(std::shared_ptr&lt; EvioBank &gt; bank)</argsstring>
        <name>writeEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> &gt;</type>
          <declname>bank</declname>
        </param>
        <briefdescription>
<para>Write an event (bank) into a record in evio/hipo version 6 format. </para>
        </briefdescription>
        <detaileddescription>
<para>Once the record is full and if writing to a file (for multiple compression threads), the record will be sent to a thread which may compress the data, then it will be sent to a thread to write the record to file. If there is only 1 compression thread, it&apos;s all done in the thread which call this method.</para>
<para>If writing to a buffer, once the record is full this method returns false - indicating that the last event was NOT written to the record. To finish the writing process, call <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref>. This will compress the data if desired and then write it to the buffer.</para>
<para>Do not call this while simultaneously calling close, flush, setFirstEvent, or getByteBuffer.</para>
<para>This method is not used to write the dictionary or the first event which are both placed in the common record which, in turn, is the user header part of the file header.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bank</parametername>
</parameternamelist>
<parameterdescription>
<para>the bank to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if writing to buffer: true if event was added to record, false if buffer full, or record event count limit exceeded.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if error writing file if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called; if file could not be opened for writing; if file exists but user requested no over-writing;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1030" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1910" bodyend="1912"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a9360732276d183390766275326cf1900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EventWriter::writeEvent</definition>
        <argsstring>(std::shared_ptr&lt; EvioBank &gt; bank, bool force)</argsstring>
        <name>writeEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> &gt;</type>
          <declname>bank</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Write an event (bank) into a record in evio/hipo version 6 format. </para>
        </briefdescription>
        <detaileddescription>
<para>Once the record is full and if writing to a file (for multiple compression threads), the record will be sent to a thread which may compress the data, then it will be sent to a thread to write the record to file. If there is only 1 compression thread, it&apos;s all done in the thread which call this method.</para>
<para>If writing to a buffer, once the record is full this method returns false - indicating that the last event was NOT written to the record. To finish the writing process, call <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref>. This will compress the data if desired and then write it to the buffer.</para>
<para>Do not call this while simultaneously calling close, flush, setFirstEvent, or getByteBuffer.</para>
<para>This method is not used to write the dictionary or the first event which are both placed in the common record which, in turn, is the user header part of the file header.</para>
<para>Be warned that injudicious use of the 2nd arg, the force flag, will <bold>kill</bold> performance when writing to a file.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bank</parametername>
</parameternamelist>
<parameterdescription>
<para>the bank to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>if writing to disk, force it to write event to the disk. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if writing to buffer: true if event was added to record, false if buffer full, or record event count limit exceeded.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if error writing file if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called; if file could not be opened for writing; if file exists but user requested no over-writing;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1031" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1947" bodyend="1949"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a9b3c0ba666e31e95cc155097b09d962a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventWriter::reInitializeBuffer</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buf, const std::bitset&lt; 24 &gt; *bitInfo, uint32_t recordNumber, bool useCurrentBitInfo)</argsstring>
        <name>reInitializeBuffer</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const std::bitset&lt; 24 &gt; *</type>
          <declname>bitInfo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>recordNumber</declname>
          <defname>recNumber</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>useCurrentBitInfo</declname>
        </param>
        <briefdescription>
<para>Initialization new buffer (not from constructor). </para>
        </briefdescription>
        <detaileddescription>
<para>The buffer&apos;s position is set to 0 before writing. Only called by <ref refid="d9/dcd/classevio_1_1_event_writer_1a59c84d3cc0d530dcafeb325d3fd78a79" kindref="member">setBuffer(std::shared_ptr&lt;ByteBuffer&gt; &amp;)</ref> and <ref refid="d9/dcd/classevio_1_1_event_writer_1a8d3e5edb367a7ca355e0f0e936db44b6" kindref="member">setBuffer(std::shared_ptr&lt;ByteBuffer&gt; &amp;, std::bitset&lt;24&gt; *, uint32_t)</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>set of bits to include in first record header. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>number at which to start record number counting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useCurrentBitInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>regardless of bitInfo arg&apos;s value, use the current value of bitInfo in the reinitialized buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="955" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="542" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a03cb267367e2bb5b182d3a8be93f7750" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ByteBuffer &gt; evio::EventWriter::getBuffer</definition>
        <argsstring>()</argsstring>
        <name>getBuffer</name>
        <briefdescription>
<para>Get the buffer being written into. </para>
        </briefdescription>
        <detaileddescription>
<para>If writing to a buffer, this was initially supplied by user in constructor. If writing to a file, return null. Although this method may seems useful, it requires a detailed knowledge of this class&apos;s internals. The <ref refid="d9/dcd/classevio_1_1_event_writer_1ab9f560ab96c146e6a3c288d202cadb1e" kindref="member">getByteBuffer()</ref> method is much more useful to the user.</para>
<para><simplesect kind="return"><para>buffer being written into </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="969" column="25" bodyfile="src/libsrc/EventWriter.cpp" bodystart="675" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a493879a96f9189d069b4966d6fde2fd0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::createCommonRecord</definition>
        <argsstring>(const std::string &amp;xmlDict, std::shared_ptr&lt; EvioBank &gt; const &amp;firstBank, std::shared_ptr&lt; EvioNode &gt; const &amp;firstNode, std::shared_ptr&lt; ByteBuffer &gt; const &amp;firstBuf)</argsstring>
        <name>createCommonRecord</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>xmlDict</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> &gt; const &amp;</type>
          <declname>firstBank</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/dd0/classevio_1_1_evio_node" kindref="compound">EvioNode</ref> &gt; const &amp;</type>
          <declname>firstNode</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; const &amp;</type>
          <declname>firstBuf</declname>
        </param>
        <briefdescription>
<para>Create and fill the common record which contains the dictionary and first event. </para>
        </briefdescription>
        <detaileddescription>
<para>Use the firstBank as the first event if specified, else try using the firstNode if specified, else try the firstBuf.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xmlDict</parametername>
</parameternamelist>
<parameterdescription>
<para>xml dictionary </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstBank</parametername>
</parameternamelist>
<parameterdescription>
<para>first event as <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstNode</parametername>
</parameternamelist>
<parameterdescription>
<para>first event as <ref refid="de/dd0/classevio_1_1_evio_node" kindref="compound">EvioNode</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>first event as <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if dictionary is in improper format </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="998" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1045" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a9616373d9db4d892bf5a6ff347a8d9e3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::writeFileHeader</definition>
        <argsstring>()</argsstring>
        <name>writeFileHeader</name>
        <briefdescription>
<para>Create and write a general file header into the file. </para>
        </briefdescription>
        <detaileddescription>
<para>The general header&apos;s user header is the common record which contains any existing dictionary and first event.</para>
<para>Call this method AFTER file split or, in constructor, after the file name is created in order to ensure a consistent value for file split number. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1003" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1115" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a1fb08de6ee198319eca78378063f5de8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::toAppendPosition</definition>
        <argsstring>()</argsstring>
        <name>toAppendPosition</name>
        <briefdescription>
<para>This method positions a file for the first <ref refid="d9/dcd/classevio_1_1_event_writer_1a4354616f2b2ad92ce267249f48c64d51" kindref="member">writeEvent(std::shared_ptr&lt;EvioBank&gt;)</ref> in append mode. </para>
        </briefdescription>
        <detaileddescription>
<para>It places the writing position after the last event (not record header).</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if file reading/writing problems, if bad file/buffer format; if not in append mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1017" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1393" bodyend="1616"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a24b65789776212cc9b087f91a6185d0f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EventWriter::writeEvent</definition>
        <argsstring>(std::shared_ptr&lt; EvioBank &gt; bank, std::shared_ptr&lt; ByteBuffer &gt; bankBuffer, bool force)</argsstring>
        <name>writeEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> &gt;</type>
          <declname>bank</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
          <declname>bankBuffer</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Write an event (bank) into a record in evio/hipo version 6 format. </para>
        </briefdescription>
        <detaileddescription>
<para>Once the record is full and if writing to a file (for multiple compression threads), the record will be sent to a thread which may compress the data, then it will be sent to a thread to write the record to file. If there is only 1 compression thread, it&apos;s all done in the thread which call this method.</para>
<para>If writing to a buffer, once the record is full this method returns false - indicating that the last event was NOT written to the record. To finish the writing process, call <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref>. This will compress the data if desired and then write it to the buffer.</para>
<para>The event to be written may be in one of two forms. The first is as an <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> object and the second is as a <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> containing only the event&apos;s data (event header and event data) and must <bold>not</bold> be in complete evio file format. The first non-null of the bank arguments will be written. Do not call this while simultaneously calling close, flush, setFirstEvent, or getByteBuffer.</para>
<para>Be warned that injudicious use of a true 2nd arg, the force flag, will <bold>kill</bold> performance when writing to a file.</para>
<para>This method is not used to write the dictionary or the first event which are both placed in the common record which, in turn, is the user header part of the file header.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bank</parametername>
</parameternamelist>
<parameterdescription>
<para>the bank (as an <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> object) to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bankBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the bank (as a <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> object) to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>if writing to disk, force it to write event to the disk. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if writing to buffer: true if event was added to record, false if buffer full, record event count limit exceeded, or bank and bankBuffer args are both null.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if error writing file; if event is opposite byte order of internal buffer; if bad bankBuffer format; if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called; if file could not be opened for writing; if file exists but user requested no over-writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1035" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1992" bodyend="2183"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1adb6a413c5ec46b332ac26544d6736443" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EventWriter::writeEventToFile</definition>
        <argsstring>(std::shared_ptr&lt; EvioBank &gt; bank, std::shared_ptr&lt; ByteBuffer &gt; bankBuffer, bool force)</argsstring>
        <name>writeEventToFile</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> &gt;</type>
          <declname>bank</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
          <declname>bankBuffer</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Write an event (bank) into a record and eventually to a file in evio/hipo version 6 format. </para>
        </briefdescription>
        <detaileddescription>
<para>Once the record is full and if writing with multiple compression threads, the record will be sent to a thread which may compress the data, then it will be sent to a thread to write the record to file. If there is only 1 compression thread, it&apos;s all done in the thread which call this method.</para>
<para><bold> If splitting files, this method returns false if disk partition is too full to write the complete, next split file. If force arg is true, write anyway. DO NOT mix calling this method with calling <ref refid="" kindref="compound">writeEvent(std::shared_ptr&lt;EvioBank&gt;, std::shared_ptr&lt;ByteBuffer&gt;, bool)</ref> (or the various <ref refid="d9/dcd/classevio_1_1_event_writer_1a34bf54cb6551a7e6d151741bcc798d3a" kindref="member">writeEvent()</ref> methods which call it). Results are unpredictable as it messes up the logic used to quit writing to full disk. </bold></para>
<para>The event to be written may be in one of two forms. The first is as an <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> object and the second is as a <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> containing only the event&apos;s data (event header and event data) and must <bold>not</bold> be in complete evio file format. The first non-null of the bank arguments will be written. Do not call this while simultaneously calling close, flush, setFirstEvent, or getByteBuffer.</para>
<para>Be warned that injudicious use of a true 2nd arg, the force flag, will <bold>kill</bold> performance when writing to a file.</para>
<para>This method is not used to write the dictionary or the first event which are both placed in the common record which, in turn, is the user header part of the file header.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bank</parametername>
</parameternamelist>
<parameterdescription>
<para>the bank (as an <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> object) to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bankBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the bank (as a <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> object) to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>if writing to disk, force it to write event to the disk. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if event was added to record. If splitting files, false if disk partition too full to write the complete, next split file. False if interrupted. If force arg is true, write anyway.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if error writing file if event is opposite byte order of internal buffer; if both buffer args are null; if bad bankBuffer format; if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called; if not writing to file; if file could not be opened for writing; if file exists but user requested no over-writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1037" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="2235" bodyend="2469"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1ac86ef4426cbd503dddee0d55cf6c71a7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EventWriter::fullDisk</definition>
        <argsstring>()</argsstring>
        <name>fullDisk</name>
        <briefdescription>
<para>Check to see if the disk is full. </para>
        </briefdescription>
        <detaileddescription>
<para>Is it able to store 1 full split, 1 supply of records, and a 10MB buffer zone? Two variables are set, one atomic and one not, depending on needs. <simplesect kind="return"><para>true if full, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1040" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="2478" bodyend="2493"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a2e355198a3debd499dff72d1e5f78c06" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::compressAndWriteToFile</definition>
        <argsstring>(bool force)</argsstring>
        <name>compressAndWriteToFile</name>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Compress data and write record to file. </para>
        </briefdescription>
        <detaileddescription>
<para>Does nothing if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called. Used when doing compression &amp; writing to file in a single thread.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, force writing event physically to disk.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object already closed; if file could not be opened for writing; if file exists but user requested no over-writing; if error opening/writing/forcing write to file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1042" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="2507" bodyend="2515"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a472098fee9587c83f56744a4a824171c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EventWriter::tryCompressAndWriteToFile</definition>
        <argsstring>(bool force)</argsstring>
        <name>tryCompressAndWriteToFile</name>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Compress data and write record to file. </para>
        </briefdescription>
        <detaileddescription>
<para>Does nothing if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called. Used when doing compression &amp; writing to file in a single thread. Will not write file if no room on disk (and force arg is false).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, force writing event physically to disk. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if everything normal; false if a new file needs to be created (first write after a split) but there is not enough free space on the disk partition for the next, complete file. If force arg is true, write anyway.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object already closed; if file could not be opened for writing; if file exists but user requested no over-writing; if error opening/writing/forcing write to file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1043" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="2534" bodyend="2541"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a715f57ea487cbd50163c5ec8064ec18b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EventWriter::writeToFile</definition>
        <argsstring>(bool force, bool checkDisk)</argsstring>
        <name>writeToFile</name>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkDisk</declname>
        </param>
        <briefdescription>
<para>For single threaded compression, write record to file. </para>
        </briefdescription>
        <detaileddescription>
<para>In this case, we have 1 record, but 2 buffers. One buffer can be written, while the 2nd is being filled in the record. Does nothing if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>force it to write event to the disk. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>checkDisk</parametername>
</parameternamelist>
<parameterdescription>
<para>if true and if a new file needs to be created but there is not enough free space on the disk partition for the complete intended file, return false without creating or writing to file. If force arg is true, write anyway.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if everything normal; false if a new file needs to be created (first write after a split) but there is not enough free space on the disk partition for the next, complete file and checkDisk arg is true.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object already closed; if file exists but user requested no over-writing; if error opening/writing/forcing write to file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1045" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="2565" bodyend="2681"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a41410869efe658c154f81081fcdde6d7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::writeToFileMT</definition>
        <argsstring>(std::shared_ptr&lt; RecordRingItem &gt; &amp;item, bool force)</argsstring>
        <name>writeToFileMT</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="db/dc8/classevio_1_1_record_ring_item" kindref="compound">RecordRingItem</ref> &gt; &amp;</type>
          <declname>item</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>For multi-threaded compression, write record to file. </para>
        </briefdescription>
        <detaileddescription>
<para>In this case we do NOT have 1 record with 3 buffers. Instead we have a ring of records, each with its own buffers. Does nothing if <ref refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" kindref="member">close()</ref> already called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>contains record to write to the disk if compression is multi-threaded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>force it to write event to the disk.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object already closed; if file could not be opened for writing; if file exists but user requested no over-writing; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IOException</parametername>
</parameternamelist>
<parameterdescription>
<para>if error writing file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1046" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="2698" bodyend="2794"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a8cd9400411cde473cdda4b34475dc9c2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::splitFile</definition>
        <argsstring>()</argsstring>
        <name>splitFile</name>
        <briefdescription>
<para>Split the file for multithreaded compression. </para>
        </briefdescription>
        <detaileddescription>
<para>Never called when output is to buffer. It writes the trailer which includes an index of all records. Then it closes the old file (forcing unflushed data to be written) and creates the name of the new one.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if file could not be opened for writing; if file exists but user requested no over-writing; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1048" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="2808" bodyend="2862"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1adec055a23147475613ae58c07d868c4d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::writeTrailerToFile</definition>
        <argsstring>(bool writeIndex)</argsstring>
        <name>writeTrailerToFile</name>
        <param>
          <type>bool</type>
          <declname>writeIndex</declname>
        </param>
        <briefdescription>
<para>Write a general header as the last &quot;header&quot; or trailer in the file optionally followed by an index of all record lengths. </para>
        </briefdescription>
        <detaileddescription>
<para>This writes synchronously.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>writeIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, write an index of all record lengths in trailer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if problems writing to file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1049" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="2873" bodyend="2950"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a164626967cb3c84c9f7f7655b47b63c9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::flushCurrentRecordToBuffer</definition>
        <argsstring>()</argsstring>
        <name>flushCurrentRecordToBuffer</name>
        <briefdescription>
<para>Flush everything in currentRecord into the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>There is only one record containing events which is written into the buffer. Following that record is a trailer - an empty record with only a header in order to signify that there are no more events to follow. The trailer could contain an index of all events in the buffer, although this is never done when transferring evio data in buffers over the network. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1050" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="2961" bodyend="3000"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a38bf3ec40304d90a830b7a1911e4e2d6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EventWriter::writeToBuffer</definition>
        <argsstring>(std::shared_ptr&lt; EvioBank &gt; &amp;bank, std::shared_ptr&lt; ByteBuffer &gt; &amp;bankBuffer)</argsstring>
        <name>writeToBuffer</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> &gt; &amp;</type>
          <declname>bank</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>bankBuffer</declname>
        </param>
        <briefdescription>
<para>Write bank to current record. </para>
        </briefdescription>
        <detaileddescription>
<para>If it doesn&apos;t fit, return false. The currentRecord will always accept at least one event if it&apos;s not writing into a user-provided buffer, expanding memory if it has to. A bank in buffer form has priority, if it&apos;s null, then it looks at the bank in <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> object form.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bank</parametername>
</parameternamelist>
<parameterdescription>
<para>bank to write in <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> object form. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bankBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>bank to write in buffer form . </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if event was added to buffer, false if the buffer is full or event count limit exceeded. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1051" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="3015" bodyend="3035"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a7c868c0a46206e9ceb4a2da1ff89a6fd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t EventWriter::trailerBytes</definition>
        <argsstring>()</argsstring>
        <name>trailerBytes</name>
        <briefdescription>
<para>How many bytes make up the desired trailer? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of bytes that make up the desired trailer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1053" column="18" bodyfile="src/libsrc/EventWriter.cpp" bodystart="3042" bodyend="3047"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1ad1411756327c2c794949544f54a22afd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::writeTrailerToBuffer</definition>
        <argsstring>(bool writeIndex)</argsstring>
        <name>writeTrailerToBuffer</name>
        <param>
          <type>bool</type>
          <declname>writeIndex</declname>
        </param>
        <briefdescription>
<para>Write a general header as the last &quot;header&quot; or trailer in the buffer optionally followed by an index of all record lengths. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>writeIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, write an index of all record lengths in trailer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if not enough room in buffer to hold trailer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1054" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="3056" bodyend="3087"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1ad99f7e74c624c817ec6b190c2c68f324" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventWriter::staticWriteFunction</definition>
        <argsstring>(EventWriter *pWriter, const char *data, size_t len)</argsstring>
        <name>staticWriteFunction</name>
        <param>
          <type><ref refid="d9/dcd/classevio_1_1_event_writer" kindref="compound">EventWriter</ref> *</type>
          <declname>pWriter</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Static wrapper function used to asynchronously run threads to write to file. </para>
        </briefdescription>
        <detaileddescription>
<para>Necesssary because std::async cannot run member functions (i.e. asyncFileChannel-&gt;write) directly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pWriter</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to this object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="958" column="21" bodyfile="src/libsrc/EventWriter.cpp" bodystart="586" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1a2e88b63c62edcbc5682fe7800fa54328" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventWriter::staticDoNothingFunction</definition>
        <argsstring>(EventWriter *pWriter)</argsstring>
        <name>staticDoNothingFunction</name>
        <param>
          <type><ref refid="d9/dcd/classevio_1_1_event_writer" kindref="compound">EventWriter</ref> *</type>
          <declname>pWriter</declname>
        </param>
        <briefdescription>
<para>Static wrapper function used to asynchronously run threads to do nothing. </para>
        </briefdescription>
        <detaileddescription>
<para>Used when testing this software but not actually writing to file.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pWriter</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to this object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="959" column="21" bodyfile="src/libsrc/EventWriter.cpp" bodystart="597" bodyend="597"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="d9/dcd/classevio_1_1_event_writer_1ae7a045426957215f5336f040a9d77f01" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EventWriter::examineFileHeader</definition>
        <argsstring>()</argsstring>
        <name>examineFileHeader</name>
        <briefdescription>
<para>Reads part of the file header in order to determine the evio version # and endianness of the file in question. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>not in append mode, contains too little data, is not in proper format, version earlier than 6, premature EOF or file reading error, and all other exceptions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventWriter.h" line="1013" column="14" bodyfile="src/libsrc/EventWriter.cpp" bodystart="1332" bodyend="1383"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a88f84e6b1757db70542eac13294fc80e" compoundref="d4/d6c/_byte_buffer_8cpp" startline="518" endline="518">evio::ByteBuffer::position</references>
        <referencedby refid="d9/dcd/classevio_1_1_event_writer_1a5271d9b38e1e974be98f3ff98d5ed602" compoundref="db/dc8/_event_writer_8cpp" startline="155" endline="417">EventWriter</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An <ref refid="d9/dcd/classevio_1_1_event_writer" kindref="compound">EventWriter</ref> object is used for writing events to a file or to a byte buffer. </para>
    </briefdescription>
    <detaileddescription>
<para>This class does NOT write versions 1-4 data, only version 6! This class is not thread-safe.</para>
<para><preformatted></preformatted></para>
<para><preformatted>           FILE Uncompressed</preformatted></para>
<para><preformatted>   +----------------------------------+
   +                                  +
   +      General File Header         +
   +                                  +
   +----------------------------------+
   +----------------------------------+
   +                                  +
   +     Index Array (optional)       +
   +                                  +
   +----------------------------------+
   +----------------------------------+
   +      User Header (optional)      +
   +        --------------------------+
   +       |        Padding           +
   +----------------------------------+
   +----------------------------------+
   +                                  +
   +          Data Record 1           +
   +                                  +
   +----------------------------------+<itemizedlist>
<listitem><para><itemizedlist>
<listitem></listitem><listitem><para>+----------------------------------+
   +                                  +
   +          Data Record N           +
   +                                  +
   +----------------------------------+</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</preformatted></para>
<para><preformatted>=============================================
=============================================</preformatted></para>
<para><preformatted>             FILE Compressed</preformatted></para>
<para><preformatted>   +----------------------------------+
   +                                  +
   +      General File Header         +
   +                                  +
   +----------------------------------+
   +----------------------------------+
   +                                  +
   +     Index Array (optional)       +
   +                                  +
   +----------------------------------+
   +----------------------------------+
   +      User Header (optional)      +
   +        --------------------------+
   +       |         Padding          +
   +----------------------------------+
   +----------------------------------+
   +           Compressed             +
   +          Data Record 1           +
   +                                  +
   +----------------------------------+<itemizedlist>
<listitem><para><itemizedlist>
<listitem></listitem><listitem><para>+----------------------------------+
   +           Compressed             +
   +          Data Record N           +
   +                                  +
   +----------------------------------+</para>
</listitem></itemizedlist>
</para>
<para>The User Header contains a data record which
   holds the dictionary and first event, if any.
   The general file header, index array, and
   user header are never compressed.</para>
<para>Writing a buffer is done without the general file header
   and the index array and user header which follow.</para>
</listitem></itemizedlist>
</preformatted></para>
<para><preformatted></preformatted></para>
<para><simplesect kind="date"><para>01/21/2020 </para>
</simplesect>
<simplesect kind="author"><para>timmer </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="src/libsrc/EventWriter.h" line="145" column="5" bodyfile="src/libsrc/EventWriter.h" bodystart="145" bodyend="1056"/>
    <listofallmembers>
      <member refid="d9/dcd/classevio_1_1_event_writer_1abfa82bd02498c83d5d079ccc77834aab" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>addingTrailer</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a9ad87a38a37400141e1a121530c67c70" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>addTrailerIndex</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a7c4d2530d2cf3dd90682a468466b4493" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>append</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1ac8aacbbbc184d4aa7217035b4e78d1b5" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>appendFileHeader</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1aa342f4aaa9f776a8afe623d5cdb5e076" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>asyncFileChannel</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a8789d1f1c31deb3220d1ff4a0f877935" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>baseFileName</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a4f68eb182a80b5e8d1bc26330c1964d5" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>buffer</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a223b858a9d97b5f2cd4c39a3e643dfc6" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>bufferSize</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1aecb2df8127a40702522c80e68d63c9ad" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>byteOrder</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1ae488db178719d5b0dace1ac0e08125ca" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>bytesWritten</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a1f2687708de5933b1b9aecb2930706ed" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>close</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a08ce71261ddd752cc89abffed65bfd23" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>closed</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a763629f3f5a87ae70f5304947876d40a" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>commonRecord</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a4f71cf85d5a20a0b05b81962b1c9224f" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>commonRecordBytesToBuffer</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a2e355198a3debd499dff72d1e5f78c06" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>compressAndWriteToFile</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a69e28446ebacd07a27bb7c005364b269" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>compressionFactor</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a9f6c884a4d073779848bc1b200eec8f4" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>compressionType</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a493879a96f9189d069b4966d6fde2fd0" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>createCommonRecord</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1af15e645a9be9eb1b3d2920846053ecb8" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>currentFileName</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a1dd5873091ee51c5bd08ac646b7f4527" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>currentFilePath</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a2c9c400ce1578dba5b904e437d2df12b" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>currentRecord</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a84604cc8b654cf221be36a954aeda7fe" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>currentRingItem</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a9aa2670528a09c63faed68297be9fefd" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>dictionaryByteArray</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a6c919b33a5a0236812c3c2f1da38f25d" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>diskIsFull</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a7fbcb1401658b879435e4b71c98236c8" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>diskIsFullVolatile</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a72e747c35624c889714b8757ae22a9ac" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>eventsWrittenToBuffer</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1af79430c8eb29d627661addab609de757" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>eventsWrittenToFile</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a4da369173c249f0b4b1ab1d6d504d4d8" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>eventsWrittenTotal</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a17225fd6d6a7fdfa9d20a75966f5c11a" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>EventWriter</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a92be16234de2fd45d4c19a710fdac9be" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>EventWriter</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a5271d9b38e1e974be98f3ff98d5ed602" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>EventWriter</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a93b4acef57cfd15dcc5844c385824c90" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>EventWriter</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a66db745e2ef5e1fcca14eae4683dc160" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>EventWriter</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a0a4c374c6cf244dfd6f777917b7c7ea3" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>EventWriter</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1ae7a045426957215f5336f040a9d77f01" prot="protected" virt="non-virtual"><scope>evio::EventWriter</scope><name>examineFileHeader</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1af4b7f01ddf5b56c31a0983fc2f3e0d46" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>fileCloser</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a7e7a14a899c7c389eb997357193a4bb3" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>fileHeader</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a83e6201ce8d1fd43dbcee4f8023ab26b" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>fileOpen</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a7ac0f14d0ddbcaa248f32c3ad89333bc" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>fileWritingPosition</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a8ae1e5a1991db811b34f725b8eb0f55e" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>firstEventByteArray</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a38cb01e88b8e2f2e4346eb3b93b58071" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>flush</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a164626967cb3c84c9f7f7655b47b63c9" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>flushCurrentRecordToBuffer</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1ac86ef4426cbd503dddee0d55cf6c71a7" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>fullDisk</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a239dee5153aa9223c238386935d764e8" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>future1</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1ab0f9389e21192b92cffdd2721dfbbbfc" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>futureIndex</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a03cb267367e2bb5b182d3a8be93f7750" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>getBuffer</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1ab9f560ab96c146e6a3c288d202cadb1e" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>getByteBuffer</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1aa6fed50d9fd092e3ae3a9ad2c18b8180" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>getByteOrder</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a2456f9ee73604178342bb55792df85c5" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>getBytesWrittenToBuffer</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a869c87c1e922b6e7cf509e7bd4e92c68" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>getCurrentFilename</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1aea264cc1787db07728ed795858c04c7a" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>getCurrentFilePath</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a318697a18126aaf937a97f9bae3939f7" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>getEventsWritten</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a498ee5a0039c4265741917390b0a380e" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>getRecordNumber</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1afb4093dbd44f2773872fce88855c9357" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>getSplitCount</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1ae21d6b4fa57b43b338dab195a6c2be1c" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>getSplitNumber</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a6c7f32f9c5be9b037642c733080c8b53" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>hasAppendDictionary</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a91a3edcbf2d5e3005ecb0cec061dfbaf" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>hasRoom</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a38541d671beaf20a413db39450d56420" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>hasTrailerWithIndex</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a9efa7634d5e625f24be7e58473fe1431" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>haveFirstEvent</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a55e95a22ece4bba5477850af1d2849c6" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>headerArray</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1ab41aee93324a85c24f644573fcc3591f" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>idCounter</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a1189be84aa327ed6dd7975200cbe91f3" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>indexLength</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a7e5b1cbb84b37beb49ef65ce099331d9" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>internalBuffers</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1aa82458e15e94f88450f061de51d1d3e8" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>isClosed</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a74140e35e3c934cf63e095d4d2ac73f5" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>isDiskFull</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a2ea1e53597502980a9caffdd64ecbdd9" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>maxSupplyBytes</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a9e2e3c69bba9a7531c2aab673672fe1d" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>noFileWriting</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a4e2a2896ca757309ab5ca7a373b05aea" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>overWriteOK</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1af5cfadb7835d7416db46c3e58d503188" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>recordCompressorThreads</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1af55e1f21cba18c98d879f0ee346f8d74" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>recordLengths</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a5ca8e4f2493a7cb06ca254fd791aea93" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>recordNumber</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a75705e1c597f07954c0618d0c6d76d5c" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>recordsWritten</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1ae7a7e771e6d09a37b1c7db34bd7758c7" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>recordWriterThread</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a9b3c0ba666e31e95cc155097b09d962a" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>reInitializeBuffer</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a8a2b84be16c955c5971072b8b6ed2bc5" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>ringItem1</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a2543142555e6f1cc3e4ebd47bdd534e3" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>runNumber</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a8d3e5edb367a7ca355e0f0e936db44b6" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>setBuffer</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a59c84d3cc0d530dcafeb325d3fd78a79" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>setBuffer</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a5177b190e06a2b28fd62136f4b4eb0a2" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>setEventType</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a17a40dc76bca3e2eff745130bc27fea1" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>setFirstEvent</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a820160c1cd81b96cb9ea01d1d9f0771d" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>setFirstEvent</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a6e10cb04c9523dba4030e1e9be6f22ef" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>setFirstEvent</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1aa4b8192088442c20102b758a10c7d45e" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>setSourceId</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1af0beda1c8332e1f2785303fd21b15918" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>setStartingRecordNumber</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a85f8d0a2d335ffd45d1a80b1d16d9b95" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>singleThreadedCompression</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1ae1623b2b4fec33c9cfe19796e57e283b" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>sourceId</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a0aa86dd9cfd3e00917c0df9b4af6f4e4" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>specifierCount</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1adde021198404b68ef3821c5e6b9c0481" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>split</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a8afecdacc67e92e631482b4b87cdcd9f" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>splitCount</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a228550082956bad0735c16ad8cffc31c" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>splitEventBytes</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a3cd3fec7986e2d7bed2a8894e20b261d" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>splitEventCount</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a8cd9400411cde473cdda4b34475dc9c2" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>splitFile</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a05bf1410e5f591320c0790ae799b28de" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>splitIncrement</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1af2abbdf7c1776acea3c87a7fcf17ce81" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>splitNumber</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a2e88b63c62edcbc5682fe7800fa54328" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>staticDoNothingFunction</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1ad99f7e74c624c817ec6b190c2c68f324" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>staticWriteFunction</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a01a010b792b0bafc0c06a35ca2ff5977" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>streamCount</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a352f053c8e828dfa0f549b9e1b314871" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>streamId</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a7dccb5060816aa88812f5fb50df9df80" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>supply</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a1fb08de6ee198319eca78378063f5de8" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>toAppendPosition</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1aa5562af12cbb499334655c396324f705" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>toFile</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a7c868c0a46206e9ceb4a2da1ff89a6fd" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>trailerBytes</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a472098fee9587c83f56744a4a824171c" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>tryCompressAndWriteToFile</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1aec62b034c68b4d6a40f707483f881d8b" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>usedBuffer</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a08b8231f976cfbe8b5b2d69fe9fa8c92" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>userHeaderLength</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a49c9582ffe5b7400fd3f821e1374b763" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>userHeaderPadding</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a34bf54cb6551a7e6d151741bcc798d3a" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>writeEvent</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a945805c4c7a8697b5f98089a2c6a4f06" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>writeEvent</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a7e2483d8fe62cca4b1684b624ed85cc7" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>writeEvent</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a1dd737141e74b419863aab6900fa2eea" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>writeEvent</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a4354616f2b2ad92ce267249f48c64d51" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>writeEvent</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a9360732276d183390766275326cf1900" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>writeEvent</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a24b65789776212cc9b087f91a6185d0f" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>writeEvent</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a6c347265d6480cd5e6c85d873d6399f4" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>writeEventToFile</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1adb6a413c5ec46b332ac26544d6736443" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>writeEventToFile</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a9616373d9db4d892bf5a6ff347a8d9e3" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>writeFileHeader</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a38bf3ec40304d90a830b7a1911e4e2d6" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>writeToBuffer</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a715f57ea487cbd50163c5ec8064ec18b" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>writeToFile</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a41410869efe658c154f81081fcdde6d7" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>writeToFileMT</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1ad1411756327c2c794949544f54a22afd" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>writeTrailerToBuffer</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1adec055a23147475613ae58c07d868c4d" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>writeTrailerToFile</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1a9314950dbd90b4d776549376c56160ea" prot="public" virt="non-virtual"><scope>evio::EventWriter</scope><name>writingToFile</name></member>
      <member refid="d9/dcd/classevio_1_1_event_writer_1abf0aa9823f745840d513fbd2317b80b9" prot="private" virt="non-virtual"><scope>evio::EventWriter</scope><name>xmlDictionary</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
