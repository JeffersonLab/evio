<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classevio_1_1_byte_order" kind="class" language="C++" prot="public">
    <compoundname>evio::ByteOrder</compoundname>
    <includes refid="_byte_order_8h" local="no">ByteOrder.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classevio_1_1_byte_order_1ae70d8b2df728e3776bb6bb843260bb71" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classevio_1_1_byte_order" kindref="compound">ByteOrder</ref></type>
        <definition>const ByteOrder evio::ByteOrder::ENDIAN_LITTLE</definition>
        <argsstring></argsstring>
        <name>ENDIAN_LITTLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Little endian byte order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="57" column="32" bodyfile="src/libsrc/ByteOrder.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classevio_1_1_byte_order_1aa11600b2ff36c44d7f2f8e345cfc937d" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classevio_1_1_byte_order" kindref="compound">ByteOrder</ref></type>
        <definition>const ByteOrder evio::ByteOrder::ENDIAN_BIG</definition>
        <argsstring></argsstring>
        <name>ENDIAN_BIG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Big endian byte order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="58" column="32" bodyfile="src/libsrc/ByteOrder.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classevio_1_1_byte_order_1a69586e13940d338c707da1d17d2e85a1" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classevio_1_1_byte_order" kindref="compound">ByteOrder</ref></type>
        <definition>const ByteOrder evio::ByteOrder::ENDIAN_UNKNOWN</definition>
        <argsstring></argsstring>
        <name>ENDIAN_UNKNOWN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unknown endian byte order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="60" column="32" bodyfile="src/libsrc/ByteOrder.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classevio_1_1_byte_order_1ae4055f708921d4e6540ab4662d27147c" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classevio_1_1_byte_order" kindref="compound">ByteOrder</ref></type>
        <definition>const ByteOrder evio::ByteOrder::ENDIAN_LOCAL</definition>
        <argsstring></argsstring>
        <name>ENDIAN_LOCAL</name>
        <initializer>= <ref refid="classevio_1_1_byte_order_1ad075e3d7351c6c4742b2c61df8b2e113" kindref="member">ByteOrder::getLocalByteOrder</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Local host&apos;s byte order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="61" column="32" bodyfile="src/libsrc/ByteOrder.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classevio_1_1_byte_order_1aefcbe8e2107bbca77f2f565530e2b736" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int evio::ByteOrder::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Value of this endian type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="66" column="13" bodyfile="src/libsrc/ByteOrder.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classevio_1_1_byte_order_1ab4a8c7b68f22cae7164162e464d623ac" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string evio::ByteOrder::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Store a name for each <ref refid="classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="69" column="21" bodyfile="src/libsrc/ByteOrder.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classevio_1_1_byte_order_1af8ae444df545939845ffbb436be6c4b6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>evio::ByteOrder::ByteOrder</definition>
        <argsstring>(int val, std::string name)</argsstring>
        <name>ByteOrder</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>int value of this headerType object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name (string representation) of this headerType object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="76" column="9" bodyfile="src/libsrc/ByteOrder.h" bodystart="76" bodyend="76"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classevio_1_1_byte_order_1a23e150c194163000f504efa9b1e53d82" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string evio::ByteOrder::getName</definition>
        <argsstring>() const</argsstring>
        <name>getName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the object name. <simplesect kind="return"><para>the object name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="84" column="21" bodyfile="src/libsrc/ByteOrder.h" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1aec4e6ef11064473104685009fede4e64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::ByteOrder::isBigEndian</definition>
        <argsstring>() const</argsstring>
        <name>isBigEndian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is this big endian? <simplesect kind="return"><para>true if big endian, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="90" column="14" bodyfile="src/libsrc/ByteOrder.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1ae4919bf2379c770b75c2d5d7ca87ff7c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::ByteOrder::isLittleEndian</definition>
        <argsstring>() const</argsstring>
        <name>isLittleEndian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is this little endian? <simplesect kind="return"><para>true if little endian, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="96" column="14" bodyfile="src/libsrc/ByteOrder.h" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1ab0a29204d87f503b7e96f1b855914137" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::ByteOrder::isLocalEndian</definition>
        <argsstring>() const</argsstring>
        <name>isLocalEndian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is this endian same as the local host? <simplesect kind="return"><para>true if endian is the same as the local host, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="102" column="14" bodyfile="src/libsrc/ByteOrder.h" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1a5240c7673d80d6e03e890b3472ac00d4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classevio_1_1_byte_order" kindref="compound">ByteOrder</ref></type>
        <definition>ByteOrder evio::ByteOrder::getOppositeEndian</definition>
        <argsstring>() const</argsstring>
        <name>getOppositeEndian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the oppposite endian (little if this is big and vice versa). <simplesect kind="return"><para>he oppposite endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="108" column="19" bodyfile="src/libsrc/ByteOrder.h" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1a89f850323e9475063a28fd791d6d1754" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::ByteOrder::operator==</definition>
        <argsstring>(const ByteOrder &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="113" column="14" bodyfile="src/libsrc/ByteOrder.cpp" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1a4d9e544de3c2343e2ebd418589b7d841" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::ByteOrder::operator!=</definition>
        <argsstring>(const ByteOrder &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="115" column="14" bodyfile="src/libsrc/ByteOrder.cpp" bodystart="184" bodyend="186"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classevio_1_1_byte_order_1ad075e3d7351c6c4742b2c61df8b2e113" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> const  &amp;</type>
        <definition>static ByteOrder const&amp; evio::ByteOrder::getLocalByteOrder</definition>
        <argsstring>()</argsstring>
        <name>getLocalByteOrder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the byte order of the local host. <simplesect kind="return"><para>byte order of the local host. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="122" column="33" bodyfile="src/libsrc/ByteOrder.h" bodystart="122" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1aa96046df3a55b85a31f2c33e4d903cf1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> const  &amp;</type>
        <definition>static ByteOrder const&amp; evio::ByteOrder::nativeOrder</definition>
        <argsstring>()</argsstring>
        <name>nativeOrder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the byte order of the local host. <simplesect kind="return"><para>byte order of the local host. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="133" column="33" bodyfile="src/libsrc/ByteOrder.h" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1a15e39247b5d253ff34366e2830cea06a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool evio::ByteOrder::isLocalHostBigEndian</definition>
        <argsstring>()</argsstring>
        <name>isLocalHostBigEndian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the local host big endian? <simplesect kind="return"><para>true if the local host is big endian, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="141" column="21" bodyfile="src/libsrc/ByteOrder.h" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1a53f173621aa4ecf3bda24b74fdcb28b2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool evio::ByteOrder::needToSwap</definition>
        <argsstring>(ByteOrder &amp;order)</argsstring>
        <name>needToSwap</name>
        <param>
          <type><ref refid="classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the argument the opposite of the local host&apos;s endian? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>byte order to compare to local host&apos;s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the argument is the opposite of the local host&apos;s endian. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="151" column="21" bodyfile="src/libsrc/ByteOrder.h" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1ab97d37587bd1206f03294e5b88545520" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void evio::ByteOrder::byteSwapInPlace</definition>
        <argsstring>(T &amp;var)</argsstring>
        <name>byteSwapInPlace</name>
        <param>
          <type>T &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Templated method to swap data in place. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to data to be swapped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="163" column="21" bodyfile="src/libsrc/ByteOrder.cpp" bodystart="18" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1a90661733191471ae77ecf2f0e6082734" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void evio::ByteOrder::byteSwapInPlace</definition>
        <argsstring>(T &amp;var, size_t elements)</argsstring>
        <name>byteSwapInPlace</name>
        <param>
          <type>T &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elements</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Templated method to swap array data in place. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to data to be swapped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elements</parametername>
</parameternamelist>
<parameterdescription>
<para>number of data elements to be swapped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="172" column="21" bodyfile="src/libsrc/ByteOrder.cpp" bodystart="49" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1a6bd357cb8be004145c7011c19c745391" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void evio::ByteOrder::byteSwapInPlace</definition>
        <argsstring>(T *var, size_t elements)</argsstring>
        <name>byteSwapInPlace</name>
        <param>
          <type>T *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elements</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Templated method to swap array data in place. If source pointer is null, nothing is done. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to data to be swapped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elements</parametername>
</parameternamelist>
<parameterdescription>
<para>number of data elements to be swapped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="182" column="21" bodyfile="src/libsrc/ByteOrder.cpp" bodystart="62" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1a1c12dcf8b5905395e4eb51afd501e546" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float evio::ByteOrder::byteSwap</definition>
        <argsstring>(float var)</argsstring>
        <name>byteSwap</name>
        <param>
          <type>float</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience method to return swapped float. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>float to swap </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>swapped float. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="185" column="22" bodyfile="src/libsrc/ByteOrder.cpp" bodystart="29" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1a28ffcd414e51f592c5416aba4562a07c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double evio::ByteOrder::byteSwap</definition>
        <argsstring>(double var)</argsstring>
        <name>byteSwap</name>
        <param>
          <type>double</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience method to return swapped double. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>double to swap </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>swapped double. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="186" column="23" bodyfile="src/libsrc/ByteOrder.cpp" bodystart="41" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1a4ba6cdff823495b629ad3283c18e5cff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t *</type>
        <definition>uint16_t * evio::ByteOrder::byteSwap16</definition>
        <argsstring>(uint16_t *src, size_t elements, uint16_t *dst)</argsstring>
        <name>byteSwap16</name>
        <param>
          <type>uint16_t *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method swaps an array of 2-byte data. If source pointer is null, nothing is done. If destination pointer is null, src is swapped in place.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to data source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elements</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2-byte elements to swap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination or nullptr if data is to be swapped in place. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to beginning of swapped data; null if src is null. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="189" column="25" bodyfile="src/libsrc/ByteOrder.cpp" bodystart="86" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1a60983271868534fd949d944087e32db3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t *</type>
        <definition>uint32_t * evio::ByteOrder::byteSwap32</definition>
        <argsstring>(uint32_t *src, size_t elements, uint32_t *dst)</argsstring>
        <name>byteSwap32</name>
        <param>
          <type>uint32_t *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method swaps an array of 4-byte data. If source pointer is null, nothing is done. If destination pointer is null, src is swapped in place.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to data source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elements</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 4-byte elements to swap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination or nullptr if data is to be swapped in place. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to beginning of swapped data; null if src is null. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="190" column="25" bodyfile="src/libsrc/ByteOrder.cpp" bodystart="109" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1ab57f0490234e6d17fedb0c39cf5093c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t *</type>
        <definition>uint64_t * evio::ByteOrder::byteSwap64</definition>
        <argsstring>(uint64_t *src, size_t elements, uint64_t *dst)</argsstring>
        <name>byteSwap64</name>
        <param>
          <type>uint64_t *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method swaps an array of 8-byte data. If source pointer is null, nothing is done. If destination pointer is null, src is swapped in place.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to data source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elements</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 8-byte elements to swap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to destination or nullptr if data is to be swapped in place. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to beginning of swapped data; null if src is null. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="191" column="25" bodyfile="src/libsrc/ByteOrder.cpp" bodystart="132" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classevio_1_1_byte_order_1a5fcee1f9ff458a9b14595551c1b3a77c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::ByteOrder::byteNoSwap32</definition>
        <argsstring>(const uint32_t *src, size_t elements, uint32_t *dst)</argsstring>
        <name>byteNoSwap32</name>
        <param>
          <type>const uint32_t *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine swaps nothing, it just copies the given number of 32 bit ints. If source pointer is null, nothing is done.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to data to be copied </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elements</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 32 bit ints to be copied </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to where data is to be copied to. If null, nothing is done. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/ByteOrder.h" line="192" column="26" bodyfile="src/libsrc/ByteOrder.cpp" bodystart="155" bodyend="165"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Numerical values associated with endian byte order.</para>
<para><simplesect kind="version"><para>6.0 </para>
</simplesect>
<simplesect kind="since"><para>6.0 4/16/2019 </para>
</simplesect>
<simplesect kind="author"><para>timmer </para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>evio::ByteOrder</label>
        <link refid="classevio_1_1_byte_order"/>
        <childnode refid="1" relation="usage">
          <edgelabel>ENDIAN_BIG</edgelabel>
          <edgelabel>ENDIAN_LITTLE</edgelabel>
          <edgelabel>ENDIAN_LOCAL</edgelabel>
          <edgelabel>ENDIAN_UNKNOWN</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/libsrc/ByteOrder.h" line="53" column="5" bodyfile="src/libsrc/ByteOrder.h" bodystart="53" bodyend="194"/>
    <listofallmembers>
      <member refid="classevio_1_1_byte_order_1a5fcee1f9ff458a9b14595551c1b3a77c" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>byteNoSwap32</name></member>
      <member refid="classevio_1_1_byte_order_1af8ae444df545939845ffbb436be6c4b6" prot="private" virt="non-virtual"><scope>evio::ByteOrder</scope><name>ByteOrder</name></member>
      <member refid="classevio_1_1_byte_order_1a1c12dcf8b5905395e4eb51afd501e546" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>byteSwap</name></member>
      <member refid="classevio_1_1_byte_order_1a28ffcd414e51f592c5416aba4562a07c" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>byteSwap</name></member>
      <member refid="classevio_1_1_byte_order_1a4ba6cdff823495b629ad3283c18e5cff" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>byteSwap16</name></member>
      <member refid="classevio_1_1_byte_order_1a60983271868534fd949d944087e32db3" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>byteSwap32</name></member>
      <member refid="classevio_1_1_byte_order_1ab57f0490234e6d17fedb0c39cf5093c1" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>byteSwap64</name></member>
      <member refid="classevio_1_1_byte_order_1ab97d37587bd1206f03294e5b88545520" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>byteSwapInPlace</name></member>
      <member refid="classevio_1_1_byte_order_1a90661733191471ae77ecf2f0e6082734" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>byteSwapInPlace</name></member>
      <member refid="classevio_1_1_byte_order_1a6bd357cb8be004145c7011c19c745391" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>byteSwapInPlace</name></member>
      <member refid="classevio_1_1_byte_order_1aa11600b2ff36c44d7f2f8e345cfc937d" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>ENDIAN_BIG</name></member>
      <member refid="classevio_1_1_byte_order_1ae70d8b2df728e3776bb6bb843260bb71" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>ENDIAN_LITTLE</name></member>
      <member refid="classevio_1_1_byte_order_1ae4055f708921d4e6540ab4662d27147c" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>ENDIAN_LOCAL</name></member>
      <member refid="classevio_1_1_byte_order_1a69586e13940d338c707da1d17d2e85a1" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>ENDIAN_UNKNOWN</name></member>
      <member refid="classevio_1_1_byte_order_1ad075e3d7351c6c4742b2c61df8b2e113" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>getLocalByteOrder</name></member>
      <member refid="classevio_1_1_byte_order_1a23e150c194163000f504efa9b1e53d82" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>getName</name></member>
      <member refid="classevio_1_1_byte_order_1a5240c7673d80d6e03e890b3472ac00d4" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>getOppositeEndian</name></member>
      <member refid="classevio_1_1_byte_order_1aec4e6ef11064473104685009fede4e64" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>isBigEndian</name></member>
      <member refid="classevio_1_1_byte_order_1ae4919bf2379c770b75c2d5d7ca87ff7c" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>isLittleEndian</name></member>
      <member refid="classevio_1_1_byte_order_1ab0a29204d87f503b7e96f1b855914137" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>isLocalEndian</name></member>
      <member refid="classevio_1_1_byte_order_1a15e39247b5d253ff34366e2830cea06a" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>isLocalHostBigEndian</name></member>
      <member refid="classevio_1_1_byte_order_1ab4a8c7b68f22cae7164162e464d623ac" prot="private" virt="non-virtual"><scope>evio::ByteOrder</scope><name>name</name></member>
      <member refid="classevio_1_1_byte_order_1aa96046df3a55b85a31f2c33e4d903cf1" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>nativeOrder</name></member>
      <member refid="classevio_1_1_byte_order_1a53f173621aa4ecf3bda24b74fdcb28b2" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>needToSwap</name></member>
      <member refid="classevio_1_1_byte_order_1a4d9e544de3c2343e2ebd418589b7d841" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>operator!=</name></member>
      <member refid="classevio_1_1_byte_order_1a89f850323e9475063a28fd791d6d1754" prot="public" virt="non-virtual"><scope>evio::ByteOrder</scope><name>operator==</name></member>
      <member refid="classevio_1_1_byte_order_1aefcbe8e2107bbca77f2f565530e2b736" prot="private" virt="non-virtual"><scope>evio::ByteOrder</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
