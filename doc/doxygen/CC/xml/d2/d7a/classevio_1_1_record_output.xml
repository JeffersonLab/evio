<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="d2/d7a/classevio_1_1_record_output" kind="class" language="C++" prot="public">
    <compoundname>evio::RecordOutput</compoundname>
    <includes local="no">RecordOutput.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1a1c660c90cdcd914312f659e5c775a714" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int evio::RecordOutput::ONE_MEG</definition>
        <argsstring></argsstring>
        <name>ONE_MEG</name>
        <initializer>= 1024*1024</initializer>
        <briefdescription>
<para>Maximum number of events per record. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="110" column="30" bodyfile="src/libsrc/RecordOutput.h" bodystart="110" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1a4a96554c0eed9a1844c799ae2e8e6535" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordOutput::MAX_EVENT_COUNT</definition>
        <argsstring></argsstring>
        <name>MAX_EVENT_COUNT</name>
        <initializer>= 1000000</initializer>
        <briefdescription>
<para>Maximum number of events per record. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="113" column="18" bodyfile="src/libsrc/RecordOutput.h" bodystart="113" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a232e28211cd5630b6bb43c8944ffe60e" compoundref="d4/df6/_record_output_8cpp" startline="34" endline="65">RecordOutput</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a8818ee6b0a69abc6c5fdbec1ca899cee" compoundref="d4/df6/_record_output_8cpp" startline="330" endline="330">getMaxEventCount</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1ad8f3cdf93e08051cb9be4e60ec1d7527" compoundref="d4/df6/_record_output_8cpp" startline="449" endline="449">oneTooMany</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1a3f4d7b9042307cbe6e3a223a6c374479" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordOutput::MAX_BUFFER_SIZE</definition>
        <argsstring></argsstring>
        <name>MAX_BUFFER_SIZE</name>
        <initializer>= 8*<ref refid="d2/d7a/classevio_1_1_record_output_1a1c660c90cdcd914312f659e5c775a714" kindref="member">ONE_MEG</ref></initializer>
        <briefdescription>
<para>Size of some internal buffers in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>If the recordBinary buffer is passed into the constructor or given through <ref refid="d2/d7a/classevio_1_1_record_output_1a57adc95dceace9f15a5d4525587d346c" kindref="member">setBuffer(std::shared_ptr&lt;ByteBuffer&gt; &amp;)</ref>, then this value is 91% of the its size (from position to capacity). This allows some margin for compressed data to be larger than the uncompressed - which may happen if data is random. It also allows other records to have been previously stored in the given buffer (eg. common record) since it starts writing at the buffer position which may not be 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="124" column="18" bodyfile="src/libsrc/RecordOutput.h" bodystart="124" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a232e28211cd5630b6bb43c8944ffe60e" compoundref="d4/df6/_record_output_8cpp" startline="34" endline="65">RecordOutput</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1acbb92327f0cf806b7b87b0b20336b05f" compoundref="d4/df6/_record_output_8cpp" startline="357" endline="357">getInternalBufferCapacity</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1afcbb151999c6a2db36dbf06994756e0d" compoundref="d4/df6/_record_output_8cpp" startline="439" endline="442">roomForEvent</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a57adc95dceace9f15a5d4525587d346c" compoundref="d4/df6/_record_output_8cpp" startline="211" endline="233">setBuffer</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1ad7121a345c5f6ba668983660e8158919" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordOutput::RECORD_BUFFER_SIZE</definition>
        <argsstring></argsstring>
        <name>RECORD_BUFFER_SIZE</name>
        <initializer>= 9*<ref refid="d2/d7a/classevio_1_1_record_output_1a1c660c90cdcd914312f659e5c775a714" kindref="member">ONE_MEG</ref></initializer>
        <briefdescription>
<para>Size of buffer holding built record in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>If the recordBinary buffer is passed into the constructor or given through <ref refid="d2/d7a/classevio_1_1_record_output_1a57adc95dceace9f15a5d4525587d346c" kindref="member">setBuffer(std::shared_ptr&lt;ByteBuffer&gt; &amp;)</ref>, then this value is set to be 10% bigger than <ref refid="d2/d7a/classevio_1_1_record_output_1a3f4d7b9042307cbe6e3a223a6c374479" kindref="member">MAX_BUFFER_SIZE</ref>. This allows some margin for compressed data to be larger than the uncompressed - which may happen if data is random. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="133" column="18" bodyfile="src/libsrc/RecordOutput.h" bodystart="133" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a232e28211cd5630b6bb43c8944ffe60e" compoundref="d4/df6/_record_output_8cpp" startline="34" endline="65">RecordOutput</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a57adc95dceace9f15a5d4525587d346c" compoundref="d4/df6/_record_output_8cpp" startline="211" endline="233">setBuffer</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1a96a02d6c411124b2c06ac1b302acc870" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordOutput::userBufferSize</definition>
        <argsstring></argsstring>
        <name>userBufferSize</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The number of initially available bytes to be written into in the user-given buffer, that go from position to limit. </para>
        </briefdescription>
        <detaileddescription>
<para>The user-given buffer is stored in recordBinary. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="138" column="18" bodyfile="src/libsrc/RecordOutput.h" bodystart="138" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a3308b373e210f9d4cc3f3f1faf50e544" compoundref="d4/df6/_record_output_8cpp" startline="77" endline="118">RecordOutput</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a0a75729eb429ff2b40d1b189caf259fd" compoundref="d4/df6/_record_output_8cpp" startline="338" endline="338">getUserBufferSize</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a57adc95dceace9f15a5d4525587d346c" compoundref="d4/df6/_record_output_8cpp" startline="211" endline="233">setBuffer</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1ab6c620b4efec082e1a94e8e32794578d" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordOutput::eventCount</definition>
        <argsstring></argsstring>
        <name>eventCount</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of events written to this Record. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="141" column="18" bodyfile="src/libsrc/RecordOutput.h" bodystart="141" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a7c7cbf0f2bcc362662eea1fc4ff5d7ad" compoundref="d4/df6/_record_output_8cpp" startline="841" endline="999">build</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1ab75d3e5ba25945f61f6376f7096dee38" compoundref="d4/df6/_record_output_8cpp" startline="371" endline="371">getEventCount</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1ad8f3cdf93e08051cb9be4e60ec1d7527" compoundref="d4/df6/_record_output_8cpp" startline="449" endline="449">oneTooMany</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a7341c94d383583af26399f12dcedade0" compoundref="d4/df6/_record_output_8cpp" startline="152" endline="182">operator=</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" compoundref="d4/df6/_record_output_8cpp" startline="804" endline="817">reset</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1aa98ea7b099108a9c85b86edf26ac43ba" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordOutput::indexSize</definition>
        <argsstring></argsstring>
        <name>indexSize</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of valid bytes in recordIndex buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Will always be multiple of 4 since indexes are ints. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="145" column="18" bodyfile="src/libsrc/RecordOutput.h" bodystart="145" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a7c7cbf0f2bcc362662eea1fc4ff5d7ad" compoundref="d4/df6/_record_output_8cpp" startline="841" endline="999">build</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1ab8778ded697fc71281c287a2c2f99fa7" compoundref="d4/df6/_record_output_8cpp" startline="346" endline="348">getUncompressedSize</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" compoundref="d4/df6/_record_output_8cpp" startline="804" endline="817">reset</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1afcbb151999c6a2db36dbf06994756e0d" compoundref="d4/df6/_record_output_8cpp" startline="439" endline="442">roomForEvent</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a962e99aa5e7234890e786fb9f4f0cd15" compoundref="d4/df6/_record_output_8cpp" startline="244" endline="251">transferDataForReading</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1ae906482126a5dfdd1cbfcf1ecb93535b" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordOutput::eventSize</definition>
        <argsstring></argsstring>
        <name>eventSize</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of valid bytes in recordEvents buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="148" column="18" bodyfile="src/libsrc/RecordOutput.h" bodystart="148" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a7c7cbf0f2bcc362662eea1fc4ff5d7ad" compoundref="d4/df6/_record_output_8cpp" startline="841" endline="999">build</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1ab8778ded697fc71281c287a2c2f99fa7" compoundref="d4/df6/_record_output_8cpp" startline="346" endline="348">getUncompressedSize</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" compoundref="d4/df6/_record_output_8cpp" startline="804" endline="817">reset</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1afcbb151999c6a2db36dbf06994756e0d" compoundref="d4/df6/_record_output_8cpp" startline="439" endline="442">roomForEvent</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a962e99aa5e7234890e786fb9f4f0cd15" compoundref="d4/df6/_record_output_8cpp" startline="244" endline="251">transferDataForReading</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1a8b3dde2575a40d0b4e2c56a94b1cb3b4" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t evio::RecordOutput::startingPosition</definition>
        <argsstring></argsstring>
        <name>startingPosition</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The starting position of a user-given buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>No data will be written before this position. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="152" column="16" bodyfile="src/libsrc/RecordOutput.h" bodystart="152" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a3308b373e210f9d4cc3f3f1faf50e544" compoundref="d4/df6/_record_output_8cpp" startline="77" endline="118">RecordOutput</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a7c7cbf0f2bcc362662eea1fc4ff5d7ad" compoundref="d4/df6/_record_output_8cpp" startline="841" endline="999">build</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" compoundref="d4/df6/_record_output_8cpp" startline="804" endline="817">reset</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a57adc95dceace9f15a5d4525587d346c" compoundref="d4/df6/_record_output_8cpp" startline="211" endline="233">setBuffer</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1acd8fcf62ec243383f68d558a6924c659" compoundref="d4/df6/_record_output_8cpp" startline="829" endline="832">setStartingBufferPosition</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1ae24b881792676912fb68bbb7aedeab46" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ByteBuffer&gt; evio::RecordOutput::recordIndex</definition>
        <argsstring></argsstring>
        <name>recordIndex</name>
        <briefdescription>
<para>This buffer stores event lengths (in bytes) ONLY. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="155" column="25" bodyfile="src/libsrc/RecordOutput.h" bodystart="155" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a232e28211cd5630b6bb43c8944ffe60e" compoundref="d4/df6/_record_output_8cpp" startline="34" endline="65">RecordOutput</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a7c7cbf0f2bcc362662eea1fc4ff5d7ad" compoundref="d4/df6/_record_output_8cpp" startline="841" endline="999">build</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a9cb6b09fcc422d78385988723a1a0fd5" compoundref="d4/df6/_record_output_8cpp" startline="192" endline="201">operator=</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" compoundref="d4/df6/_record_output_8cpp" startline="804" endline="817">reset</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a962e99aa5e7234890e786fb9f4f0cd15" compoundref="d4/df6/_record_output_8cpp" startline="244" endline="251">transferDataForReading</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1afa654ece2da736e553092de439b7d235" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ByteBuffer&gt; evio::RecordOutput::recordEvents</definition>
        <argsstring></argsstring>
        <name>recordEvents</name>
        <briefdescription>
<para>This buffer stores event data ONLY. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="158" column="25" bodyfile="src/libsrc/RecordOutput.h" bodystart="158" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1ab74c5e86b19c90156972a7b512d91182" compoundref="d4/df6/_record_output_8cpp" startline="127" endline="134">RecordOutput</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a7c7cbf0f2bcc362662eea1fc4ff5d7ad" compoundref="d4/df6/_record_output_8cpp" startline="841" endline="999">build</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a9cb6b09fcc422d78385988723a1a0fd5" compoundref="d4/df6/_record_output_8cpp" startline="192" endline="201">operator=</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" compoundref="d4/df6/_record_output_8cpp" startline="804" endline="817">reset</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a962e99aa5e7234890e786fb9f4f0cd15" compoundref="d4/df6/_record_output_8cpp" startline="244" endline="251">transferDataForReading</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1a4bc61b0568796ba16c957a0c5e8c4f0f" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ByteBuffer&gt; evio::RecordOutput::recordData</definition>
        <argsstring></argsstring>
        <name>recordData</name>
        <briefdescription>
<para>This buffer stores data that will be compressed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="161" column="25" bodyfile="src/libsrc/RecordOutput.h" bodystart="161" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a7c7cbf0f2bcc362662eea1fc4ff5d7ad" compoundref="d4/df6/_record_output_8cpp" startline="841" endline="999">build</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" compoundref="d4/df6/_record_output_8cpp" startline="804" endline="817">reset</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1aa86ac9bc20793c5731b0faa759f923d3" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ByteBuffer&gt; evio::RecordOutput::recordBinary</definition>
        <argsstring></argsstring>
        <name>recordBinary</name>
        <briefdescription>
<para>Buffer in which to put constructed (&amp; compressed) binary record. </para>
        </briefdescription>
        <detaileddescription>
<para>May be provided by user. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="165" column="25" bodyfile="src/libsrc/RecordOutput.h" bodystart="165" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a3308b373e210f9d4cc3f3f1faf50e544" compoundref="d4/df6/_record_output_8cpp" startline="77" endline="118">RecordOutput</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a7c7cbf0f2bcc362662eea1fc4ff5d7ad" compoundref="d4/df6/_record_output_8cpp" startline="841" endline="999">build</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a95a914b8d9c2e5dce9764be14002d8b6" compoundref="d4/df6/_record_output_8cpp" startline="378" endline="378">getBinaryBuffer</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a9cb6b09fcc422d78385988723a1a0fd5" compoundref="d4/df6/_record_output_8cpp" startline="192" endline="201">operator=</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" compoundref="d4/df6/_record_output_8cpp" startline="804" endline="817">reset</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a57adc95dceace9f15a5d4525587d346c" compoundref="d4/df6/_record_output_8cpp" startline="211" endline="233">setBuffer</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1acd8fcf62ec243383f68d558a6924c659" compoundref="d4/df6/_record_output_8cpp" startline="829" endline="832">setStartingBufferPosition</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a962e99aa5e7234890e786fb9f4f0cd15" compoundref="d4/df6/_record_output_8cpp" startline="244" endline="251">transferDataForReading</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1acd299afe38e9276c82339a3a3a931484" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &gt;</type>
        <definition>std::shared_ptr&lt;RecordHeader&gt; evio::RecordOutput::header</definition>
        <argsstring></argsstring>
        <name>header</name>
        <briefdescription>
<para>Header of this Record. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="168" column="25" bodyfile="src/libsrc/RecordOutput.h" bodystart="168" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a232e28211cd5630b6bb43c8944ffe60e" compoundref="d4/df6/_record_output_8cpp" startline="34" endline="65">RecordOutput</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a7c7cbf0f2bcc362662eea1fc4ff5d7ad" compoundref="d4/df6/_record_output_8cpp" startline="841" endline="999">build</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1ae6fc04a6ad40782206a858489d822f74" compoundref="d4/df6/_record_output_8cpp" startline="387" endline="389">getCompressionType</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a3644f5817bd565b0b6a07617da013f27" compoundref="d4/df6/_record_output_8cpp" startline="364" endline="364">getHeader</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1af2894b6e7c23404c74d9f0bc2c602651" compoundref="d4/df6/_record_output_8cpp" startline="398" endline="400">getHeaderType</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" compoundref="d4/df6/_record_output_8cpp" startline="804" endline="817">reset</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1a8bc3bca719406f7b353facd7cfcf2ab4" prot="public" static="no" mutable="no">
        <type><ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref></type>
        <definition>ByteOrder evio::RecordOutput::byteOrder</definition>
        <argsstring></argsstring>
        <name>byteOrder</name>
        <initializer>{<ref refid="da/d7d/classevio_1_1_byte_order_1ae4055f708921d4e6540ab4662d27147c" kindref="member">ByteOrder::ENDIAN_LOCAL</ref>}</initializer>
        <briefdescription>
<para>Byte order of record byte arrays to build. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="171" column="19" bodyfile="src/libsrc/RecordOutput.h" bodystart="171" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a232e28211cd5630b6bb43c8944ffe60e" compoundref="d4/df6/_record_output_8cpp" startline="34" endline="65">RecordOutput</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a7d31fb593c433d6c5be6961a5b43d1da" compoundref="d4/df6/_record_output_8cpp" startline="414" endline="414">getByteOrder</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a57adc95dceace9f15a5d4525587d346c" compoundref="d4/df6/_record_output_8cpp" startline="211" endline="233">setBuffer</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/d7a/classevio_1_1_record_output_1ae2ed1d784e644e8e5cb2ddacbeeff85f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::RecordOutput::userProvidedBuffer</definition>
        <argsstring></argsstring>
        <name>userProvidedBuffer</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Is recordBinary a user provided buffer? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="174" column="14" bodyfile="src/libsrc/RecordOutput.h" bodystart="174" bodyend="-1"/>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a3308b373e210f9d4cc3f3f1faf50e544" compoundref="d4/df6/_record_output_8cpp" startline="77" endline="118">RecordOutput</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a9d2ad711af9a93c78e70a1d4b85f906f" compoundref="d4/df6/_record_output_8cpp" startline="407" endline="407">hasUserProvidedBuffer</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a57adc95dceace9f15a5d4525587d346c" compoundref="d4/df6/_record_output_8cpp" startline="211" endline="233">setBuffer</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1ac8c45b1555c4194aba1425bf36ca8f1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::RecordOutput::RecordOutput</definition>
        <argsstring>()</argsstring>
        <name>RecordOutput</name>
        <briefdescription>
<para>Default, no-arg constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Little endian. No compression. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="180" column="9" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a232e28211cd5630b6bb43c8944ffe60e" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::RecordOutput::RecordOutput</definition>
        <argsstring>(const ByteOrder &amp;order, uint32_t maxEventCount=1000000, uint32_t maxBufferSize=8 *ONE_MEG, Compressor::CompressionType compressionType=Compressor::UNCOMPRESSED, HeaderType hType=HeaderType::EVIO_RECORD)</argsstring>
        <name>RecordOutput</name>
        <param>
          <type>const <ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxEventCount</declname>
          <defval>1000000</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxBufferSize</declname>
          <defval>8 *<ref refid="d2/d7a/classevio_1_1_record_output_1a1c660c90cdcd914312f659e5c775a714" kindref="member">ONE_MEG</ref></defval>
        </param>
        <param>
          <type><ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747" kindref="member">Compressor::CompressionType</ref></type>
          <declname>compressionType</declname>
          <defval><ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747a056585718cbf5c7808c0e37b1f88dbb9" kindref="member">Compressor::UNCOMPRESSED</ref></defval>
        </param>
        <param>
          <type><ref refid="df/dd8/classevio_1_1_header_type" kindref="compound">HeaderType</ref></type>
          <declname>hType</declname>
          <defval><ref refid="df/dd8/classevio_1_1_header_type_1a2b01085c1ea7b23010e4cb4447f2d04a" kindref="member">HeaderType::EVIO_RECORD</ref></defval>
        </param>
        <briefdescription>
<para>Constructor with arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>byte order of built record byte arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxEventCount</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of events this record can hold. Value &lt;= O means use default (1M). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of uncompressed data bytes this record can hold. Value of &lt; 8MB results in default of 8MB. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compressionType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of data compression to do (0=none, 1=lz4 fast, 2=lz4 best, 3=gzip). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of record header to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="182" column="18" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="34" bodyend="65"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1a8bc3bca719406f7b353facd7cfcf2ab4" compoundref="dc/dd3/_record_output_8h" startline="171">byteOrder</references>
        <references refid="df/dd8/classevio_1_1_header_type_1a2b01085c1ea7b23010e4cb4447f2d04a" compoundref="d5/d98/_header_type_8h" startline="36">evio::HeaderType::EVIO_RECORD</references>
        <references refid="df/dd8/classevio_1_1_header_type_1a52318a195f72f967b67e24a45ca8358b" compoundref="d5/d98/_header_type_8h" startline="39">evio::HeaderType::EVIO_TRAILER</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1acd299afe38e9276c82339a3a3a931484" compoundref="dc/dd3/_record_output_8h" startline="168">header</references>
        <references refid="df/dd8/classevio_1_1_header_type_1a5b2643dccfbe51c3f437423ebaf3ebfd" compoundref="d5/d98/_header_type_8h" startline="40">evio::HeaderType::HIPO_RECORD</references>
        <references refid="df/dd8/classevio_1_1_header_type_1a5949c8d28f54527e8616666c03aa0ff7" compoundref="d5/d98/_header_type_8h" startline="43">evio::HeaderType::HIPO_TRAILER</references>
        <references refid="df/dd8/classevio_1_1_header_type_1a4cadc344afbb1083c81b026e4b54d7d8" compoundref="d5/d98/_header_type_8h" startline="88" endline="88">evio::HeaderType::isEvioFileHeader</references>
        <references refid="df/dd8/classevio_1_1_header_type_1a09398c15ab070c47fd4b9963d668fab6" compoundref="d5/d98/_header_type_8h" startline="94" endline="94">evio::HeaderType::isHipoFileHeader</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a3f4d7b9042307cbe6e3a223a6c374479" compoundref="dc/dd3/_record_output_8h" startline="124">MAX_BUFFER_SIZE</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a4a96554c0eed9a1844c799ae2e8e6535" compoundref="dc/dd3/_record_output_8h" startline="113">MAX_EVENT_COUNT</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ad7121a345c5f6ba668983660e8158919" compoundref="dc/dd3/_record_output_8h" startline="133">RECORD_BUFFER_SIZE</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae24b881792676912fb68bbb7aedeab46" compoundref="dc/dd3/_record_output_8h" startline="155">recordIndex</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a3308b373e210f9d4cc3f3f1faf50e544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::RecordOutput::RecordOutput</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buffer, uint32_t maxEventCount, Compressor::CompressionType compressionType, HeaderType hType)</argsstring>
        <name>RecordOutput</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxEventCount</declname>
        </param>
        <param>
          <type><ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747" kindref="member">Compressor::CompressionType</ref></type>
          <declname>compressionType</declname>
        </param>
        <param>
          <type><ref refid="df/dd8/classevio_1_1_header_type" kindref="compound">HeaderType</ref></type>
          <declname>hType</declname>
        </param>
        <briefdescription>
<para>Constructor with arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer in which to put constructed (&amp; compressed) binary record. Must have position and limit set to accept new data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxEventCount</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of events this record can hold. Value &lt;= O means use default (1M). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compressionType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of data compression to do (0=none, 1=lz4 fast, 2=lz4 best, 3=gzip). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of record header to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="188" column="9" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="77" bodyend="118"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1a8bc3bca719406f7b353facd7cfcf2ab4" compoundref="dc/dd3/_record_output_8h" startline="171">byteOrder</references>
        <references refid="df/dd8/classevio_1_1_header_type_1a2b01085c1ea7b23010e4cb4447f2d04a" compoundref="d5/d98/_header_type_8h" startline="36">evio::HeaderType::EVIO_RECORD</references>
        <references refid="df/dd8/classevio_1_1_header_type_1a52318a195f72f967b67e24a45ca8358b" compoundref="d5/d98/_header_type_8h" startline="39">evio::HeaderType::EVIO_TRAILER</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1acd299afe38e9276c82339a3a3a931484" compoundref="dc/dd3/_record_output_8h" startline="168">header</references>
        <references refid="df/dd8/classevio_1_1_header_type_1a5b2643dccfbe51c3f437423ebaf3ebfd" compoundref="d5/d98/_header_type_8h" startline="40">evio::HeaderType::HIPO_RECORD</references>
        <references refid="df/dd8/classevio_1_1_header_type_1a5949c8d28f54527e8616666c03aa0ff7" compoundref="d5/d98/_header_type_8h" startline="43">evio::HeaderType::HIPO_TRAILER</references>
        <references refid="df/dd8/classevio_1_1_header_type_1a4cadc344afbb1083c81b026e4b54d7d8" compoundref="d5/d98/_header_type_8h" startline="88" endline="88">evio::HeaderType::isEvioFileHeader</references>
        <references refid="df/dd8/classevio_1_1_header_type_1a09398c15ab070c47fd4b9963d668fab6" compoundref="d5/d98/_header_type_8h" startline="94" endline="94">evio::HeaderType::isHipoFileHeader</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a3f4d7b9042307cbe6e3a223a6c374479" compoundref="dc/dd3/_record_output_8h" startline="124">MAX_BUFFER_SIZE</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a4a96554c0eed9a1844c799ae2e8e6535" compoundref="dc/dd3/_record_output_8h" startline="113">MAX_EVENT_COUNT</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ad7121a345c5f6ba668983660e8158919" compoundref="dc/dd3/_record_output_8h" startline="133">RECORD_BUFFER_SIZE</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa86ac9bc20793c5731b0faa759f923d3" compoundref="dc/dd3/_record_output_8h" startline="165">recordBinary</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae24b881792676912fb68bbb7aedeab46" compoundref="dc/dd3/_record_output_8h" startline="155">recordIndex</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a8b3dde2575a40d0b4e2c56a94b1cb3b4" compoundref="dc/dd3/_record_output_8h" startline="152">startingPosition</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a96a02d6c411124b2c06ac1b302acc870" compoundref="dc/dd3/_record_output_8h" startline="138">userBufferSize</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae2ed1d784e644e8e5cb2ddacbeeff85f" compoundref="dc/dd3/_record_output_8h" startline="174">userProvidedBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1ab74c5e86b19c90156972a7b512d91182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::RecordOutput::RecordOutput</definition>
        <argsstring>(const RecordOutput &amp;srcRec)</argsstring>
        <name>RecordOutput</name>
        <param>
          <type>const <ref refid="d2/d7a/classevio_1_1_record_output" kindref="compound">RecordOutput</ref> &amp;</type>
          <declname>srcRec</declname>
          <defname>rec</defname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rec</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d2/d7a/classevio_1_1_record_output" kindref="compound">RecordOutput</ref> to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if trying to copy bigger record and internal buffer was provided by user. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="191" column="9" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="127" bodyend="134"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa86ac9bc20793c5731b0faa759f923d3" compoundref="dc/dd3/_record_output_8h" startline="165">recordBinary</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1afa654ece2da736e553092de439b7d235" compoundref="dc/dd3/_record_output_8h" startline="158">recordEvents</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae24b881792676912fb68bbb7aedeab46" compoundref="dc/dd3/_record_output_8h" startline="155">recordIndex</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a2437148cfd6aba94169e6ca016aa2443" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>evio::RecordOutput::RecordOutput</definition>
        <argsstring>(RecordOutput &amp;&amp;srcBuf) noexcept</argsstring>
        <name>RecordOutput</name>
        <param>
          <type><ref refid="d2/d7a/classevio_1_1_record_output" kindref="compound">RecordOutput</ref> &amp;&amp;</type>
          <declname>srcBuf</declname>
          <defname>rec</defname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rec</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d2/d7a/classevio_1_1_record_output" kindref="compound">RecordOutput</ref> object to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="192" column="9" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a7341c94d383583af26399f12dcedade0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="d2/d7a/classevio_1_1_record_output" kindref="compound">RecordOutput</ref> &amp;</type>
        <definition>RecordOutput &amp; evio::RecordOutput::operator=</definition>
        <argsstring>(RecordOutput &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="d2/d7a/classevio_1_1_record_output" kindref="compound">RecordOutput</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>right side object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>left side object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="194" column="23" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="152" bodyend="182"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1ab6c620b4efec082e1a94e8e32794578d" compoundref="dc/dd3/_record_output_8h" startline="141">eventCount</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a9cb6b09fcc422d78385988723a1a0fd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d7a/classevio_1_1_record_output" kindref="compound">RecordOutput</ref> &amp;</type>
        <definition>RecordOutput &amp; evio::RecordOutput::operator=</definition>
        <argsstring>(const RecordOutput &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="d2/d7a/classevio_1_1_record_output" kindref="compound">RecordOutput</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>right side object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>left side object. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if trying to copy bigger record and internal buffer was provided by user. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="195" column="23" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="192" bodyend="201"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa86ac9bc20793c5731b0faa759f923d3" compoundref="dc/dd3/_record_output_8h" startline="165">recordBinary</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1afa654ece2da736e553092de439b7d235" compoundref="dc/dd3/_record_output_8h" startline="158">recordEvents</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae24b881792676912fb68bbb7aedeab46" compoundref="dc/dd3/_record_output_8h" startline="155">recordIndex</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1aeb9a1c12d7e3f84572644adaec37eabe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::RecordOutput::~RecordOutput</definition>
        <argsstring>()=default</argsstring>
        <name>~RecordOutput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="197" column="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a57adc95dceace9f15a5d4525587d346c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordOutput::setBuffer</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buf)</argsstring>
        <name>setBuffer</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Reset internal buffers and set the buffer in which to build this record. </para>
        </briefdescription>
        <detaileddescription>
<para>The given buffer should be made ready to receive new data by setting its position and limit properly. Its byte order is set to the same as this writer&apos;s. The argument <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> can be retrieved by calling <ref refid="d2/d7a/classevio_1_1_record_output_1a95a914b8d9c2e5dce9764be14002d8b6" kindref="member">getBinaryBuffer()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer in which to build this record. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="211" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="211" bodyend="233"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1a8bc3bca719406f7b353facd7cfcf2ab4" compoundref="dc/dd3/_record_output_8h" startline="171">byteOrder</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a3f4d7b9042307cbe6e3a223a6c374479" compoundref="dc/dd3/_record_output_8h" startline="124">MAX_BUFFER_SIZE</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ad7121a345c5f6ba668983660e8158919" compoundref="dc/dd3/_record_output_8h" startline="133">RECORD_BUFFER_SIZE</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa86ac9bc20793c5731b0faa759f923d3" compoundref="dc/dd3/_record_output_8h" startline="165">recordBinary</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" compoundref="d4/df6/_record_output_8cpp" startline="804" endline="817">reset</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a8b3dde2575a40d0b4e2c56a94b1cb3b4" compoundref="dc/dd3/_record_output_8h" startline="152">startingPosition</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a96a02d6c411124b2c06ac1b302acc870" compoundref="dc/dd3/_record_output_8h" startline="138">userBufferSize</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae2ed1d784e644e8e5cb2ddacbeeff85f" compoundref="dc/dd3/_record_output_8h" startline="174">userProvidedBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a962e99aa5e7234890e786fb9f4f0cd15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordOutput::transferDataForReading</definition>
        <argsstring>(const RecordOutput &amp;rec)</argsstring>
        <name>transferDataForReading</name>
        <param>
          <type>const <ref refid="d2/d7a/classevio_1_1_record_output" kindref="compound">RecordOutput</ref> &amp;</type>
          <declname>rec</declname>
        </param>
        <briefdescription>
<para>Copy the contents of the arg into this object and get data buffer ready for reading. </para>
        </briefdescription>
        <detaileddescription>
<para>If the arg has more data than will fit, increase buffer sizes. If the arg has more events than our allowed max, increase the max. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rec</parametername>
</parameternamelist>
<parameterdescription>
<para>object to copy, must be ready to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if we cannot replace internal buffer if it needs to be expanded since it was provided by the user. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="212" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="244" bodyend="251"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae906482126a5dfdd1cbfcf1ecb93535b" compoundref="dc/dd3/_record_output_8h" startline="148">eventSize</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa98ea7b099108a9c85b86edf26ac43ba" compoundref="dc/dd3/_record_output_8h" startline="145">indexSize</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa86ac9bc20793c5731b0faa759f923d3" compoundref="dc/dd3/_record_output_8h" startline="165">recordBinary</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1afa654ece2da736e553092de439b7d235" compoundref="dc/dd3/_record_output_8h" startline="158">recordEvents</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae24b881792676912fb68bbb7aedeab46" compoundref="dc/dd3/_record_output_8h" startline="155">recordIndex</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a0a75729eb429ff2b40d1b189caf259fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordOutput::getUserBufferSize</definition>
        <argsstring>() const</argsstring>
        <name>getUserBufferSize</name>
        <briefdescription>
<para>Get the number of initially available bytes to be written into in the user-given buffer, that goes from position to limit. </para>
        </briefdescription>
        <detaileddescription>
<para>The user-given buffer is referenced by recordBinary. <simplesect kind="return"><para>umber of initially available bytes to be written into in the user-given buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="214" column="18" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="338" bodyend="338"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1a96a02d6c411124b2c06ac1b302acc870" compoundref="dc/dd3/_record_output_8h" startline="138">userBufferSize</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1ab8778ded697fc71281c287a2c2f99fa7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordOutput::getUncompressedSize</definition>
        <argsstring>() const</argsstring>
        <name>getUncompressedSize</name>
        <briefdescription>
<para>Get the current uncompressed size of the record in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>This does NOT count any user header. <simplesect kind="return"><para>current uncompressed size of the record in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="215" column="18" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="346" bodyend="348"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae906482126a5dfdd1cbfcf1ecb93535b" compoundref="dc/dd3/_record_output_8h" startline="148">eventSize</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a0e09d731589bcfe2705d0c606192f6eb" compoundref="d6/dea/_record_header_8h" startline="127">evio::RecordHeader::HEADER_SIZE_BYTES</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa98ea7b099108a9c85b86edf26ac43ba" compoundref="dc/dd3/_record_output_8h" startline="145">indexSize</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1acbb92327f0cf806b7b87b0b20336b05f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordOutput::getInternalBufferCapacity</definition>
        <argsstring>() const</argsstring>
        <name>getInternalBufferCapacity</name>
        <briefdescription>
<para>Get the capacity of the internal buffer in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the upper limit of the memory needed to store this uncompressed record. <simplesect kind="return"><para>capacity of the internal buffer in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="216" column="18" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="357" bodyend="357"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1a3f4d7b9042307cbe6e3a223a6c374479" compoundref="dc/dd3/_record_output_8h" startline="124">MAX_BUFFER_SIZE</references>
        <referencedby refid="d6/dca/classevio_1_1_writer_1acaf968c34f10e8004994a91175e5a829" compoundref="dc/d0e/_writer_8cpp" startline="618" endline="669">evio::Writer::createRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a8818ee6b0a69abc6c5fdbec1ca899cee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordOutput::getMaxEventCount</definition>
        <argsstring>() const</argsstring>
        <name>getMaxEventCount</name>
        <briefdescription>
<para>Get the maximum number of events allowed in this record. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>maximum number of events allowed in this record. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="217" column="18" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="330" bodyend="330"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1a4a96554c0eed9a1844c799ae2e8e6535" compoundref="dc/dd3/_record_output_8h" startline="113">MAX_EVENT_COUNT</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1ab75d3e5ba25945f61f6376f7096dee38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordOutput::getEventCount</definition>
        <argsstring>() const</argsstring>
        <name>getEventCount</name>
        <briefdescription>
<para>Get the number of events written so far into the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of events written so far into the buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="218" column="18" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="371" bodyend="371"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1ab6c620b4efec082e1a94e8e32794578d" compoundref="dc/dd3/_record_output_8h" startline="141">eventCount</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a3644f5817bd565b0b6a07617da013f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &gt; &amp;</type>
        <definition>std::shared_ptr&lt; RecordHeader &gt; &amp; evio::RecordOutput::getHeader</definition>
        <argsstring>()</argsstring>
        <name>getHeader</name>
        <briefdescription>
<para>Get the general header of this record. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>general header of this record. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="220" column="26" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="364" bodyend="364"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1acd299afe38e9276c82339a3a3a931484" compoundref="dc/dd3/_record_output_8h" startline="168">header</references>
        <referencedby refid="d6/dca/classevio_1_1_writer_1a0d0f549a6ceaae794eca73130957a23d" compoundref="dc/d0e/_writer_8cpp" startline="953" endline="997">evio::Writer::writeRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a7d31fb593c433d6c5be6961a5b43d1da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
        <definition>const ByteOrder &amp; evio::RecordOutput::getByteOrder</definition>
        <argsstring>() const</argsstring>
        <name>getByteOrder</name>
        <briefdescription>
<para>Get the byte order of the record to be built. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>byte order of the record to be built. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="221" column="26" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="414" bodyend="414"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1a8bc3bca719406f7b353facd7cfcf2ab4" compoundref="dc/dd3/_record_output_8h" startline="171">byteOrder</references>
        <referencedby refid="d6/dca/classevio_1_1_writer_1a0d0f549a6ceaae794eca73130957a23d" compoundref="dc/d0e/_writer_8cpp" startline="953" endline="997">evio::Writer::writeRecord</referencedby>
        <referencedby refid="d1/d17/classevio_1_1_writer_m_t_1a9185ec115b3b04111345b53c7fa64190" compoundref="d9/d77/_writer_m_t_8cpp" startline="523" endline="550">evio::WriterMT::writeRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a95a914b8d9c2e5dce9764be14002d8b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>const std::shared_ptr&lt; ByteBuffer &gt; evio::RecordOutput::getBinaryBuffer</definition>
        <argsstring>() const</argsstring>
        <name>getBinaryBuffer</name>
        <briefdescription>
<para>Get the internal <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> used to construct binary representation of this record. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>internal <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> used to construct binary representation of this record. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="222" column="31" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="378" bodyend="378"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa86ac9bc20793c5731b0faa759f923d3" compoundref="dc/dd3/_record_output_8h" startline="165">recordBinary</references>
        <referencedby refid="d6/dca/classevio_1_1_writer_1acaf968c34f10e8004994a91175e5a829" compoundref="dc/d0e/_writer_8cpp" startline="618" endline="669">evio::Writer::createRecord</referencedby>
        <referencedby refid="d6/dca/classevio_1_1_writer_1a0d0f549a6ceaae794eca73130957a23d" compoundref="dc/d0e/_writer_8cpp" startline="953" endline="997">evio::Writer::writeRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1ae6fc04a6ad40782206a858489d822f74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747" kindref="member">Compressor::CompressionType</ref></type>
        <definition>const Compressor::CompressionType evio::RecordOutput::getCompressionType</definition>
        <argsstring>() const</argsstring>
        <name>getCompressionType</name>
        <briefdescription>
<para>Get the compression type of the contained record. </para>
        </briefdescription>
        <detaileddescription>
<para>Implemented to allow &quot;const&quot; in <ref refid="db/dc8/classevio_1_1_record_ring_item" kindref="compound">RecordRingItem</ref> equal operator and copy constructor. <simplesect kind="return"><para>compression type of the contained record. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="223" column="43" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="387" bodyend="389"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1acd299afe38e9276c82339a3a3a931484" compoundref="dc/dd3/_record_output_8h" startline="168">header</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1af2894b6e7c23404c74d9f0bc2c602651" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="df/dd8/classevio_1_1_header_type" kindref="compound">HeaderType</ref></type>
        <definition>const HeaderType evio::RecordOutput::getHeaderType</definition>
        <argsstring>() const</argsstring>
        <name>getHeaderType</name>
        <briefdescription>
<para>Get the header type of the contained record. </para>
        </briefdescription>
        <detaileddescription>
<para>Implemented to allow &quot;const&quot; in <ref refid="db/dc8/classevio_1_1_record_ring_item" kindref="compound">RecordRingItem</ref> equal operator and copy constructor. <simplesect kind="return"><para>compression type of the contained record. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="224" column="26" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="398" bodyend="400"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1acd299afe38e9276c82339a3a3a931484" compoundref="dc/dd3/_record_output_8h" startline="168">header</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a9d2ad711af9a93c78e70a1d4b85f906f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordOutput::hasUserProvidedBuffer</definition>
        <argsstring>() const</argsstring>
        <name>hasUserProvidedBuffer</name>
        <briefdescription>
<para>Was the internal buffer provided by the user? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if internal buffer provided by user. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="226" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="407" bodyend="407"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae2ed1d784e644e8e5cb2ddacbeeff85f" compoundref="dc/dd3/_record_output_8h" startline="174">userProvidedBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1afcbb151999c6a2db36dbf06994756e0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordOutput::roomForEvent</definition>
        <argsstring>(uint32_t length) const</argsstring>
        <name>roomForEvent</name>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Is there room in this record&apos;s memory for an additional event of the given length in bytes (length NOT including accompanying index). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of data to add in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><programlisting><codeline><highlight class="normal">true<sp/></highlight></codeline>
</programlisting> if room in record, else<programlisting><codeline><highlight class="normal">false<sp/></highlight></codeline>
</programlisting> . </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="227" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="439" bodyend="442"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae906482126a5dfdd1cbfcf1ecb93535b" compoundref="dc/dd3/_record_output_8h" startline="148">eventSize</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a0e09d731589bcfe2705d0c606192f6eb" compoundref="d6/dea/_record_header_8h" startline="127">evio::RecordHeader::HEADER_SIZE_BYTES</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa98ea7b099108a9c85b86edf26ac43ba" compoundref="dc/dd3/_record_output_8h" startline="145">indexSize</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a3f4d7b9042307cbe6e3a223a6c374479" compoundref="dc/dd3/_record_output_8h" startline="124">MAX_BUFFER_SIZE</references>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1ad8f3cdf93e08051cb9be4e60ec1d7527" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordOutput::oneTooMany</definition>
        <argsstring>() const</argsstring>
        <name>oneTooMany</name>
        <briefdescription>
<para>Does adding one more event exceed the event count limit? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><programlisting><codeline><highlight class="normal">true<sp/></highlight></codeline>
</programlisting> if one more event exceeds count limit, else<programlisting><codeline><highlight class="normal">false<sp/></highlight></codeline>
</programlisting> . </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="228" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="449" bodyend="449"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1ab6c620b4efec082e1a94e8e32794578d" compoundref="dc/dd3/_record_output_8h" startline="141">eventCount</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a4a96554c0eed9a1844c799ae2e8e6535" compoundref="dc/dd3/_record_output_8h" startline="113">MAX_EVENT_COUNT</references>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordOutput::addEvent</definition>
        <argsstring>(const uint8_t *event, uint32_t eventLen, uint32_t extraDataLen=0)</argsstring>
        <name>addEvent</name>
        <param>
          <type>const uint8_t *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>eventLen</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>extraDataLen</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Adds an event&apos;s <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> into the record. </para>
        </briefdescription>
        <detaileddescription>
<para>Can specify the length of additional data to follow the event (such as an evio trailer record) to see if by adding this event everything will fit in the available memory.</para>
<para>If a single event is too large for the internal buffers, more memory is allocated. On the other hand, if the buffer was provided by the user, then obviously the buffer cannot be expanded and false is returned.</para>
<para><bold>The byte order of event must match the byte order given in constructor!</bold></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>event&apos;s byte array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventLen</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes from byte array to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extraDataLen</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data bytes to follow event (e.g. trailer length). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if event was added; false if the event was not added because the count limit would be exceeded or the buffer is full and cannot be expanded since it&apos;s user-provided. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="230" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="482" bodyend="515"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1ab6c620b4efec082e1a94e8e32794578d" compoundref="dc/dd3/_record_output_8h" startline="141">eventCount</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae906482126a5dfdd1cbfcf1ecb93535b" compoundref="dc/dd3/_record_output_8h" startline="148">eventSize</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa98ea7b099108a9c85b86edf26ac43ba" compoundref="dc/dd3/_record_output_8h" startline="145">indexSize</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a3f4d7b9042307cbe6e3a223a6c374479" compoundref="dc/dd3/_record_output_8h" startline="124">MAX_BUFFER_SIZE</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a1c660c90cdcd914312f659e5c775a714" compoundref="dc/dd3/_record_output_8h" startline="110">ONE_MEG</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ad8f3cdf93e08051cb9be4e60ec1d7527" compoundref="d4/df6/_record_output_8cpp" startline="449" endline="449">oneTooMany</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ad7121a345c5f6ba668983660e8158919" compoundref="dc/dd3/_record_output_8h" startline="133">RECORD_BUFFER_SIZE</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1afa654ece2da736e553092de439b7d235" compoundref="dc/dd3/_record_output_8h" startline="158">recordEvents</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae24b881792676912fb68bbb7aedeab46" compoundref="dc/dd3/_record_output_8h" startline="155">recordIndex</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" compoundref="d4/df6/_record_output_8cpp" startline="804" endline="817">reset</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1afcbb151999c6a2db36dbf06994756e0d" compoundref="d4/df6/_record_output_8cpp" startline="439" endline="442">roomForEvent</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae2ed1d784e644e8e5cb2ddacbeeff85f" compoundref="dc/dd3/_record_output_8h" startline="174">userProvidedBuffer</references>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1abcaf71b5a5034077688abf666da31653" compoundref="d4/df6/_record_output_8cpp" startline="532" endline="534">addEvent</referencedby>
        <referencedby refid="d6/dca/classevio_1_1_writer_1acaf968c34f10e8004994a91175e5a829" compoundref="dc/d0e/_writer_8cpp" startline="618" endline="669">evio::Writer::createRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1abcaf71b5a5034077688abf666da31653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordOutput::addEvent</definition>
        <argsstring>(const std::vector&lt; uint8_t &gt; &amp;event)</argsstring>
        <name>addEvent</name>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Adds an event&apos;s <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> into the record. </para>
        </briefdescription>
        <detaileddescription>
<para>If a single event is too large for the internal buffers, more memory is allocated. On the other hand, if the buffer was provided by the user, then obviously the buffer cannot be expanded and false is returned.</para>
<para><bold>The byte order of event must match the byte order given in constructor!</bold></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>event&apos;s data in vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if event was added; false if the event was not added because the count limit would be exceeded or the buffer is full and cannot be expanded since it&apos;s user-provided. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="232" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="532" bodyend="534"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1ab82fdc44fa2eafa3b54a8c76f4ccd018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordOutput::addEvent</definition>
        <argsstring>(const std::vector&lt; uint8_t &gt; &amp;event, size_t offset, uint32_t eventLen, uint32_t extraDataLen=0)</argsstring>
        <name>addEvent</name>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>eventLen</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>extraDataLen</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Adds an event&apos;s <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> into the record. </para>
        </briefdescription>
        <detaileddescription>
<para>Can specify the length of additional data to follow the event (such as an evio trailer record) to see if by adding this event everything will fit in the available memory.</para>
<para>If a single event is too large for the internal buffers, more memory is allocated. On the other hand, if the buffer was provided by the user, then obviously the buffer cannot be expanded and false is returned.</para>
<para><bold>The byte order of event must match the byte order given in constructor!</bold></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>event&apos;s data in vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset into vector&apos;s elements from which to begin reading. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventLen</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes from vector to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extraDataLen</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data bytes to follow event (e.g. trailer length). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if event was added; false if the event was not added because the count limit would be exceeded or the buffer is full and cannot be expanded since it&apos;s user-provided. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="233" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="557" bodyend="559"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1aa6b6ad449487f4ed9305e3d6b75f7277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordOutput::addEvent</definition>
        <argsstring>(const ByteBuffer &amp;event, uint32_t extraDataLen=0)</argsstring>
        <name>addEvent</name>
        <param>
          <type>const <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>extraDataLen</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Adds an event&apos;s <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> into the record. </para>
        </briefdescription>
        <detaileddescription>
<para>Can specify the length of additional data to follow the event (such as an evio trailer record) to see if by adding this event everything will fit in the available memory.</para>
<para>If a single event is too large for the internal buffers, more memory is allocated. On the other hand, if the buffer was provided by the user, then obviously the buffer cannot be expanded and false is returned.</para>
<para><bold>The byte order of event must match the byte order given in constructor!</bold></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>event&apos;s <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extraDataLen</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data bytes to follow event (e.g. trailer length). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if event was added; false if the event was not added because the count limit would be exceeded or the buffer is full and cannot be expanded since it&apos;s user-provided. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="235" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="579" bodyend="614"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1aa0e335238a57eaa0bffee8f968e5995f" compoundref="d4/d6c/_byte_buffer_8cpp" startline="475" endline="475">evio::ByteBuffer::array</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1abf7abf99aa7544601997f40eba298648" compoundref="d4/d6c/_byte_buffer_8cpp" startline="490" endline="490">evio::ByteBuffer::arrayOffset</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ab6c620b4efec082e1a94e8e32794578d" compoundref="dc/dd3/_record_output_8h" startline="141">eventCount</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae906482126a5dfdd1cbfcf1ecb93535b" compoundref="dc/dd3/_record_output_8h" startline="148">eventSize</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa98ea7b099108a9c85b86edf26ac43ba" compoundref="dc/dd3/_record_output_8h" startline="145">indexSize</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a3f4d7b9042307cbe6e3a223a6c374479" compoundref="dc/dd3/_record_output_8h" startline="124">MAX_BUFFER_SIZE</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a1c660c90cdcd914312f659e5c775a714" compoundref="dc/dd3/_record_output_8h" startline="110">ONE_MEG</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ad8f3cdf93e08051cb9be4e60ec1d7527" compoundref="d4/df6/_record_output_8cpp" startline="449" endline="449">oneTooMany</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a88f84e6b1757db70542eac13294fc80e" compoundref="d4/d6c/_byte_buffer_8cpp" startline="518" endline="518">evio::ByteBuffer::position</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ad7121a345c5f6ba668983660e8158919" compoundref="dc/dd3/_record_output_8h" startline="133">RECORD_BUFFER_SIZE</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1afa654ece2da736e553092de439b7d235" compoundref="dc/dd3/_record_output_8h" startline="158">recordEvents</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae24b881792676912fb68bbb7aedeab46" compoundref="dc/dd3/_record_output_8h" startline="155">recordIndex</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" compoundref="d4/df6/_record_output_8cpp" startline="804" endline="817">reset</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1afcbb151999c6a2db36dbf06994756e0d" compoundref="d4/df6/_record_output_8cpp" startline="439" endline="442">roomForEvent</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae2ed1d784e644e8e5cb2ddacbeeff85f" compoundref="dc/dd3/_record_output_8h" startline="174">userProvidedBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a2625d56532619d8f027214de68e097d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordOutput::addEvent</definition>
        <argsstring>(const std::shared_ptr&lt; ByteBuffer &gt; &amp;event, uint32_t extraDataLen=0)</argsstring>
        <name>addEvent</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>extraDataLen</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Adds an event&apos;s <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> into the record. </para>
        </briefdescription>
        <detaileddescription>
<para>Can specify the length of additional data to follow the event (such as an evio trailer record) to see if by adding this event everything will fit in the available memory.</para>
<para>If a single event is too large for the internal buffers, more memory is allocated. On the other hand, if the buffer was provided by the user, then obviously the buffer cannot be expanded and false is returned.</para>
<para><bold>The byte order of event must match the byte order given in constructor!</bold></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>event&apos;s <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extraDataLen</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data bytes to follow event (e.g. trailer length). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if event was added; false if the event was not added because the count limit would be exceeded or the buffer is full and cannot be expanded since it&apos;s user-provided. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="236" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="634" bodyend="636"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a82938baf95da3faf5345af0a3a19c781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordOutput::addEvent</definition>
        <argsstring>(EvioNode &amp;node, uint32_t extraDataLen=0)</argsstring>
        <name>addEvent</name>
        <param>
          <type><ref refid="de/dd0/classevio_1_1_evio_node" kindref="compound">EvioNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>extraDataLen</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Adds an event&apos;s <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> into the record. </para>
        </briefdescription>
        <detaileddescription>
<para>Can specify the length of additional data to follow the event (such as an evio trailer record) to see if by adding this event everything will fit in the available memory.</para>
<para>If a single event is too large for the internal buffers, more memory is allocated. On the other hand, if the buffer was provided by the user, then obviously the buffer cannot be expanded and false is returned.</para>
<para><bold>The byte order of event must match the byte order given in constructor!</bold> This method is not thread-safe with respect to the node as it&apos;s backing <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref>&apos;s limit and position may be concurrently changed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>event&apos;s <ref refid="de/dd0/classevio_1_1_evio_node" kindref="compound">EvioNode</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extraDataLen</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data bytes to follow event (e.g. trailer length). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if event was added; false if the event was not added because the count limit would be exceeded or the buffer is full and cannot be expanded since it&apos;s user-provided. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if node does not correspond to a bank. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="238" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="659" bodyend="700"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1aa0e335238a57eaa0bffee8f968e5995f" compoundref="d4/d6c/_byte_buffer_8cpp" startline="475" endline="475">evio::ByteBuffer::array</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1abf7abf99aa7544601997f40eba298648" compoundref="d4/d6c/_byte_buffer_8cpp" startline="490" endline="490">evio::ByteBuffer::arrayOffset</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ab6c620b4efec082e1a94e8e32794578d" compoundref="dc/dd3/_record_output_8h" startline="141">eventCount</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae906482126a5dfdd1cbfcf1ecb93535b" compoundref="dc/dd3/_record_output_8h" startline="148">eventSize</references>
        <references refid="de/dd0/classevio_1_1_evio_node_1ae06a088063f64405e6e955952d062264" compoundref="d9/d45/_evio_node_8cpp" startline="1237" endline="1247">evio::EvioNode::getStructureBuffer</references>
        <references refid="de/dd0/classevio_1_1_evio_node_1a877b920f8610559a3ed7b704f9e82992" compoundref="d9/d45/_evio_node_8cpp" startline="870" endline="870">evio::EvioNode::getTotalBytes</references>
        <references refid="de/dd0/classevio_1_1_evio_node_1a8fcdbb769e77c2ceb6127953dc3056ee" compoundref="d9/d45/_evio_node_8cpp" startline="910" endline="910">evio::EvioNode::getTypeObj</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa98ea7b099108a9c85b86edf26ac43ba" compoundref="dc/dd3/_record_output_8h" startline="145">indexSize</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a43fa2881329c62cf42020bbc9b786106" compoundref="db/da7/_data_type_8h" startline="150" endline="152">evio::DataType::isBank</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a3f4d7b9042307cbe6e3a223a6c374479" compoundref="dc/dd3/_record_output_8h" startline="124">MAX_BUFFER_SIZE</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a1c660c90cdcd914312f659e5c775a714" compoundref="dc/dd3/_record_output_8h" startline="110">ONE_MEG</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ad8f3cdf93e08051cb9be4e60ec1d7527" compoundref="d4/df6/_record_output_8cpp" startline="449" endline="449">oneTooMany</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a88f84e6b1757db70542eac13294fc80e" compoundref="d4/d6c/_byte_buffer_8cpp" startline="518" endline="518">evio::ByteBuffer::position</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ad7121a345c5f6ba668983660e8158919" compoundref="dc/dd3/_record_output_8h" startline="133">RECORD_BUFFER_SIZE</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1afa654ece2da736e553092de439b7d235" compoundref="dc/dd3/_record_output_8h" startline="158">recordEvents</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae24b881792676912fb68bbb7aedeab46" compoundref="dc/dd3/_record_output_8h" startline="155">recordIndex</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" compoundref="d4/df6/_record_output_8cpp" startline="804" endline="817">reset</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1afcbb151999c6a2db36dbf06994756e0d" compoundref="d4/df6/_record_output_8cpp" startline="439" endline="442">roomForEvent</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a4b55bfb1a25acc690c9456f0869c4b49" compoundref="db/da7/_data_type_8h" startline="193" endline="197">evio::DataType::toString</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae2ed1d784e644e8e5cb2ddacbeeff85f" compoundref="dc/dd3/_record_output_8h" startline="174">userProvidedBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a93aa61e8347a47378ecbf1cb1510cc5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordOutput::addEvent</definition>
        <argsstring>(std::shared_ptr&lt; EvioNode &gt; &amp;node, uint32_t extraDataLen=0)</argsstring>
        <name>addEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/dd0/classevio_1_1_evio_node" kindref="compound">EvioNode</ref> &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>extraDataLen</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Adds an event&apos;s <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> into the record. </para>
        </briefdescription>
        <detaileddescription>
<para>Can specify the length of additional data to follow the event (such as an evio trailer record) to see if by adding this event everything will fit in the available memory.</para>
<para>If a single event is too large for the internal buffers, more memory is allocated. On the other hand, if the buffer was provided by the user, then obviously the buffer cannot be expanded and false is returned.</para>
<para><bold>The byte order of event must match the byte order given in constructor!</bold> This method is not thread-safe with respect to the node as it&apos;s backing <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref>&apos;s limit and position may be concurrently changed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>event&apos;s <ref refid="de/dd0/classevio_1_1_evio_node" kindref="compound">EvioNode</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extraDataLen</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data bytes to follow event (e.g. trailer length). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if event was added; false if the event was not added because the count limit would be exceeded or the buffer is full and cannot be expanded since it&apos;s user-provided. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if node does not correspond to a bank. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="239" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="723" bodyend="725"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1ae543847b42a7e97894d747a254c3a6c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordOutput::addEvent</definition>
        <argsstring>(EvioBank &amp;event, uint32_t extraDataLen)</argsstring>
        <name>addEvent</name>
        <param>
          <type><ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>extraDataLen</declname>
        </param>
        <briefdescription>
<para>Adds an event&apos;s <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> into the record. </para>
        </briefdescription>
        <detaileddescription>
<para>Can specify the length of additional data to follow the event (such as an evio trailer record) to see if by adding this event everything will fit in the available memory.</para>
<para>If a single event is too large for the internal buffers, more memory is allocated. On the other hand, if the buffer was provided by the user, then obviously the buffer cannot be expanded and false is returned.</para>
<para><bold>The byte order of event must match the byte order given in constructor!</bold></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>event&apos;s <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extraDataLen</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data bytes to follow event (e.g. trailer length). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if event was added; false if the event was not added because the count limit would be exceeded or the buffer is full and cannot be expanded since it&apos;s user-provided. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="241" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="745" bodyend="774"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1ab6c620b4efec082e1a94e8e32794578d" compoundref="dc/dd3/_record_output_8h" startline="141">eventCount</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae906482126a5dfdd1cbfcf1ecb93535b" compoundref="dc/dd3/_record_output_8h" startline="148">eventSize</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa98ea7b099108a9c85b86edf26ac43ba" compoundref="dc/dd3/_record_output_8h" startline="145">indexSize</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a3f4d7b9042307cbe6e3a223a6c374479" compoundref="dc/dd3/_record_output_8h" startline="124">MAX_BUFFER_SIZE</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a1c660c90cdcd914312f659e5c775a714" compoundref="dc/dd3/_record_output_8h" startline="110">ONE_MEG</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ad8f3cdf93e08051cb9be4e60ec1d7527" compoundref="d4/df6/_record_output_8cpp" startline="449" endline="449">oneTooMany</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ad7121a345c5f6ba668983660e8158919" compoundref="dc/dd3/_record_output_8h" startline="133">RECORD_BUFFER_SIZE</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1afa654ece2da736e553092de439b7d235" compoundref="dc/dd3/_record_output_8h" startline="158">recordEvents</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae24b881792676912fb68bbb7aedeab46" compoundref="dc/dd3/_record_output_8h" startline="155">recordIndex</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" compoundref="d4/df6/_record_output_8cpp" startline="804" endline="817">reset</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1afcbb151999c6a2db36dbf06994756e0d" compoundref="d4/df6/_record_output_8cpp" startline="439" endline="442">roomForEvent</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae2ed1d784e644e8e5cb2ddacbeeff85f" compoundref="dc/dd3/_record_output_8h" startline="174">userProvidedBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1adaa4001ce8e4866b5915b3ba11897c7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordOutput::addEvent</definition>
        <argsstring>(std::shared_ptr&lt; EvioBank &gt; &amp;event, uint32_t extraDataLen=0)</argsstring>
        <name>addEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> &gt; &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>extraDataLen</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Adds an event&apos;s <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> into the record. </para>
        </briefdescription>
        <detaileddescription>
<para>Can specify the length of additional data to follow the event (such as an evio trailer record) to see if by adding this event everything will fit in the available memory.</para>
<para>If a single event is too large for the internal buffers, more memory is allocated. On the other hand, if the buffer was provided by the user, then obviously the buffer cannot be expanded and false is returned.</para>
<para><bold>The byte order of event must match the byte order given in constructor!</bold></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>event&apos;s <ref refid="de/de3/classevio_1_1_evio_bank" kindref="compound">EvioBank</ref> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extraDataLen</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data bytes to follow event (e.g. trailer length). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if event was added; false if the event was not added because the count limit would be exceeded or the buffer is full and cannot be expanded since it&apos;s user-provided. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="242" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="794" bodyend="796"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordOutput::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Reset internal buffers. </para>
        </briefdescription>
        <detaileddescription>
<para>The buffer is ready to receive new data. Also resets the header including removing any compression. If data buffer externally provided, the starting position is set to 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="244" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="804" bodyend="817"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1ab6c620b4efec082e1a94e8e32794578d" compoundref="dc/dd3/_record_output_8h" startline="141">eventCount</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae906482126a5dfdd1cbfcf1ecb93535b" compoundref="dc/dd3/_record_output_8h" startline="148">eventSize</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1acd299afe38e9276c82339a3a3a931484" compoundref="dc/dd3/_record_output_8h" startline="168">header</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa98ea7b099108a9c85b86edf26ac43ba" compoundref="dc/dd3/_record_output_8h" startline="145">indexSize</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa86ac9bc20793c5731b0faa759f923d3" compoundref="dc/dd3/_record_output_8h" startline="165">recordBinary</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a4bc61b0568796ba16c957a0c5e8c4f0f" compoundref="dc/dd3/_record_output_8h" startline="161">recordData</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1afa654ece2da736e553092de439b7d235" compoundref="dc/dd3/_record_output_8h" startline="158">recordEvents</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae24b881792676912fb68bbb7aedeab46" compoundref="dc/dd3/_record_output_8h" startline="155">recordIndex</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a8b3dde2575a40d0b4e2c56a94b1cb3b4" compoundref="dc/dd3/_record_output_8h" startline="152">startingPosition</references>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" compoundref="d4/df6/_record_output_8cpp" startline="482" endline="515">addEvent</referencedby>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1a57adc95dceace9f15a5d4525587d346c" compoundref="d4/df6/_record_output_8cpp" startline="211" endline="233">setBuffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1acd8fcf62ec243383f68d558a6924c659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordOutput::setStartingBufferPosition</definition>
        <argsstring>(size_t pos)</argsstring>
        <name>setStartingBufferPosition</name>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Set the starting position of the user-given buffer being written into. </para>
        </briefdescription>
        <detaileddescription>
<para>Calling this may be necessary from EventWriter(Unsync) when a common record (dictionary + first event) is written after the constructor for this object has been called, but before any events have been written. This method should <bold>not</bold> be called in general as it will MESS UP THE WRITING OF DATA! <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position in buffer to start writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="246" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="829" bodyend="832"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa86ac9bc20793c5731b0faa759f923d3" compoundref="dc/dd3/_record_output_8h" startline="165">recordBinary</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a8b3dde2575a40d0b4e2c56a94b1cb3b4" compoundref="dc/dd3/_record_output_8h" startline="152">startingPosition</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a7c7cbf0f2bcc362662eea1fc4ff5d7ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordOutput::build</definition>
        <argsstring>()</argsstring>
        <name>build</name>
        <briefdescription>
<para>Builds the record. </para>
        </briefdescription>
        <detaileddescription>
<para>Compresses data, header is constructed, then header &amp; data written into internal buffer. This method may be called multiple times in succession without any problem. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="248" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="841" bodyend="999"/>
        <references refid="da/d08/classevio_1_1_compressor_1a980dd68d0561413488f9fa4290f2f55b" compoundref="d9/d6a/_compressor_8cpp" startline="497" endline="513">evio::Compressor::compressLZ4</references>
        <references refid="da/d08/classevio_1_1_compressor_1a442afd61a93ee8271e70bfe56de6aab2" compoundref="d9/d6a/_compressor_8cpp" startline="594" endline="610">evio::Compressor::compressLZ4Best</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ab6c620b4efec082e1a94e8e32794578d" compoundref="dc/dd3/_record_output_8h" startline="141">eventCount</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae906482126a5dfdd1cbfcf1ecb93535b" compoundref="dc/dd3/_record_output_8h" startline="148">eventSize</references>
        <references refid="da/d08/classevio_1_1_compressor_1abab453336d92bc8e693825ac143ff101" compoundref="dc/d17/_compressor_8h" startline="50" endline="53">evio::Compressor::getInstance</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1acd299afe38e9276c82339a3a3a931484" compoundref="dc/dd3/_record_output_8h" startline="168">header</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a0e09d731589bcfe2705d0c606192f6eb" compoundref="d6/dea/_record_header_8h" startline="127">evio::RecordHeader::HEADER_SIZE_BYTES</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa98ea7b099108a9c85b86edf26ac43ba" compoundref="dc/dd3/_record_output_8h" startline="145">indexSize</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa86ac9bc20793c5731b0faa759f923d3" compoundref="dc/dd3/_record_output_8h" startline="165">recordBinary</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a4bc61b0568796ba16c957a0c5e8c4f0f" compoundref="dc/dd3/_record_output_8h" startline="161">recordData</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1afa654ece2da736e553092de439b7d235" compoundref="dc/dd3/_record_output_8h" startline="158">recordEvents</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae24b881792676912fb68bbb7aedeab46" compoundref="dc/dd3/_record_output_8h" startline="155">recordIndex</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a8b3dde2575a40d0b4e2c56a94b1cb3b4" compoundref="dc/dd3/_record_output_8h" startline="152">startingPosition</references>
        <references refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747a056585718cbf5c7808c0e37b1f88dbb9" compoundref="dc/d17/_compressor_8h" startline="66">evio::Compressor::UNCOMPRESSED</references>
        <referencedby refid="d2/d7a/classevio_1_1_record_output_1ab579239aae44950a0cfa34698f04f63a" compoundref="d4/df6/_record_output_8cpp" startline="1011" endline="1013">build</referencedby>
        <referencedby refid="d6/dca/classevio_1_1_writer_1acaf968c34f10e8004994a91175e5a829" compoundref="dc/d0e/_writer_8cpp" startline="618" endline="669">evio::Writer::createRecord</referencedby>
        <referencedby refid="d6/dca/classevio_1_1_writer_1a0d0f549a6ceaae794eca73130957a23d" compoundref="dc/d0e/_writer_8cpp" startline="953" endline="997">evio::Writer::writeRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1ab579239aae44950a0cfa34698f04f63a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordOutput::build</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; userHeader)</argsstring>
        <name>build</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
          <declname>userHeader</declname>
        </param>
        <briefdescription>
<para>Builds the record. </para>
        </briefdescription>
        <detaileddescription>
<para>Compresses data, header is constructed, then header &amp; data written into internal buffer. If user header is not padded to 4-byte boundary, it&apos;s done here. This method may be called multiple times in succession without any problem.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>userHeader</parametername>
</parameternamelist>
<parameterdescription>
<para>user&apos;s <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> which must be READY-TO-READ! </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="249" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="1011" bodyend="1013"/>
        <references refid="d2/d7a/classevio_1_1_record_output_1a7c7cbf0f2bcc362662eea1fc4ff5d7ad" compoundref="d4/df6/_record_output_8cpp" startline="841" endline="999">build</references>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1ac07b05a275660709fc6c7767fcb556af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordOutput::build</definition>
        <argsstring>(const ByteBuffer &amp;userHeader)</argsstring>
        <name>build</name>
        <param>
          <type>const <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>userHeader</declname>
        </param>
        <briefdescription>
<para>Builds the record. </para>
        </briefdescription>
        <detaileddescription>
<para>Compresses data, header is constructed, then header &amp; data written into internal buffer. If user header is not padded to 4-byte boundary, it&apos;s done here. This method may be called multiple times in succession without any problem.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>userHeader</parametername>
</parameternamelist>
<parameterdescription>
<para>user&apos;s <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> which must be READY-TO-READ! </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="250" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="1025" bodyend="1175"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1aa0e335238a57eaa0bffee8f968e5995f" compoundref="d4/d6c/_byte_buffer_8cpp" startline="475" endline="475">evio::ByteBuffer::array</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a7c7cbf0f2bcc362662eea1fc4ff5d7ad" compoundref="d4/df6/_record_output_8cpp" startline="841" endline="999">build</references>
        <references refid="da/d08/classevio_1_1_compressor_1a980dd68d0561413488f9fa4290f2f55b" compoundref="d9/d6a/_compressor_8cpp" startline="497" endline="513">evio::Compressor::compressLZ4</references>
        <references refid="da/d08/classevio_1_1_compressor_1a442afd61a93ee8271e70bfe56de6aab2" compoundref="d9/d6a/_compressor_8cpp" startline="594" endline="610">evio::Compressor::compressLZ4Best</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ab6c620b4efec082e1a94e8e32794578d" compoundref="dc/dd3/_record_output_8h" startline="141">eventCount</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae906482126a5dfdd1cbfcf1ecb93535b" compoundref="dc/dd3/_record_output_8h" startline="148">eventSize</references>
        <references refid="da/d08/classevio_1_1_compressor_1abab453336d92bc8e693825ac143ff101" compoundref="dc/d17/_compressor_8h" startline="50" endline="53">evio::Compressor::getInstance</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1acd299afe38e9276c82339a3a3a931484" compoundref="dc/dd3/_record_output_8h" startline="168">header</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a0e09d731589bcfe2705d0c606192f6eb" compoundref="d6/dea/_record_header_8h" startline="127">evio::RecordHeader::HEADER_SIZE_BYTES</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa98ea7b099108a9c85b86edf26ac43ba" compoundref="dc/dd3/_record_output_8h" startline="145">indexSize</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a88f84e6b1757db70542eac13294fc80e" compoundref="d4/d6c/_byte_buffer_8cpp" startline="518" endline="518">evio::ByteBuffer::position</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1aa86ac9bc20793c5731b0faa759f923d3" compoundref="dc/dd3/_record_output_8h" startline="165">recordBinary</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a4bc61b0568796ba16c957a0c5e8c4f0f" compoundref="dc/dd3/_record_output_8h" startline="161">recordData</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1afa654ece2da736e553092de439b7d235" compoundref="dc/dd3/_record_output_8h" startline="158">recordEvents</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1ae24b881792676912fb68bbb7aedeab46" compoundref="dc/dd3/_record_output_8h" startline="155">recordIndex</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a32b043081cd3a62187f2577ce2966e7d" compoundref="d4/d6c/_byte_buffer_8cpp" startline="497" endline="497">evio::ByteBuffer::remaining</references>
        <references refid="d2/d7a/classevio_1_1_record_output_1a8b3dde2575a40d0b4e2c56a94b1cb3b4" compoundref="dc/dd3/_record_output_8h" startline="152">startingPosition</references>
        <references refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747a056585718cbf5c7808c0e37b1f88dbb9" compoundref="dc/d17/_compressor_8h" startline="66">evio::Compressor::UNCOMPRESSED</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a824f778336472cb5a522afc41bbb548b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordOutput::allocate</definition>
        <argsstring>()</argsstring>
        <name>allocate</name>
        <briefdescription>
<para>Allocates all buffers for constructing the record stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="203" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="418" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1af18e4cdc6a4888ee8b0bec5e15da54eb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordOutput::allowedIntoRecord</definition>
        <argsstring>(uint32_t length)</argsstring>
        <name>allowedIntoRecord</name>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Is another event of the given length allowed into this record&apos;s memory? It may not be allowed if its exceeds the memory or count limit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of event to add in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><programlisting><codeline><highlight class="normal">true<sp/></highlight></codeline>
</programlisting> if allowed into record, else<programlisting><codeline><highlight class="normal">false<sp/></highlight></codeline>
</programlisting> . </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="204" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="458" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="d2/d7a/classevio_1_1_record_output_1a462593faed1bccea081e37d7ec7b38d2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordOutput::copy</definition>
        <argsstring>(const RecordOutput &amp;rec)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="d2/d7a/classevio_1_1_record_output" kindref="compound">RecordOutput</ref> &amp;</type>
          <declname>rec</declname>
        </param>
        <briefdescription>
<para>Copy data from arg into this object, but don&apos;t set positions/limits of data buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Copy all data up to the buffer limit (not capacity). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rec</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d2/d7a/classevio_1_1_record_output" kindref="compound">RecordOutput</ref> to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if trying to copy bigger record and internal buffer was provided by user. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordOutput.h" line="205" column="14" bodyfile="src/libsrc/RecordOutput.cpp" bodystart="261" bodyend="323"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class which handles the creation and use of Evio &amp; HIPO Records. </para>
    </briefdescription>
    <detaileddescription>
<para><preformatted>
RECORD STRUCTURE:</preformatted></para>
<para><preformatted>              Uncompressed                                      Compressed</preformatted></para>
<para><preformatted>   +----------------------------------+            +----------------------------------+
   |       General Record Header      |            |       General Record Header      |
   +----------------------------------+            +----------------------------------+</preformatted></para>
<para><preformatted>   +----------------------------------+ ---------&gt; +----------------------------------+
   |      Index Array (bytes)         |            |        Compressed Data           |
   +----------------------------------+            |             Record               |
                                                   |                                  |
   +----------------------------------+            |                                  |
   |           User Header            |            |                  ----------------|
   |           (Optional)             |            |                  |    Pad 3      |
   |                  ----------------|            +----------------------------------+
   |                  |    Pad 1      |           ^
   +----------------------------------+          /
                                                /
   +----------------------------------+        /
   |           Data Record            |       /
   |                                  |      /
   |                  ----------------|     /
   |                  |    Pad 2      |    /
   +----------------------------------+----</preformatted></para>
<para><preformatted>GENERAL RECORD HEADER STRUCTURE ( see RecordHeader.java )</preformatted></para>
<para><preformatted>   +----------------------------------+
 1 |         Record Length            | // 32bit words, inclusive
   +----------------------------------+
 2 +         Record Number            |
   +----------------------------------+
 3 +         Header Length            | // 14 (words)
   +----------------------------------+
 4 +       Event (Index) Count        |
   +----------------------------------+
 5 +      Index Array Length          | // bytes
   +-----------------------+---------+
 6 +       Bit Info        | Version  | // version (8 bits)
   +-----------------------+----------+
 7 +      User Header Length          | // bytes
   +----------------------------------+
 8 +          Magic Number            | // 0xc0da0100
   +----------------------------------+
 9 +     Uncompressed Data Length     | // bytes
   +------+---------------------------+
10 +  CT  |  Data Length Compressed   | // CT = compression type (4 bits)
   +----------------------------------+
11 +        General Register 1        | // UID 1st (64 bits)
   +--                              --+
12 +                                  |
   +----------------------------------+
13 +        General Register 2        | // UID 2nd (64 bits)
   +--                              --+
14 +                                  |
   +----------------------------------+
</preformatted></para>
<para><simplesect kind="version"><para>6.0 </para>
</simplesect>
<simplesect kind="since"><para>6.0 4/9/2019 </para>
</simplesect>
<simplesect kind="author"><para>timmer </para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>evio::RecordOutput</label>
        <link refid="d2/d7a/classevio_1_1_record_output"/>
        <childnode refid="2" relation="usage">
          <edgelabel>byteOrder</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>evio::ByteOrder</label>
        <link refid="da/d7d/classevio_1_1_byte_order"/>
        <childnode refid="2" relation="usage">
          <edgelabel>ENDIAN_BIG</edgelabel>
          <edgelabel>ENDIAN_LITTLE</edgelabel>
          <edgelabel>ENDIAN_LOCAL</edgelabel>
          <edgelabel>ENDIAN_UNKNOWN</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/libsrc/RecordOutput.h" line="105" column="5" bodyfile="src/libsrc/RecordOutput.h" bodystart="105" bodyend="252"/>
    <listofallmembers>
      <member refid="d2/d7a/classevio_1_1_record_output_1a5430397efd27db0815892cd7c61c08a2" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>addEvent</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1abcaf71b5a5034077688abf666da31653" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>addEvent</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1ab82fdc44fa2eafa3b54a8c76f4ccd018" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>addEvent</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1aa6b6ad449487f4ed9305e3d6b75f7277" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>addEvent</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a2625d56532619d8f027214de68e097d1" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>addEvent</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a82938baf95da3faf5345af0a3a19c781" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>addEvent</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a93aa61e8347a47378ecbf1cb1510cc5a" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>addEvent</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1ae543847b42a7e97894d747a254c3a6c9" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>addEvent</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1adaa4001ce8e4866b5915b3ba11897c7c" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>addEvent</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a824f778336472cb5a522afc41bbb548b" prot="private" virt="non-virtual"><scope>evio::RecordOutput</scope><name>allocate</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1af18e4cdc6a4888ee8b0bec5e15da54eb" prot="private" virt="non-virtual"><scope>evio::RecordOutput</scope><name>allowedIntoRecord</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a7c7cbf0f2bcc362662eea1fc4ff5d7ad" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>build</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1ab579239aae44950a0cfa34698f04f63a" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>build</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1ac07b05a275660709fc6c7767fcb556af" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>build</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a8bc3bca719406f7b353facd7cfcf2ab4" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>byteOrder</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a462593faed1bccea081e37d7ec7b38d2" prot="private" virt="non-virtual"><scope>evio::RecordOutput</scope><name>copy</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1ab6c620b4efec082e1a94e8e32794578d" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>eventCount</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1ae906482126a5dfdd1cbfcf1ecb93535b" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>eventSize</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a95a914b8d9c2e5dce9764be14002d8b6" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>getBinaryBuffer</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a7d31fb593c433d6c5be6961a5b43d1da" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>getByteOrder</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1ae6fc04a6ad40782206a858489d822f74" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>getCompressionType</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1ab75d3e5ba25945f61f6376f7096dee38" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>getEventCount</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a3644f5817bd565b0b6a07617da013f27" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>getHeader</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1af2894b6e7c23404c74d9f0bc2c602651" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>getHeaderType</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1acbb92327f0cf806b7b87b0b20336b05f" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>getInternalBufferCapacity</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a8818ee6b0a69abc6c5fdbec1ca899cee" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>getMaxEventCount</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1ab8778ded697fc71281c287a2c2f99fa7" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>getUncompressedSize</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a0a75729eb429ff2b40d1b189caf259fd" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>getUserBufferSize</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a9d2ad711af9a93c78e70a1d4b85f906f" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>hasUserProvidedBuffer</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1acd299afe38e9276c82339a3a3a931484" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>header</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1aa98ea7b099108a9c85b86edf26ac43ba" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>indexSize</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a3f4d7b9042307cbe6e3a223a6c374479" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>MAX_BUFFER_SIZE</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a4a96554c0eed9a1844c799ae2e8e6535" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>MAX_EVENT_COUNT</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a1c660c90cdcd914312f659e5c775a714" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>ONE_MEG</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1ad8f3cdf93e08051cb9be4e60ec1d7527" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>oneTooMany</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a7341c94d383583af26399f12dcedade0" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>operator=</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a9cb6b09fcc422d78385988723a1a0fd5" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>operator=</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1ad7121a345c5f6ba668983660e8158919" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>RECORD_BUFFER_SIZE</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1aa86ac9bc20793c5731b0faa759f923d3" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>recordBinary</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a4bc61b0568796ba16c957a0c5e8c4f0f" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>recordData</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1afa654ece2da736e553092de439b7d235" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>recordEvents</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1ae24b881792676912fb68bbb7aedeab46" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>recordIndex</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1ac8c45b1555c4194aba1425bf36ca8f1b" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>RecordOutput</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a232e28211cd5630b6bb43c8944ffe60e" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>RecordOutput</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a3308b373e210f9d4cc3f3f1faf50e544" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>RecordOutput</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1ab74c5e86b19c90156972a7b512d91182" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>RecordOutput</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a2437148cfd6aba94169e6ca016aa2443" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>RecordOutput</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1abc4221165d1626407280c56e7cc4ea70" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>reset</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1afcbb151999c6a2db36dbf06994756e0d" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>roomForEvent</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a57adc95dceace9f15a5d4525587d346c" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>setBuffer</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1acd8fcf62ec243383f68d558a6924c659" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>setStartingBufferPosition</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a8b3dde2575a40d0b4e2c56a94b1cb3b4" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>startingPosition</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a962e99aa5e7234890e786fb9f4f0cd15" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>transferDataForReading</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1a96a02d6c411124b2c06ac1b302acc870" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>userBufferSize</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1ae2ed1d784e644e8e5cb2ddacbeeff85f" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>userProvidedBuffer</name></member>
      <member refid="d2/d7a/classevio_1_1_record_output_1aeb9a1c12d7e3f84572644adaec37eabe" prot="public" virt="non-virtual"><scope>evio::RecordOutput</scope><name>~RecordOutput</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
