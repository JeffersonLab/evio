<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="d7/d91/classevio_1_1_evio_tag_segment" kind="class" language="C++" prot="public">
    <compoundname>evio::EvioTagSegment</compoundname>
    <basecompoundref refid="d9/ddd/classevio_1_1_base_structure" prot="public" virt="non-virtual">evio::BaseStructure</basecompoundref>
    <includes local="no">EvioTagSegment.h</includes>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d7/d91/classevio_1_1_evio_tag_segment_1ad6d3e71466260ce95dd1b273335fe4b6" prot="private" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>evio::EvioTagSegment::EvioTagSegment</definition>
        <argsstring>(std::shared_ptr&lt; TagSegmentHeader &gt; const &amp;head)</argsstring>
        <name>EvioTagSegment</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="df/d43/classevio_1_1_tag_segment_header" kindref="compound">TagSegmentHeader</ref> &gt; const &amp;</type>
          <declname>head</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>tagsegment header. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EvioTagSegment.h" line="44" column="18" bodyfile="src/libsrc/EvioTagSegment.h" bodystart="44" bodyend="44"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="d7/d91/classevio_1_1_evio_tag_segment_1a70327d9a4b433b55aeb3d78fef704af3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d7/d91/classevio_1_1_evio_tag_segment" kindref="compound">EvioTagSegment</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;EvioTagSegment&gt; evio::EvioTagSegment::getInstance</definition>
        <argsstring>(std::shared_ptr&lt; TagSegmentHeader &gt; const &amp;head)</argsstring>
        <name>getInstance</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="df/d43/classevio_1_1_tag_segment_header" kindref="compound">TagSegmentHeader</ref> &gt; const &amp;</type>
          <declname>head</declname>
        </param>
        <briefdescription>
<para>Method to return a shared pointer to a constructed object of this class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>tagsegment header. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>shared pointer to new <ref refid="d7/d91/classevio_1_1_evio_tag_segment" kindref="compound">EvioTagSegment</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EvioTagSegment.h" line="53" column="32" bodyfile="src/libsrc/EvioTagSegment.h" bodystart="53" bodyend="56"/>
        <referencedby refid="db/d06/classevio_1_1_event_builder_1ad11bd244d4bc1fef7cc84e0de74af323" compoundref="d4/dfa/_event_builder_8cpp" startline="792" endline="896">evio::EventBuilder::main</referencedby>
        <referencedby refid="d2/da4/classevio_1_1_structure_transformer_1a726821c1aaeea163f426f4bc55a248e6" compoundref="d1/d04/_structure_transformer_8h" startline="158" endline="177">evio::StructureTransformer::transform</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/d91/classevio_1_1_evio_tag_segment_1ab4446300d4c9e987a526800993978808" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d7/d91/classevio_1_1_evio_tag_segment" kindref="compound">EvioTagSegment</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;EvioTagSegment&gt; evio::EvioTagSegment::getInstance</definition>
        <argsstring>(uint16_t tag, DataType const &amp;typ)</argsstring>
        <name>getInstance</name>
        <param>
          <type>uint16_t</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="d5/d23/classevio_1_1_data_type" kindref="compound">DataType</ref> const &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Method to return a shared pointer to a constructed object of this class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tagsegment tag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typ</parametername>
</parameternamelist>
<parameterdescription>
<para>tagsegment data type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>shared pointer to new <ref refid="d7/d91/classevio_1_1_evio_tag_segment" kindref="compound">EvioTagSegment</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EvioTagSegment.h" line="64" column="32" bodyfile="src/libsrc/EvioTagSegment.h" bodystart="64" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a5f336d2ae655e9666cf361e43e665268" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::stringsToRawBytes</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;strings, std::vector&lt; uint8_t &gt; &amp;bytes)</argsstring>
        <name>stringsToRawBytes</name>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>strings</declname>
        </param>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>This method transforms a vector of strings into raw evio format data, not including header. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strings</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of strings to transform. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of bytes to contain evio formatted strings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="699" column="21" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2109" bodyend="2152"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a681fe5581a4e8e4b1b13d607085835a4" compoundref="dc/de3/_base_structure_8cpp" startline="2053" endline="2072">evio::BaseStructure::stringsToRawSize</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1afc0a6e74a1642c31a7df18af2aa75606" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::unpackRawBytesToStrings</definition>
        <argsstring>(std::vector&lt; uint8_t &gt; &amp;bytes, size_t offset, std::vector&lt; std::string &gt; &amp;strData)</argsstring>
        <name>unpackRawBytesToStrings</name>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>strData</declname>
        </param>
        <briefdescription>
<para>This method extracts a vector of strings from bytes of raw evio string data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>raw evio string data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset into raw data array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strData</parametername>
</parameternamelist>
<parameterdescription>
<para>vector in which to place extracted strings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="702" column="21" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2216" bodyend="2219"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a627d070cacdcdf245689e6d950e0f629" compoundref="dc/de3/_base_structure_8cpp" startline="2411" endline="2526">evio::BaseStructure::unpackRawBytesToStrings</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ac570b2681253df3aa179b4f3f45b8e50" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::unpackRawBytesToStrings</definition>
        <argsstring>(std::vector&lt; uint8_t &gt; &amp;bytes, size_t offset, size_t maxLength, std::vector&lt; std::string &gt; &amp;strData)</argsstring>
        <name>unpackRawBytesToStrings</name>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxLength</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>strData</declname>
        </param>
        <briefdescription>
<para>This method extracts a vector of strings from bytes of raw evio string data. </para>
        </briefdescription>
        <detaileddescription>
<para>Don&apos;t go beyond the specified max character limit and stop at the first non-character value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>raw evio string data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset into raw data vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLength</parametername>
</parameternamelist>
<parameterdescription>
<para>max length in bytes of valid data in bytes vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strData</parametername>
</parameternamelist>
<parameterdescription>
<para>vector in which to place extracted strings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="704" column="21" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2232" bodyend="2243"/>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ab9fcd82a0c4662790934a83fedb59cf5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::unpackRawBytesToStrings</definition>
        <argsstring>(uint8_t *bytes, size_t length, std::vector&lt; std::string &gt; &amp;strData)</argsstring>
        <name>unpackRawBytesToStrings</name>
        <param>
          <type>uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>strData</declname>
        </param>
        <briefdescription>
<para>This method extracts a vector of strings from bytes of raw evio string data. </para>
        </briefdescription>
        <detaileddescription>
<para>Don&apos;t go beyond the specified max character limit and stop at the first non-character value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>raw evio string data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length in bytes of valid data at bytes pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strData</parametername>
</parameternamelist>
<parameterdescription>
<para>vector in which to place extracted strings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="707" column="21" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2255" bodyend="2261"/>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a3d44cd7066b5008e10a16dc915cfcfd8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::unpackRawBytesToStrings</definition>
        <argsstring>(ByteBuffer &amp;buffer, size_t pos, size_t length, std::vector&lt; std::string &gt; &amp;strData)</argsstring>
        <name>unpackRawBytesToStrings</name>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>strData</declname>
        </param>
        <briefdescription>
<para>This method extracts a vector of strings from buffer containing raw evio string data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer containing evio string data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of string data in buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of string data in buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strData</parametername>
</parameternamelist>
<parameterdescription>
<para>vector in which to place extracted strings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="709" column="21" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2272" bodyend="2280"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1aa0e335238a57eaa0bffee8f968e5995f" compoundref="d4/d6c/_byte_buffer_8cpp" startline="475" endline="475">evio::ByteBuffer::array</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1abf7abf99aa7544601997f40eba298648" compoundref="d4/d6c/_byte_buffer_8cpp" startline="490" endline="490">evio::ByteBuffer::arrayOffset</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1af557b993fb782635edfc7e4fb587f699" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::BaseStructure::stringToRawSize</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>stringToRawSize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>This method returns the number of bytes in a raw evio format of the given string vector, not including header. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of strings to size. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes in a raw evio format of the given strings. </para>
</simplesect>
<simplesect kind="return"><para>0 if vector empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="696" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2083" bodyend="2099"/>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a681fe5581a4e8e4b1b13d607085835a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::BaseStructure::stringsToRawSize</definition>
        <argsstring>(std::vector&lt; std::string &gt; const &amp;strings)</argsstring>
        <name>stringsToRawSize</name>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>strings</declname>
        </param>
        <briefdescription>
<para>This method returns the number of bytes in a raw evio format of the given string vector, not including header. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strings</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of strings to size. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes in a raw evio format of the given strings. </para>
</simplesect>
<simplesect kind="return"><para>0 if vector empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="697" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2053" bodyend="2072"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a5f336d2ae655e9666cf361e43e665268" compoundref="dc/de3/_base_structure_8cpp" startline="2109" endline="2152">evio::BaseStructure::stringsToRawBytes</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d7/d91/classevio_1_1_evio_tag_segment_1ab8897c9eb1b05f2a2911e2e8ee8d9a75" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="dd/da5/classevio_1_1_structure_type" kindref="compound">StructureType</ref></type>
        <definition>StructureType evio::EvioTagSegment::getStructureType</definition>
        <argsstring>() const override</argsstring>
        <name>getStructureType</name>
        <reimplements refid="d9/ddd/classevio_1_1_base_structure_1ad9d61b6fc4e2e44b02f192b40d0bee05">getStructureType</reimplements>
        <briefdescription>
<para>This implements the virtual method from <computeroutput><ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns the type of this structure, not the type of data this structure holds.</para>
<para><simplesect kind="return"><para>the <computeroutput><ref refid="dd/da5/classevio_1_1_structure_type" kindref="compound">StructureType</ref></computeroutput> of this structure, which is a <ref refid="dd/da5/classevio_1_1_structure_type_1ae925fc09a425a266787b3aab512df591" kindref="member">StructureType::STRUCT_TAGSEGMENT</ref>. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="dd/da5/classevio_1_1_structure_type" kindref="compound">StructureType</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EvioTagSegment.h" line="77" column="23" bodyfile="src/libsrc/EvioTagSegment.h" bodystart="77" bodyend="79"/>
        <references refid="dd/da5/classevio_1_1_structure_type_1ae925fc09a425a266787b3aab512df591" compoundref="d3/d58/_structure_type_8h" startline="39">evio::StructureType::STRUCT_TAGSEGMENT</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1af19d422cb8edad9a7ab7c50d9f95384b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/ddd/classevio_1_1_base_structure_1a9e1427e32d6d200e1f02f9dff936cbc4" kindref="member">iterator</ref></type>
        <definition>iterator evio::BaseStructure::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Get the beginning depth-first iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>beginning depth-first iterator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="387" column="18" bodyfile="src/libsrc/BaseStructure.h" bodystart="387" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a5f4561d633f547ffe744cbfb68de97e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/ddd/classevio_1_1_base_structure_1a9e1427e32d6d200e1f02f9dff936cbc4" kindref="member">iterator</ref></type>
        <definition>iterator evio::BaseStructure::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Get the end depth-first iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>end depth-first iterator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="392" column="18" bodyfile="src/libsrc/BaseStructure.h" bodystart="392" bodyend="392"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1abde363c80f5877872d708d8b893a14d2" compoundref="dc/de3/_base_structure_8cpp" startline="483" endline="505">evio::BaseStructure::getIndex</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a3961ab65e777588a2215103779819d66" compoundref="dc/de3/_base_structure_8cpp" startline="415" endline="432">evio::BaseStructure::remove</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1adfe7d36699cb3376c5d44551edf3fb8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/ddd/classevio_1_1_base_structure_1a9bfcca6273152e739af79404c28ba2a8" kindref="member">breadth_iterator</ref></type>
        <definition>breadth_iterator evio::BaseStructure::bbegin</definition>
        <argsstring>()</argsstring>
        <name>bbegin</name>
        <briefdescription>
<para>Get the beginning breadth-first iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>beginning breadth-first iterator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="398" column="26" bodyfile="src/libsrc/BaseStructure.h" bodystart="398" bodyend="398"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a9b038ad8e9a6b35538890289ec4e065b" compoundref="dc/de3/_base_structure_8cpp" startline="772" endline="782">evio::BaseStructure::getDepth</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a22f78ec396671f5e421c9f23bdc7f06b" compoundref="dc/de3/_base_structure_8cpp" startline="1351" endline="1368">evio::BaseStructure::getLeafCount</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a68fb4345c10511f9aa796006d324647b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/ddd/classevio_1_1_base_structure_1a9bfcca6273152e739af79404c28ba2a8" kindref="member">breadth_iterator</ref></type>
        <definition>breadth_iterator evio::BaseStructure::bend</definition>
        <argsstring>()</argsstring>
        <name>bend</name>
        <briefdescription>
<para>Get the end breadth-first iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>end breadth-first iterator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="403" column="26" bodyfile="src/libsrc/BaseStructure.h" bodystart="403" bodyend="403"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a9b038ad8e9a6b35538890289ec4e065b" compoundref="dc/de3/_base_structure_8cpp" startline="772" endline="782">evio::BaseStructure::getDepth</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a22f78ec396671f5e421c9f23bdc7f06b" compoundref="dc/de3/_base_structure_8cpp" startline="1351" endline="1368">evio::BaseStructure::getLeafCount</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a90eb00ca90216fa72d3b36f5995cdb59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt;BaseStructure&gt; evio::BaseStructure::getThis</definition>
        <argsstring>()</argsstring>
        <name>getThis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="418" column="25" bodyfile="src/libsrc/BaseStructure.h" bodystart="418" bodyend="418"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0bf8806bcb29279bf9f6fffe42067806" compoundref="dc/de3/_base_structure_8cpp" startline="612" endline="617">evio::BaseStructure::add</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a4ef4e13ada4b6c8a131c4a23d0f9fba1" compoundref="dc/de3/_base_structure_8cpp" startline="1239" endline="1247">evio::BaseStructure::getFirstLeaf</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a7299ce9b855d3b1b9193369eb930dfe9" compoundref="dc/de3/_base_structure_8cpp" startline="1260" endline="1268">evio::BaseStructure::getLastLeaf</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1acf9557af3d316538b7b0929c8ba80e51" compoundref="dc/de3/_base_structure_8cpp" startline="1161" endline="1178">evio::BaseStructure::getNextSibling</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1aa60a696d28dc913f60e7f37baa01af65" compoundref="dc/de3/_base_structure_8cpp" startline="814" endline="816">evio::BaseStructure::getPath</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a54b447d883807ece3fdd067f43e74824" compoundref="dc/de3/_base_structure_8cpp" startline="1191" endline="1208">evio::BaseStructure::getPreviousSibling</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a106e3a5e0396a3a7ca3cd8fff899be01" compoundref="dc/de3/_base_structure_8cpp" startline="862" endline="872">evio::BaseStructure::getRoot</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1aa3c835fa26a5f6fd69dc201f1b148690" compoundref="dc/de3/_base_structure_8cpp" startline="690" endline="742">evio::BaseStructure::getSharedAncestor</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a015be72a2d2a8d0d806d3d3c9d90ca83" compoundref="dc/de3/_base_structure_8cpp" startline="380" endline="404">evio::BaseStructure::insert</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ad3d833d7d9b300b2957733a8ea3c55ba" compoundref="dc/de3/_base_structure_8cpp" startline="668" endline="673">evio::BaseStructure::isNodeDescendant</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a1befb9979d5e205e6aa921627ffafabb" compoundref="dc/de3/_base_structure_8cpp" startline="567" endline="572">evio::BaseStructure::removeFromParent</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a25dfdca6a73381878becf7f87c4bc85e" compoundref="dc/de3/_base_structure_8cpp" startline="1384" endline="1386">evio::BaseStructure::visitAllStructures</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ae729917eb076c7a35adb765b8fbbab84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt;const BaseStructure&gt; evio::BaseStructure::getThisConst</definition>
        <argsstring>() const</argsstring>
        <name>getThisConst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="419" column="25" bodyfile="src/libsrc/BaseStructure.h" bodystart="419" bodyend="419"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a66c6db380ce04efa87430c79358e72d5" compoundref="dc/de3/_base_structure_8cpp" startline="793" endline="802">evio::BaseStructure::getLevel</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ae1ac1caa124541ce3f2c650f9fc93918" compoundref="dc/de3/_base_structure_8cpp" startline="638" endline="652">evio::BaseStructure::isNodeAncestor</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0dedb096d61e25bd1880e62ce55b2d1c" compoundref="dc/de3/_base_structure_8cpp" startline="972" endline="988">evio::BaseStructure::isNodeChild</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a156969f00dbcbe831d02cb28236b4e93" compoundref="dc/de3/_base_structure_8cpp" startline="1107" endline="1126">evio::BaseStructure::isNodeSibling</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a015be72a2d2a8d0d806d3d3c9d90ca83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::insert</definition>
        <argsstring>(const std::shared_ptr&lt; BaseStructure &gt; newChild, size_t childIndex)</argsstring>
        <name>insert</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
          <declname>newChild</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>childIndex</declname>
        </param>
        <briefdescription>
<para>Removes <computeroutput>newChild</computeroutput> from its present parent (if it has a parent), sets the child&apos;s parent to this node, and then adds the child to this node&apos;s child array at index <computeroutput>childIndex</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>newChild</computeroutput> must not be null and must not be an ancestor of this node. Originally part of java&apos;s DefaultMutableBaseStructure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newChild</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> to insert under this node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>childIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in this node&apos;s child array. where this node is to be inserted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>childIndex</computeroutput> is out of bounds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>newChild</computeroutput> is null, is an ancestor of this node, or this node does not allow children. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1ad3d833d7d9b300b2957733a8ea3c55ba" kindref="member">isNodeDescendant</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="427" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="380" bodyend="404"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a7dd7cf17b8603987a79ad89cbbeb9783" compoundref="da/d80/_base_structure_8h" startline="414">evio::BaseStructure::allowsChildren</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" compoundref="da/d80/_base_structure_8h" startline="411">evio::BaseStructure::children</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a90eb00ca90216fa72d3b36f5995cdb59" compoundref="da/d80/_base_structure_8h" startline="418" endline="418">evio::BaseStructure::getThis</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae1ac1caa124541ce3f2c650f9fc93918" compoundref="dc/de3/_base_structure_8cpp" startline="638" endline="652">evio::BaseStructure::isNodeAncestor</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0bf8806bcb29279bf9f6fffe42067806" compoundref="dc/de3/_base_structure_8cpp" startline="612" endline="617">evio::BaseStructure::add</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a3961ab65e777588a2215103779819d66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::remove</definition>
        <argsstring>(size_t childIndex)</argsstring>
        <name>remove</name>
        <param>
          <type>size_t</type>
          <declname>childIndex</declname>
        </param>
        <briefdescription>
<para>Removes the child at the specified index from this node&apos;s children and sets that node&apos;s parent to null. </para>
        </briefdescription>
        <detaileddescription>
<para>The child node to remove must be a <computeroutput><ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref></computeroutput>. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>childIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the child to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>childIndex</computeroutput> is out of bounds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="428" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="415" bodyend="432"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" compoundref="da/d80/_base_structure_8h" startline="411">evio::BaseStructure::children</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5f4561d633f547ffe744cbfb68de97e3" compoundref="da/d80/_base_structure_8h" startline="392" endline="392">evio::BaseStructure::end</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5b2df8aed45cf4534cd655772a68af67" compoundref="dc/de3/_base_structure_8cpp" startline="457" endline="459">evio::BaseStructure::getChildAt</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a55c78ec59a4f5ba5004a425891b39fc4" compoundref="dc/de3/_base_structure_8cpp" startline="582" endline="587">evio::BaseStructure::remove</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1aa7c077d1f2b7a835a2dbff7da6246970" compoundref="dc/de3/_base_structure_8cpp" startline="595" endline="599">evio::BaseStructure::removeAllChildren</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a55c78ec59a4f5ba5004a425891b39fc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::remove</definition>
        <argsstring>(const std::shared_ptr&lt; BaseStructure &gt; aChild)</argsstring>
        <name>remove</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
          <declname>aChild</declname>
        </param>
        <briefdescription>
<para>Removes <computeroutput>aChild</computeroutput> from this node&apos;s child vector, giving it a null parent. </para>
        </briefdescription>
        <detaileddescription>
<para>Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aChild</parametername>
</parameternamelist>
<parameterdescription>
<para>a child of this node to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>aChild</computeroutput> is not a child of this node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="447" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="582" bodyend="587"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1abde363c80f5877872d708d8b893a14d2" compoundref="dc/de3/_base_structure_8cpp" startline="483" endline="505">evio::BaseStructure::getIndex</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a0dedb096d61e25bd1880e62ce55b2d1c" compoundref="dc/de3/_base_structure_8cpp" startline="972" endline="988">evio::BaseStructure::isNodeChild</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3961ab65e777588a2215103779819d66" compoundref="dc/de3/_base_structure_8cpp" startline="415" endline="432">evio::BaseStructure::remove</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a70802d7ff9b48f7b924bd448868e5266" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getParent</definition>
        <argsstring>() const</argsstring>
        <name>getParent</name>
        <briefdescription>
<para>Returns this node&apos;s parent or null if this node has no parent. </para>
        </briefdescription>
        <detaileddescription>
<para>Originally part of java&apos;s DefaultMutableTreeNode. <simplesect kind="return"><para>this node&apos;s parent <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref>, or null if this node has no parent. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="430" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="440" bodyend="440"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ad8aebbe861a56dfa3904009f265d45ca" compoundref="da/d80/_base_structure_8h" startline="408">evio::BaseStructure::parent</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a3a9e454880823fc12618657e361eda9a" compoundref="dc/de3/_base_structure_8cpp" startline="1290" endline="1303">evio::BaseStructure::getNextLeaf</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af548a815cc358d4187e39378be02fc2c" compoundref="dc/de3/_base_structure_8cpp" startline="895" endline="923">evio::BaseStructure::getNextNode</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1acf9557af3d316538b7b0929c8ba80e51" compoundref="dc/de3/_base_structure_8cpp" startline="1161" endline="1178">evio::BaseStructure::getNextSibling</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af475cd78e3dbbefdbf0ddbc4f21123d3" compoundref="dc/de3/_base_structure_8cpp" startline="1325" endline="1338">evio::BaseStructure::getPreviousLeaf</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ab25c72ef83ab662bcbed3517c346ab17" compoundref="dc/de3/_base_structure_8cpp" startline="938" endline="955">evio::BaseStructure::getPreviousNode</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a54b447d883807ece3fdd067f43e74824" compoundref="dc/de3/_base_structure_8cpp" startline="1191" endline="1208">evio::BaseStructure::getPreviousSibling</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ad2f13cac7d47b222f31c71d797fd9ec1" compoundref="dc/de3/_base_structure_8cpp" startline="1137" endline="1146">evio::BaseStructure::getSiblingCount</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a156969f00dbcbe831d02cb28236b4e93" compoundref="dc/de3/_base_structure_8cpp" startline="1107" endline="1126">evio::BaseStructure::isNodeSibling</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a95a5ea0dd8b56c9bcc2a0ae728ac4f65" compoundref="dc/de3/_base_structure_8cpp" startline="882" endline="882">evio::BaseStructure::isRoot</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a1befb9979d5e205e6aa921627ffafabb" compoundref="dc/de3/_base_structure_8cpp" startline="567" endline="572">evio::BaseStructure::removeFromParent</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a1f2a6022fb0d1af1a8ccfa4c6c56655c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; BaseStructure &gt; &gt; evio::BaseStructure::getChildren</definition>
        <argsstring>() const</argsstring>
        <name>getChildren</name>
        <briefdescription>
<para>Get the children of this structure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the children of this structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="431" column="21" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="447" bodyend="447"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" compoundref="da/d80/_base_structure_8h" startline="411">evio::BaseStructure::children</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a5b2df8aed45cf4534cd655772a68af67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getChildAt</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>getChildAt</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the child at the specified index in this node&apos;s child vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Originally part of java&apos;s DefaultMutableTreeNode. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>an index into this node&apos;s child array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>index</computeroutput> is out of bounds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> in this node&apos;s child array at the specified index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="432" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="457" bodyend="459"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" compoundref="da/d80/_base_structure_8h" startline="411">evio::BaseStructure::children</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ae823ac500f8419e635066d4ba8aa0d80" compoundref="dc/de3/_base_structure_8cpp" startline="1039" endline="1056">evio::BaseStructure::getChildAfter</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1aa4f07fa81af0ad966ff6860d399cd92b" compoundref="dc/de3/_base_structure_8cpp" startline="1072" endline="1089">evio::BaseStructure::getChildBefore</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1aafc1de1d8846a4141f9cc125860e80b7" compoundref="dc/de3/_base_structure_8cpp" startline="999" endline="1004">evio::BaseStructure::getFirstChild</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a32f3f0587d35660a188083139a7a9a1e" compoundref="dc/de3/_base_structure_8cpp" startline="1015" endline="1020">evio::BaseStructure::getLastChild</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af548a815cc358d4187e39378be02fc2c" compoundref="dc/de3/_base_structure_8cpp" startline="895" endline="923">evio::BaseStructure::getNextNode</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a3961ab65e777588a2215103779819d66" compoundref="dc/de3/_base_structure_8cpp" startline="415" endline="432">evio::BaseStructure::remove</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a3f0a34f51bbc96c4faeef160eaed0996" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t evio::BaseStructure::getChildCount</definition>
        <argsstring>() const</argsstring>
        <name>getChildCount</name>
        <briefdescription>
<para>Returns the number of children of this node. </para>
        </briefdescription>
        <detaileddescription>
<para>Originally part of java&apos;s DefaultMutableTreeNode. <simplesect kind="return"><para>the number of children of this node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="434" column="16" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="467" bodyend="467"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" compoundref="da/d80/_base_structure_8h" startline="411">evio::BaseStructure::children</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0bf8806bcb29279bf9f6fffe42067806" compoundref="dc/de3/_base_structure_8cpp" startline="612" endline="617">evio::BaseStructure::add</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ae823ac500f8419e635066d4ba8aa0d80" compoundref="dc/de3/_base_structure_8cpp" startline="1039" endline="1056">evio::BaseStructure::getChildAfter</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1aafc1de1d8846a4141f9cc125860e80b7" compoundref="dc/de3/_base_structure_8cpp" startline="999" endline="1004">evio::BaseStructure::getFirstChild</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a32f3f0587d35660a188083139a7a9a1e" compoundref="dc/de3/_base_structure_8cpp" startline="1015" endline="1020">evio::BaseStructure::getLastChild</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af548a815cc358d4187e39378be02fc2c" compoundref="dc/de3/_base_structure_8cpp" startline="895" endline="923">evio::BaseStructure::getNextNode</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1acf98ea08ba17e38d2c6b7b0af37293a9" compoundref="dc/de3/_base_structure_8cpp" startline="1226" endline="1226">evio::BaseStructure::isLeaf</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0dedb096d61e25bd1880e62ce55b2d1c" compoundref="dc/de3/_base_structure_8cpp" startline="972" endline="988">evio::BaseStructure::isNodeChild</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1aa7c077d1f2b7a835a2dbff7da6246970" compoundref="dc/de3/_base_structure_8cpp" startline="595" endline="599">evio::BaseStructure::removeAllChildren</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a7fe9f85e6b1c612098111c6b95481b84" compoundref="dc/de3/_base_structure_8cpp" startline="1571" endline="1587">evio::BaseStructure::treeToString</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1abde363c80f5877872d708d8b893a14d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t evio::BaseStructure::getIndex</definition>
        <argsstring>(const std::shared_ptr&lt; BaseStructure &gt; aChild)</argsstring>
        <name>getIndex</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
          <declname>aChild</declname>
        </param>
        <briefdescription>
<para>Returns the index of the specified child in this node&apos;s child vector. </para>
        </briefdescription>
        <detaileddescription>
<para>If the specified node is not a child of this node, returns <computeroutput>-1</computeroutput>. This method performs a linear search and is O(n) where n is the number of children. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aChild</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> to search for among this node&apos;s children. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>aChild</computeroutput> is null. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an int giving the index of the node in this node&apos;s child array, or <computeroutput>-1</computeroutput> if the specified node is a not a child of this node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="435" column="17" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="483" bodyend="505"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" compoundref="da/d80/_base_structure_8h" startline="411">evio::BaseStructure::children</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5f4561d633f547ffe744cbfb68de97e3" compoundref="da/d80/_base_structure_8h" startline="392" endline="392">evio::BaseStructure::end</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a0dedb096d61e25bd1880e62ce55b2d1c" compoundref="dc/de3/_base_structure_8cpp" startline="972" endline="988">evio::BaseStructure::isNodeChild</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ae823ac500f8419e635066d4ba8aa0d80" compoundref="dc/de3/_base_structure_8cpp" startline="1039" endline="1056">evio::BaseStructure::getChildAfter</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1aa4f07fa81af0ad966ff6860d399cd92b" compoundref="dc/de3/_base_structure_8cpp" startline="1072" endline="1089">evio::BaseStructure::getChildBefore</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a55c78ec59a4f5ba5004a425891b39fc4" compoundref="dc/de3/_base_structure_8cpp" startline="582" endline="587">evio::BaseStructure::remove</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ac91b87b457e9dfc0555202f4a534b3bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; &gt;::<ref refid="d9/ddd/classevio_1_1_base_structure_1a9e1427e32d6d200e1f02f9dff936cbc4" kindref="member">iterator</ref></type>
        <definition>std::vector&lt; std::shared_ptr&lt; BaseStructure &gt; &gt;::iterator evio::BaseStructure::childrenBegin</definition>
        <argsstring>()</argsstring>
        <name>childrenBegin</name>
        <briefdescription>
<para>Creates and returns a forward-order begin iterator of this node&apos;s children. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifying this node&apos;s child array invalidates any child iterators created before the modification. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="return"><para>a begin iterator of this node&apos;s children. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="436" column="32" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="516" bodyend="516"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" compoundref="da/d80/_base_structure_8h" startline="411">evio::BaseStructure::children</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a5c04b4a9d58ab6ac98218df1173a0338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; &gt;::<ref refid="d9/ddd/classevio_1_1_base_structure_1a9e1427e32d6d200e1f02f9dff936cbc4" kindref="member">iterator</ref></type>
        <definition>std::vector&lt; std::shared_ptr&lt; BaseStructure &gt; &gt;::iterator evio::BaseStructure::childrenEnd</definition>
        <argsstring>()</argsstring>
        <name>childrenEnd</name>
        <briefdescription>
<para>Creates and returns a forward-order end iterator of this node&apos;s children. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifying this node&apos;s child array invalidates any child iterators created before the modification. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="return"><para>an end iterator of this node&apos;s children. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="437" column="32" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="527" bodyend="527"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" compoundref="da/d80/_base_structure_8h" startline="411">evio::BaseStructure::children</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a098f7f23b0646a750a59181ff232838e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::setAllowsChildren</definition>
        <argsstring>(bool allows)</argsstring>
        <name>setAllowsChildren</name>
        <param>
          <type>bool</type>
          <declname>allows</declname>
        </param>
        <briefdescription>
<para>Determines whether or not this node is allowed to have children. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>allows</computeroutput> is false, all of this node&apos;s children are removed. Originally part of java&apos;s DefaultMutableTreeNode. </para>
<para>Note: By default, a node allows children.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allows</parametername>
</parameternamelist>
<parameterdescription>
<para>true if this node is allowed to have children. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="439" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="539" bodyend="546"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a7dd7cf17b8603987a79ad89cbbeb9783" compoundref="da/d80/_base_structure_8h" startline="414">evio::BaseStructure::allowsChildren</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1aa7c077d1f2b7a835a2dbff7da6246970" compoundref="dc/de3/_base_structure_8cpp" startline="595" endline="599">evio::BaseStructure::removeAllChildren</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1abf1788d29991b16091ebfb96ae7627ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::BaseStructure::getAllowsChildren</definition>
        <argsstring>() const</argsstring>
        <name>getAllowsChildren</name>
        <briefdescription>
<para>Returns true if this node is allowed to have children. </para>
        </briefdescription>
        <detaileddescription>
<para>Originally part of java&apos;s DefaultMutableTreeNode. <simplesect kind="return"><para>true if this node allows children, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="440" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="554" bodyend="554"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a7dd7cf17b8603987a79ad89cbbeb9783" compoundref="da/d80/_base_structure_8h" startline="414">evio::BaseStructure::allowsChildren</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a1befb9979d5e205e6aa921627ffafabb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::removeFromParent</definition>
        <argsstring>()</argsstring>
        <name>removeFromParent</name>
        <briefdescription>
<para>Removes the subtree rooted at this node from the tree, giving this node a null parent. </para>
        </briefdescription>
        <detaileddescription>
<para>Does nothing if this node is the root of its tree. Originally part of java&apos;s DefaultMutableTreeNode. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="446" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="567" bodyend="572"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a70802d7ff9b48f7b924bd448868e5266" compoundref="dc/de3/_base_structure_8cpp" startline="440" endline="440">evio::BaseStructure::getParent</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a90eb00ca90216fa72d3b36f5995cdb59" compoundref="da/d80/_base_structure_8h" startline="418" endline="418">evio::BaseStructure::getThis</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1aa7c077d1f2b7a835a2dbff7da6246970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::removeAllChildren</definition>
        <argsstring>()</argsstring>
        <name>removeAllChildren</name>
        <briefdescription>
<para>Removes all of this node&apos;s children, setting their parents to null. </para>
        </briefdescription>
        <detaileddescription>
<para>If this node has no children, this method does nothing. Originally part of java&apos;s DefaultMutableTreeNode. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="448" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="595" bodyend="599"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3f0a34f51bbc96c4faeef160eaed0996" compoundref="dc/de3/_base_structure_8cpp" startline="467" endline="467">evio::BaseStructure::getChildCount</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3961ab65e777588a2215103779819d66" compoundref="dc/de3/_base_structure_8cpp" startline="415" endline="432">evio::BaseStructure::remove</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a098f7f23b0646a750a59181ff232838e" compoundref="dc/de3/_base_structure_8cpp" startline="539" endline="546">evio::BaseStructure::setAllowsChildren</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a0bf8806bcb29279bf9f6fffe42067806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::add</definition>
        <argsstring>(std::shared_ptr&lt; BaseStructure &gt; newChild)</argsstring>
        <name>add</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
          <declname>newChild</declname>
        </param>
        <briefdescription>
<para>Removes <computeroutput>newChild</computeroutput> from its parent and makes it a child of this node by adding it to the end of this node&apos;s child array. </para>
        </briefdescription>
        <detaileddescription>
<para>Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1a015be72a2d2a8d0d806d3d3c9d90ca83" kindref="member">insert</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newChild</parametername>
</parameternamelist>
<parameterdescription>
<para>node to add as a child of this node. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>newChild</computeroutput> is null, or this node does not allow children. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="449" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="612" bodyend="617"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3f0a34f51bbc96c4faeef160eaed0996" compoundref="dc/de3/_base_structure_8cpp" startline="467" endline="467">evio::BaseStructure::getChildCount</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a90eb00ca90216fa72d3b36f5995cdb59" compoundref="da/d80/_base_structure_8h" startline="418" endline="418">evio::BaseStructure::getThis</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a015be72a2d2a8d0d806d3d3c9d90ca83" compoundref="dc/de3/_base_structure_8cpp" startline="380" endline="404">evio::BaseStructure::insert</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ae1ac1caa124541ce3f2c650f9fc93918" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::BaseStructure::isNodeAncestor</definition>
        <argsstring>(const std::shared_ptr&lt; BaseStructure &gt; anotherNode) const</argsstring>
        <name>isNodeAncestor</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
          <declname>anotherNode</declname>
        </param>
        <briefdescription>
<para>Returns true if <computeroutput>anotherNode</computeroutput> is an ancestor of this node <ndash/> if it is this node, this node&apos;s parent, or an ancestor of this node&apos;s parent. </para>
        </briefdescription>
        <detaileddescription>
<para>(Note that a node is considered an ancestor of itself.) If <computeroutput>anotherNode</computeroutput> is null, this method returns false. This operation is at worst O(h) where h is the distance from the root to this node. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1ad3d833d7d9b300b2957733a8ea3c55ba" kindref="member">isNodeDescendant</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1aa3c835fa26a5f6fd69dc201f1b148690" kindref="member">getSharedAncestor</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anotherNode</parametername>
</parameternamelist>
<parameterdescription>
<para>node to test as an ancestor of this node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this node is a descendant of <computeroutput>anotherNode</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="455" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="638" bodyend="652"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae729917eb076c7a35adb765b8fbbab84" compoundref="da/d80/_base_structure_8h" startline="419" endline="419">evio::BaseStructure::getThisConst</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a015be72a2d2a8d0d806d3d3c9d90ca83" compoundref="dc/de3/_base_structure_8cpp" startline="380" endline="404">evio::BaseStructure::insert</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ad3d833d7d9b300b2957733a8ea3c55ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::BaseStructure::isNodeDescendant</definition>
        <argsstring>(std::shared_ptr&lt; BaseStructure &gt; anotherNode)</argsstring>
        <name>isNodeDescendant</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
          <declname>anotherNode</declname>
        </param>
        <briefdescription>
<para>Returns true if <computeroutput>anotherNode</computeroutput> is a descendant of this node <ndash/> if it is this node, one of this node&apos;s children, or a descendant of one of this node&apos;s children. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that a node is considered a descendant of itself. If <computeroutput>anotherNode</computeroutput> is null, returns false. This operation is at worst O(h) where h is the distance from the root to <computeroutput>anotherNode</computeroutput>. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1ae1ac1caa124541ce3f2c650f9fc93918" kindref="member">isNodeAncestor</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1aa3c835fa26a5f6fd69dc201f1b148690" kindref="member">getSharedAncestor</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anotherNode</parametername>
</parameternamelist>
<parameterdescription>
<para>node to test as descendant of this node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this node is an ancestor of <computeroutput>anotherNode</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="456" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="668" bodyend="673"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a90eb00ca90216fa72d3b36f5995cdb59" compoundref="da/d80/_base_structure_8h" startline="418" endline="418">evio::BaseStructure::getThis</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1aa3c835fa26a5f6fd69dc201f1b148690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getSharedAncestor</definition>
        <argsstring>(std::shared_ptr&lt; BaseStructure &gt; aNode)</argsstring>
        <name>getSharedAncestor</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
          <declname>aNode</declname>
        </param>
        <briefdescription>
<para>Returns the nearest common ancestor to this node and <computeroutput>aNode</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns null if no such ancestor exists <ndash/> if this node and <computeroutput>aNode</computeroutput> are in different trees or if <computeroutput>aNode</computeroutput> is null. A node is considered an ancestor of itself. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1ae1ac1caa124541ce3f2c650f9fc93918" kindref="member">isNodeAncestor</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1ad3d833d7d9b300b2957733a8ea3c55ba" kindref="member">isNodeDescendant</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aNode</parametername>
</parameternamelist>
<parameterdescription>
<para>node to find common ancestor with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if internal logic error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nearest ancestor common to this node and <computeroutput>aNode</computeroutput>, or null if none. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="457" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="690" bodyend="742"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a66c6db380ce04efa87430c79358e72d5" compoundref="dc/de3/_base_structure_8cpp" startline="793" endline="802">evio::BaseStructure::getLevel</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a90eb00ca90216fa72d3b36f5995cdb59" compoundref="da/d80/_base_structure_8h" startline="418" endline="418">evio::BaseStructure::getThis</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1add0599ffe7241826de84b869acd2522a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::BaseStructure::isNodeRelated</definition>
        <argsstring>(std::shared_ptr&lt; BaseStructure &gt; aNode)</argsstring>
        <name>isNodeRelated</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
          <declname>aNode</declname>
        </param>
        <briefdescription>
<para>Returns true if and only if <computeroutput>aNode</computeroutput> is in the same tree as this node. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns false if <computeroutput>aNode</computeroutput> is null. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1aa3c835fa26a5f6fd69dc201f1b148690" kindref="member">getSharedAncestor</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1a106e3a5e0396a3a7ca3cd8fff899be01" kindref="member">getRoot</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aNode</parametername>
</parameternamelist>
<parameterdescription>
<para>structure to test if it&apos;s in the same tree as this one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>aNode</computeroutput> is in the same tree as this node; false if <computeroutput>aNode</computeroutput> is null </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="458" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="756" bodyend="758"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a106e3a5e0396a3a7ca3cd8fff899be01" compoundref="dc/de3/_base_structure_8cpp" startline="862" endline="872">evio::BaseStructure::getRoot</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a9b038ad8e9a6b35538890289ec4e065b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::BaseStructure::getDepth</definition>
        <argsstring>()</argsstring>
        <name>getDepth</name>
        <briefdescription>
<para>Returns the depth of the tree rooted at this node <ndash/> the longest distance from this node to a leaf. </para>
        </briefdescription>
        <detaileddescription>
<para>If this node has no children, returns 0. This operation is much more expensive than <computeroutput><ref refid="d9/ddd/classevio_1_1_base_structure_1a66c6db380ce04efa87430c79358e72d5" kindref="member">getLevel()</ref></computeroutput> because it must effectively traverse the entire tree rooted at this node. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1a66c6db380ce04efa87430c79358e72d5" kindref="member">getLevel</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if internal logic error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the depth of the tree whose root is this node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="459" column="18" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="772" bodyend="782"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1adfe7d36699cb3376c5d44551edf3fb8f" compoundref="da/d80/_base_structure_8h" startline="398" endline="398">evio::BaseStructure::bbegin</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a68fb4345c10511f9aa796006d324647b" compoundref="da/d80/_base_structure_8h" startline="403" endline="403">evio::BaseStructure::bend</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a66c6db380ce04efa87430c79358e72d5" compoundref="dc/de3/_base_structure_8cpp" startline="793" endline="802">evio::BaseStructure::getLevel</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a66c6db380ce04efa87430c79358e72d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::BaseStructure::getLevel</definition>
        <argsstring>() const</argsstring>
        <name>getLevel</name>
        <briefdescription>
<para>Returns the number of levels above this node <ndash/> the distance from the root to this node. </para>
        </briefdescription>
        <detaileddescription>
<para>If this node is the root, returns 0. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1a9b038ad8e9a6b35538890289ec4e065b" kindref="member">getDepth</ref> </para>
</simplesect>
<simplesect kind="return"><para>the number of levels above this node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="460" column="18" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="793" bodyend="802"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae729917eb076c7a35adb765b8fbbab84" compoundref="da/d80/_base_structure_8h" startline="419" endline="419">evio::BaseStructure::getThisConst</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a9b038ad8e9a6b35538890289ec4e065b" compoundref="dc/de3/_base_structure_8cpp" startline="772" endline="782">evio::BaseStructure::getDepth</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1aa3c835fa26a5f6fd69dc201f1b148690" compoundref="dc/de3/_base_structure_8cpp" startline="690" endline="742">evio::BaseStructure::getSharedAncestor</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1aa60a696d28dc913f60e7f37baa01af65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; BaseStructure &gt; &gt; evio::BaseStructure::getPath</definition>
        <argsstring>()</argsstring>
        <name>getPath</name>
        <briefdescription>
<para>Returns the path from the root, to get to this node. </para>
        </briefdescription>
        <detaileddescription>
<para>The last element in the path is this node. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="return"><para>an vector of <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> shared pointer giving the path, where the first element in the path is the root and the last element is this node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="461" column="21" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="814" bodyend="816"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a7bee59156af6c2a4d83eabeb93a33eb5" compoundref="dc/de3/_base_structure_8cpp" startline="831" endline="852">evio::BaseStructure::getPathToRoot</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a90eb00ca90216fa72d3b36f5995cdb59" compoundref="da/d80/_base_structure_8h" startline="418" endline="418">evio::BaseStructure::getThis</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a106e3a5e0396a3a7ca3cd8fff899be01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getRoot</definition>
        <argsstring>()</argsstring>
        <name>getRoot</name>
        <briefdescription>
<para>Returns the root of the tree that contains this node. </para>
        </briefdescription>
        <detaileddescription>
<para>The root is the ancestor with a null parent. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1ae1ac1caa124541ce3f2c650f9fc93918" kindref="member">isNodeAncestor</ref> </para>
</simplesect>
<simplesect kind="return"><para>the root of the tree that contains this node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="469" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="862" bodyend="872"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a90eb00ca90216fa72d3b36f5995cdb59" compoundref="da/d80/_base_structure_8h" startline="418" endline="418">evio::BaseStructure::getThis</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1add0599ffe7241826de84b869acd2522a" compoundref="dc/de3/_base_structure_8cpp" startline="756" endline="758">evio::BaseStructure::isNodeRelated</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a95a5ea0dd8b56c9bcc2a0ae728ac4f65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::BaseStructure::isRoot</definition>
        <argsstring>() const</argsstring>
        <name>isRoot</name>
        <briefdescription>
<para>Returns true if this node is the root of the tree. </para>
        </briefdescription>
        <detaileddescription>
<para>The root is the only node in the tree with a null parent; every tree has exactly one root. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="return"><para>true if this node is the root of its tree. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="470" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="882" bodyend="882"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a70802d7ff9b48f7b924bd448868e5266" compoundref="dc/de3/_base_structure_8cpp" startline="440" endline="440">evio::BaseStructure::getParent</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1af548a815cc358d4187e39378be02fc2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getNextNode</definition>
        <argsstring>()</argsstring>
        <name>getNextNode</name>
        <briefdescription>
<para>Returns the node that follows this node in a preorder traversal of this node&apos;s tree (return left nodes all the way down before coming back and doing siblings from bottom up). </para>
        </briefdescription>
        <detaileddescription>
<para>Returns null if this node is the last node of the traversal. This is an inefficient way to traverse the entire tree; use an iterator instead. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="return"><para>the node that follows this node in a preorder traversal, or null if this node is last. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="471" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="895" bodyend="923"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5b2df8aed45cf4534cd655772a68af67" compoundref="dc/de3/_base_structure_8cpp" startline="457" endline="459">evio::BaseStructure::getChildAt</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3f0a34f51bbc96c4faeef160eaed0996" compoundref="dc/de3/_base_structure_8cpp" startline="467" endline="467">evio::BaseStructure::getChildCount</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acf9557af3d316538b7b0929c8ba80e51" compoundref="dc/de3/_base_structure_8cpp" startline="1161" endline="1178">evio::BaseStructure::getNextSibling</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a70802d7ff9b48f7b924bd448868e5266" compoundref="dc/de3/_base_structure_8cpp" startline="440" endline="440">evio::BaseStructure::getParent</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ab25c72ef83ab662bcbed3517c346ab17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getPreviousNode</definition>
        <argsstring>()</argsstring>
        <name>getPreviousNode</name>
        <briefdescription>
<para>Returns the node that precedes this node in a preorder traversal of this node&apos;s tree (return left nodes all the way down before coming back and doing siblings from bottom up). </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>null</computeroutput> if this node is the first node of the traversal <ndash/> the root of the tree. This is an inefficient way to traverse the entire tree; use an iterator instead. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="return"><para>the node that precedes this node in a preorder traversal, or null if this node is the first. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="472" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="938" bodyend="955"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a70802d7ff9b48f7b924bd448868e5266" compoundref="dc/de3/_base_structure_8cpp" startline="440" endline="440">evio::BaseStructure::getParent</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a54b447d883807ece3fdd067f43e74824" compoundref="dc/de3/_base_structure_8cpp" startline="1191" endline="1208">evio::BaseStructure::getPreviousSibling</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a0dedb096d61e25bd1880e62ce55b2d1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::BaseStructure::isNodeChild</definition>
        <argsstring>(const std::shared_ptr&lt; BaseStructure &gt; aNode) const</argsstring>
        <name>isNodeChild</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
          <declname>aNode</declname>
        </param>
        <briefdescription>
<para>Returns true if <computeroutput>aNode</computeroutput> is a child of this node. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>aNode</computeroutput> is null, this method returns false. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aNode</parametername>
</parameternamelist>
<parameterdescription>
<para>structure to test if it&apos;s a child of this one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>aNode</computeroutput> is a child of this node; false if <computeroutput>aNode</computeroutput> is null. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="478" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="972" bodyend="988"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3f0a34f51bbc96c4faeef160eaed0996" compoundref="dc/de3/_base_structure_8cpp" startline="467" endline="467">evio::BaseStructure::getChildCount</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae729917eb076c7a35adb765b8fbbab84" compoundref="da/d80/_base_structure_8h" startline="419" endline="419">evio::BaseStructure::getThisConst</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1abde363c80f5877872d708d8b893a14d2" compoundref="dc/de3/_base_structure_8cpp" startline="483" endline="505">evio::BaseStructure::getIndex</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a55c78ec59a4f5ba5004a425891b39fc4" compoundref="dc/de3/_base_structure_8cpp" startline="582" endline="587">evio::BaseStructure::remove</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1aafc1de1d8846a4141f9cc125860e80b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getFirstChild</definition>
        <argsstring>() const</argsstring>
        <name>getFirstChild</name>
        <briefdescription>
<para>Returns this node&apos;s first child. </para>
        </briefdescription>
        <detaileddescription>
<para>If this node has no children, throws <ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref>. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="return"><para>the first child of this node </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this node has no children. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="479" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="999" bodyend="1004"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5b2df8aed45cf4534cd655772a68af67" compoundref="dc/de3/_base_structure_8cpp" startline="457" endline="459">evio::BaseStructure::getChildAt</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3f0a34f51bbc96c4faeef160eaed0996" compoundref="dc/de3/_base_structure_8cpp" startline="467" endline="467">evio::BaseStructure::getChildCount</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a32f3f0587d35660a188083139a7a9a1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getLastChild</definition>
        <argsstring>() const</argsstring>
        <name>getLastChild</name>
        <briefdescription>
<para>Returns this node&apos;s last child. </para>
        </briefdescription>
        <detaileddescription>
<para>If this node has no children, throws <ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref>. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="return"><para>the last child of this node. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this node has no children. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="480" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1015" bodyend="1020"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5b2df8aed45cf4534cd655772a68af67" compoundref="dc/de3/_base_structure_8cpp" startline="457" endline="459">evio::BaseStructure::getChildAt</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3f0a34f51bbc96c4faeef160eaed0996" compoundref="dc/de3/_base_structure_8cpp" startline="467" endline="467">evio::BaseStructure::getChildCount</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ae823ac500f8419e635066d4ba8aa0d80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getChildAfter</definition>
        <argsstring>(const std::shared_ptr&lt; BaseStructure &gt; aChild)</argsstring>
        <name>getChildAfter</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
          <declname>aChild</declname>
        </param>
        <briefdescription>
<para>Returns the child in this node&apos;s child vector that immediately follows <computeroutput>aChild</computeroutput>, which must be a child of this node. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>aChild</computeroutput> is the last child, returns null. This method performs a linear search of this node&apos;s children for <computeroutput>aChild</computeroutput> and is O(n) where n is the number of children; to traverse the entire vector of children, use an iterator instead. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" kindref="member">children</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aChild</parametername>
</parameternamelist>
<parameterdescription>
<para>child of this node which immediately precedes the returned child structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>aChild</computeroutput> is null or is not a child of this node. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the child of this node that immediately follows <computeroutput>aChild</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="481" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1039" bodyend="1056"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5b2df8aed45cf4534cd655772a68af67" compoundref="dc/de3/_base_structure_8cpp" startline="457" endline="459">evio::BaseStructure::getChildAt</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3f0a34f51bbc96c4faeef160eaed0996" compoundref="dc/de3/_base_structure_8cpp" startline="467" endline="467">evio::BaseStructure::getChildCount</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1abde363c80f5877872d708d8b893a14d2" compoundref="dc/de3/_base_structure_8cpp" startline="483" endline="505">evio::BaseStructure::getIndex</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1aa4f07fa81af0ad966ff6860d399cd92b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getChildBefore</definition>
        <argsstring>(const std::shared_ptr&lt; BaseStructure &gt; aChild)</argsstring>
        <name>getChildBefore</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
          <declname>aChild</declname>
        </param>
        <briefdescription>
<para>Returns the child in this node&apos;s child vector that immediately precedes <computeroutput>aChild</computeroutput>, which must be a child of this node. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>aChild</computeroutput> is the first child, returns null. This method performs a linear search of this node&apos;s children for <computeroutput>aChild</computeroutput> and is O(n) where n is the number of children. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aChild</parametername>
</parameternamelist>
<parameterdescription>
<para>child of this node which comes immediately after the returned child structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>aChild</computeroutput> is null or is not a child of this node. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the child of this node that immediately precedes <computeroutput>aChild</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="482" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1072" bodyend="1089"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5b2df8aed45cf4534cd655772a68af67" compoundref="dc/de3/_base_structure_8cpp" startline="457" endline="459">evio::BaseStructure::getChildAt</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1abde363c80f5877872d708d8b893a14d2" compoundref="dc/de3/_base_structure_8cpp" startline="483" endline="505">evio::BaseStructure::getIndex</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a156969f00dbcbe831d02cb28236b4e93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::BaseStructure::isNodeSibling</definition>
        <argsstring>(const std::shared_ptr&lt; BaseStructure &gt; anotherNode) const</argsstring>
        <name>isNodeSibling</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
          <declname>anotherNode</declname>
        </param>
        <briefdescription>
<para>Returns true if <computeroutput>anotherNode</computeroutput> is a sibling of (has the same parent as) this node. </para>
        </briefdescription>
        <detaileddescription>
<para>A node is its own sibling. If <computeroutput>anotherNode</computeroutput> is null, returns false. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anotherNode</parametername>
</parameternamelist>
<parameterdescription>
<para>node to test as sibling of this node. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if sibling has different parent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if <computeroutput>anotherNode</computeroutput> is a sibling of this node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="488" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1107" bodyend="1126"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a70802d7ff9b48f7b924bd448868e5266" compoundref="dc/de3/_base_structure_8cpp" startline="440" endline="440">evio::BaseStructure::getParent</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae729917eb076c7a35adb765b8fbbab84" compoundref="da/d80/_base_structure_8h" startline="419" endline="419">evio::BaseStructure::getThisConst</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1acf9557af3d316538b7b0929c8ba80e51" compoundref="dc/de3/_base_structure_8cpp" startline="1161" endline="1178">evio::BaseStructure::getNextSibling</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a54b447d883807ece3fdd067f43e74824" compoundref="dc/de3/_base_structure_8cpp" startline="1191" endline="1208">evio::BaseStructure::getPreviousSibling</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ad2f13cac7d47b222f31c71d797fd9ec1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t evio::BaseStructure::getSiblingCount</definition>
        <argsstring>() const</argsstring>
        <name>getSiblingCount</name>
        <briefdescription>
<para>Returns the number of siblings of this node. </para>
        </briefdescription>
        <detaileddescription>
<para>A node is its own sibling (if it has no parent or no siblings, this method returns <computeroutput>1</computeroutput>). Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="return"><para>the number of siblings of this node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="489" column="16" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1137" bodyend="1146"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a70802d7ff9b48f7b924bd448868e5266" compoundref="dc/de3/_base_structure_8cpp" startline="440" endline="440">evio::BaseStructure::getParent</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1acf9557af3d316538b7b0929c8ba80e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getNextSibling</definition>
        <argsstring>()</argsstring>
        <name>getNextSibling</name>
        <briefdescription>
<para>Returns the next sibling of this node in the parent&apos;s children vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns null if this node has no parent or is the parent&apos;s last child. This method performs a linear search that is O(n) where n is the number of children; to traverse the entire array, use the parent&apos;s child iterator instead. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" kindref="member">children</ref>. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if child of parent is not a sibling. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the sibling of this node that immediately follows this node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="490" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1161" bodyend="1178"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a70802d7ff9b48f7b924bd448868e5266" compoundref="dc/de3/_base_structure_8cpp" startline="440" endline="440">evio::BaseStructure::getParent</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a90eb00ca90216fa72d3b36f5995cdb59" compoundref="da/d80/_base_structure_8h" startline="418" endline="418">evio::BaseStructure::getThis</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a156969f00dbcbe831d02cb28236b4e93" compoundref="dc/de3/_base_structure_8cpp" startline="1107" endline="1126">evio::BaseStructure::isNodeSibling</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a3a9e454880823fc12618657e361eda9a" compoundref="dc/de3/_base_structure_8cpp" startline="1290" endline="1303">evio::BaseStructure::getNextLeaf</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af548a815cc358d4187e39378be02fc2c" compoundref="dc/de3/_base_structure_8cpp" startline="895" endline="923">evio::BaseStructure::getNextNode</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a54b447d883807ece3fdd067f43e74824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getPreviousSibling</definition>
        <argsstring>()</argsstring>
        <name>getPreviousSibling</name>
        <briefdescription>
<para>Returns the previous sibling of this node in the parent&apos;s children vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns null if this node has no parent or is the parent&apos;s first child. This method performs a linear search that is O(n) where n is the number of children. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if child of parent is not a sibling. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the sibling of this node that immediately precedes this node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="491" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1191" bodyend="1208"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a70802d7ff9b48f7b924bd448868e5266" compoundref="dc/de3/_base_structure_8cpp" startline="440" endline="440">evio::BaseStructure::getParent</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a90eb00ca90216fa72d3b36f5995cdb59" compoundref="da/d80/_base_structure_8h" startline="418" endline="418">evio::BaseStructure::getThis</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a156969f00dbcbe831d02cb28236b4e93" compoundref="dc/de3/_base_structure_8cpp" startline="1107" endline="1126">evio::BaseStructure::isNodeSibling</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af475cd78e3dbbefdbf0ddbc4f21123d3" compoundref="dc/de3/_base_structure_8cpp" startline="1325" endline="1338">evio::BaseStructure::getPreviousLeaf</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ab25c72ef83ab662bcbed3517c346ab17" compoundref="dc/de3/_base_structure_8cpp" startline="938" endline="955">evio::BaseStructure::getPreviousNode</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1acf98ea08ba17e38d2c6b7b0af37293a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::BaseStructure::isLeaf</definition>
        <argsstring>() const</argsstring>
        <name>isLeaf</name>
        <briefdescription>
<para>Returns true if this node has no children. </para>
        </briefdescription>
        <detaileddescription>
<para>To distinguish between nodes that have no children and nodes that <emphasis>cannot</emphasis> have children (e.g. to distinguish files from empty directories), use this method in conjunction with <computeroutput>getAllowsChildren</computeroutput>. Originally part of java&apos;s DefaultMutableBaseStructure.</para>
<para><simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1abf1788d29991b16091ebfb96ae7627ec" kindref="member">getAllowsChildren</ref> </para>
</simplesect>
<simplesect kind="return"><para>true if this node has no children. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="497" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1226" bodyend="1226"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3f0a34f51bbc96c4faeef160eaed0996" compoundref="dc/de3/_base_structure_8cpp" startline="467" endline="467">evio::BaseStructure::getChildCount</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a7dbf9d7691f2c8ebb1fea19fdfb67482" compoundref="dc/de3/_base_structure_8cpp" startline="2551" endline="2597">evio::BaseStructure::dataLength</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a7fe9f85e6b1c612098111c6b95481b84" compoundref="dc/de3/_base_structure_8cpp" startline="1571" endline="1587">evio::BaseStructure::treeToString</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a165601aa2afb10063c6725a54b80f7b5" compoundref="dc/de3/_base_structure_8cpp" startline="2731" endline="2869">evio::BaseStructure::write</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a4ef4e13ada4b6c8a131c4a23d0f9fba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getFirstLeaf</definition>
        <argsstring>()</argsstring>
        <name>getFirstLeaf</name>
        <briefdescription>
<para>Finds and returns the first leaf that is a descendant of this node <ndash/> either this node or its first child&apos;s first leaf. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns this node if it is a leaf. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1acf98ea08ba17e38d2c6b7b0af37293a9" kindref="member">isLeaf</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1ad3d833d7d9b300b2957733a8ea3c55ba" kindref="member">isNodeDescendant</ref> </para>
</simplesect>
<simplesect kind="return"><para>the first leaf in the subtree rooted at this node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="498" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1239" bodyend="1247"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a90eb00ca90216fa72d3b36f5995cdb59" compoundref="da/d80/_base_structure_8h" startline="418" endline="418">evio::BaseStructure::getThis</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a7299ce9b855d3b1b9193369eb930dfe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getLastLeaf</definition>
        <argsstring>()</argsstring>
        <name>getLastLeaf</name>
        <briefdescription>
<para>Finds and returns the last leaf that is a descendant of this node <ndash/> either this node or its last child&apos;s last leaf. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns this node if it is a leaf. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1acf98ea08ba17e38d2c6b7b0af37293a9" kindref="member">isLeaf</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1ad3d833d7d9b300b2957733a8ea3c55ba" kindref="member">isNodeDescendant</ref> </para>
</simplesect>
<simplesect kind="return"><para>the last leaf in the subtree rooted at this node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="499" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1260" bodyend="1268"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a90eb00ca90216fa72d3b36f5995cdb59" compoundref="da/d80/_base_structure_8h" startline="418" endline="418">evio::BaseStructure::getThis</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a3a9e454880823fc12618657e361eda9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getNextLeaf</definition>
        <argsstring>()</argsstring>
        <name>getNextLeaf</name>
        <briefdescription>
<para>Returns the leaf after this node or null if this node is the last leaf in the tree. </para>
        </briefdescription>
        <detaileddescription>
<para>This operation is very inefficient. In order to determine the next node, this method first performs a linear search in the parent&apos;s child-list in order to find the current node. </para>
<para>This implementation makes the operation suitable for short traversals from a known position. But to traverse all of the leaves in the tree, you should use A depth-first iterator of the nodes in the tree and use <computeroutput>isLeaf</computeroutput> on each node to determine which are leaves. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="see"><para><ref refid="d5/d6b/classevio_1_1node_iterator" kindref="compound">nodeIterator</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1acf98ea08ba17e38d2c6b7b0af37293a9" kindref="member">isLeaf</ref> </para>
</simplesect>
<simplesect kind="return"><para>returns the next leaf past this node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="500" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1290" bodyend="1303"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acf9557af3d316538b7b0929c8ba80e51" compoundref="dc/de3/_base_structure_8cpp" startline="1161" endline="1178">evio::BaseStructure::getNextSibling</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a70802d7ff9b48f7b924bd448868e5266" compoundref="dc/de3/_base_structure_8cpp" startline="440" endline="440">evio::BaseStructure::getParent</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1af475cd78e3dbbefdbf0ddbc4f21123d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructure &gt; evio::BaseStructure::getPreviousLeaf</definition>
        <argsstring>()</argsstring>
        <name>getPreviousLeaf</name>
        <briefdescription>
<para>Returns the leaf before this node or null if this node is the first leaf in the tree. </para>
        </briefdescription>
        <detaileddescription>
<para>This operation is very inefficient. In order to determine the previous node, this method first performs a linear search in the parent&apos;s child-list in order to find the current node. </para>
<para>This implementation makes the operation suitable for short traversals from a known position. But to traverse all of the leaves in the tree, you should use A depth-first iterator of the nodes in the tree and use <computeroutput>isLeaf</computeroutput> on each node to determine which are leaves. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="see"><para><ref refid="d5/d6b/classevio_1_1node_iterator" kindref="compound">nodeIterator</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1acf98ea08ba17e38d2c6b7b0af37293a9" kindref="member">isLeaf</ref> </para>
</simplesect>
<simplesect kind="return"><para>returns the leaf before this node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="501" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1325" bodyend="1338"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a70802d7ff9b48f7b924bd448868e5266" compoundref="dc/de3/_base_structure_8cpp" startline="440" endline="440">evio::BaseStructure::getParent</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a54b447d883807ece3fdd067f43e74824" compoundref="dc/de3/_base_structure_8cpp" startline="1191" endline="1208">evio::BaseStructure::getPreviousSibling</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a22f78ec396671f5e421c9f23bdc7f06b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t evio::BaseStructure::getLeafCount</definition>
        <argsstring>()</argsstring>
        <name>getLeafCount</name>
        <briefdescription>
<para>Returns the total number of leaves that are descendants of this node. </para>
        </briefdescription>
        <detaileddescription>
<para>If this node is a leaf, returns <computeroutput>1</computeroutput>. This method is O(n) where n is the number of descendants of this node. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><simplesect kind="see"><para><ref refid="d9/ddd/classevio_1_1_base_structure_1ae1ac1caa124541ce3f2c650f9fc93918" kindref="member">isNodeAncestor</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if tree has zero leaves. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of leaves beneath this node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="502" column="17" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1351" bodyend="1368"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1adfe7d36699cb3376c5d44551edf3fb8f" compoundref="da/d80/_base_structure_8h" startline="398" endline="398">evio::BaseStructure::bbegin</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a68fb4345c10511f9aa796006d324647b" compoundref="da/d80/_base_structure_8h" startline="403" endline="403">evio::BaseStructure::bend</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a25dfdca6a73381878becf7f87c4bc85e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::visitAllStructures</definition>
        <argsstring>(std::shared_ptr&lt; IEvioListener &gt; listener)</argsstring>
        <name>visitAllStructures</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/d71/classevio_1_1_i_evio_listener" kindref="compound">IEvioListener</ref> &gt;</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Visit all the structures in this structure (including the structure itself <ndash/> which is considered its own descendant). </para>
        </briefdescription>
        <detaileddescription>
<para>This is similar to listening to the event as it is being parsed, but is done to a complete (already) parsed event.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>a listener to notify as each structure is visited. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="508" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1384" bodyend="1386"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a90eb00ca90216fa72d3b36f5995cdb59" compoundref="da/d80/_base_structure_8h" startline="418" endline="418">evio::BaseStructure::getThis</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a7f61b0849a7f260192bfc77f8fd74a7d" compoundref="dc/de3/_base_structure_8cpp" startline="1444" endline="1464">evio::BaseStructure::getMatchingStructures</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1abbbded337a8b13bbab1159d89e8d9743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::visitAllStructures</definition>
        <argsstring>(std::shared_ptr&lt; IEvioListener &gt; listener, std::shared_ptr&lt; IEvioFilter &gt; filter)</argsstring>
        <name>visitAllStructures</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/d71/classevio_1_1_i_evio_listener" kindref="compound">IEvioListener</ref> &gt;</type>
          <declname>listener</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d78/classevio_1_1_i_evio_filter" kindref="compound">IEvioFilter</ref> &gt;</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
<para>Visit all the structures in this structure (including the structure itself <ndash/> which is considered its own descendant) in a depth first manner. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>a listener to notify as each structure is visited. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional filter that must &quot;accept&quot; structures before they are passed to the listener. If <computeroutput>null</computeroutput>, all structures are passed. In this way, specific types of structures can be captured. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="509" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1399" bodyend="1402"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a90eb00ca90216fa72d3b36f5995cdb59" compoundref="da/d80/_base_structure_8h" startline="418" endline="418">evio::BaseStructure::getThis</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a7f61b0849a7f260192bfc77f8fd74a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::getMatchingStructures</definition>
        <argsstring>(std::shared_ptr&lt; IEvioFilter &gt; filter, std::vector&lt; std::shared_ptr&lt; BaseStructure &gt;&gt; &amp;vec)</argsstring>
        <name>getMatchingStructures</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d78/classevio_1_1_i_evio_filter" kindref="compound">IEvioFilter</ref> &gt;</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;&gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Visit all the descendant structures, and collect those that pass a filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>the filter that must be passed. If <computeroutput>null</computeroutput>, this will return all the structures. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>vector provided to contain all structures that are accepted by the filter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="511" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1444" bodyend="1464"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a25dfdca6a73381878becf7f87c4bc85e" compoundref="dc/de3/_base_structure_8cpp" startline="1384" endline="1386">evio::BaseStructure::visitAllStructures</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a441099dff9fd748e9438b7f551ac36aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::transform</definition>
        <argsstring>(std::shared_ptr&lt; BaseStructure &gt; const &amp;structure)</argsstring>
        <name>transform</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; const &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>This method does a partial copy and is designed to help convert between banks, segments,and tagsegments in the <ref refid="d2/da4/classevio_1_1_structure_transformer" kindref="compound">StructureTransformer</ref> class (hence the name &quot;transform&quot;). </para>
        </briefdescription>
        <detaileddescription>
<para>It copies all the data from another <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> object. Children are <bold>not</bold> copied in the deep clone way, but their references are added to this structure. It does <bold>not</bold> copy header data or the parent either.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> from which to copy data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="641" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="157" bodyend="169"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" compoundref="da/d80/_base_structure_8h" startline="411">evio::BaseStructure::children</references>
        <references refid="d5/d23/classevio_1_1_data_type_1ad49c0e00ce28f150c91cad724634c5d0" compoundref="db/da7/_data_type_8h" startline="100" endline="103">evio::DataType::getDataType</references>
        <references refid="d5/d23/classevio_1_1_data_type_1add9555ba07e3b576ff8c395d7687425c" compoundref="db/da7/_data_type_8h" startline="139" endline="143">evio::DataType::isStructure</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1abb71e9e91493d619c5d694c509201ffa" compoundref="da/d80/_base_structure_8h" startline="605">evio::BaseStructure::lengthsUpToDate</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a714c3de502f914d68f40025e8754fc0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref></type>
        <definition>ByteOrder evio::BaseStructure::getByteOrder</definition>
        <argsstring>()</argsstring>
        <name>getByteOrder</name>
        <briefdescription>
<para>What is the byte order of this data? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="da/d7d/classevio_1_1_byte_order_1aa11600b2ff36c44d7f2f8e345cfc937d" kindref="member">ByteOrder#ENDIAN_BIG</ref> or <ref refid="da/d7d/classevio_1_1_byte_order_1ae70d8b2df728e3776bb6bb843260bb71" kindref="member">ByteOrder#ENDIAN_LITTLE</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="645" column="19" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1502" bodyend="1502"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" compoundref="da/d80/_base_structure_8h" startline="602">evio::BaseStructure::byteOrder</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1abe16136d78101e6a704f717b9d0426af" compoundref="dc/de3/_base_structure_8cpp" startline="2695" endline="2700">evio::BaseStructure::writeQuick</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a7d44ced2b37f73f90022b9aee6e4c24f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::setByteOrder</definition>
        <argsstring>(ByteOrder const &amp;order)</argsstring>
        <name>setByteOrder</name>
        <param>
          <type><ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> const &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Set the byte order of this data. </para>
        </briefdescription>
        <detaileddescription>
<para>This method <bold>cannot</bold> be used to swap data. It is only used to describe the endianness of the rawdata contained. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="da/d7d/classevio_1_1_byte_order_1aa11600b2ff36c44d7f2f8e345cfc937d" kindref="member">ByteOrder#ENDIAN_BIG</ref> or <ref refid="da/d7d/classevio_1_1_byte_order_1ae70d8b2df728e3776bb6bb843260bb71" kindref="member">ByteOrder#ENDIAN_LITTLE</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="647" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1510" bodyend="1510"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" compoundref="da/d80/_base_structure_8h" startline="602">evio::BaseStructure::byteOrder</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ab315c15b1c10617a2f9351320dadfc4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::BaseStructure::needSwap</definition>
        <argsstring>() const</argsstring>
        <name>needSwap</name>
        <briefdescription>
<para>Is a byte swap required (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>is the data endian opposite of local endian)? <simplesect kind="return"><para><computeroutput>true</computeroutput> if byte swapping is required. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="649" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1517" bodyend="1517"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" compoundref="da/d80/_base_structure_8h" startline="602">evio::BaseStructure::byteOrder</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1ae4055f708921d4e6540ab4662d27147c" compoundref="d1/d02/_byte_order_8h" startline="61">evio::ByteOrder::ENDIAN_LOCAL</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac85e2171b9e2afb61ad572d015723fbf" compoundref="dc/de3/_base_structure_8cpp" startline="1911" endline="1930">evio::BaseStructure::getDoubleData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af78744f272c2da5a9e708a67c2c0cdbc" compoundref="dc/de3/_base_structure_8cpp" startline="1881" endline="1900">evio::BaseStructure::getFloatData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a622bb507ede6789103db9fd9052ff57a" compoundref="dc/de3/_base_structure_8cpp" startline="1761" endline="1780">evio::BaseStructure::getIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a710023eaa51b01f35b8adf0159b472d8" compoundref="dc/de3/_base_structure_8cpp" startline="1821" endline="1840">evio::BaseStructure::getLongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac7f038740895252926e0f05dc6e6c682" compoundref="dc/de3/_base_structure_8cpp" startline="1696" endline="1720">evio::BaseStructure::getShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ab635c54c693b2475f39e29ee94c6311b" compoundref="dc/de3/_base_structure_8cpp" startline="1791" endline="1810">evio::BaseStructure::getUIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ae0327f6bc030cdd08266a3115f69a9e5" compoundref="dc/de3/_base_structure_8cpp" startline="1851" endline="1870">evio::BaseStructure::getULongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a1b2a0620587c0eb2c39bcab988d2611c" compoundref="dc/de3/_base_structure_8cpp" startline="1731" endline="1750">evio::BaseStructure::getUShortData</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a7f33ccd6c19c44b142215c835c0aa192" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string evio::BaseStructure::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <reimplementedby refid="d4/d12/classevio_1_1_evio_event_1a96cc08b2bd2a9eef2c97afd7db36e7d9">toString</reimplementedby>
        <briefdescription>
<para>Obtain a string representation of the structure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a string representation of the structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="651" column="29" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1524" bodyend="1562"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" compoundref="da/d80/_base_structure_8h" startline="411">evio::BaseStructure::children</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ad9d61b6fc4e2e44b02f192b40d0bee05" compoundref="da/d80/_base_structure_8h" startline="643" endline="643">evio::BaseStructure::getStructureType</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="dd/da5/classevio_1_1_structure_type_1a85e655b6310348b780c6e63f903422cb" compoundref="d3/d58/_structure_type_8h" startline="41">evio::StructureType::STRUCT_BANK</references>
        <references refid="dd/da5/classevio_1_1_structure_type_1a62c2632202f73efcc85641acf7c392b7" compoundref="d3/d58/_structure_type_8h" startline="132" endline="132">evio::StructureType::toString</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a4b55bfb1a25acc690c9456f0869c4b49" compoundref="db/da7/_data_type_8h" startline="193" endline="197">evio::DataType::toString</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a7fe9f85e6b1c612098111c6b95481b84" compoundref="dc/de3/_base_structure_8cpp" startline="1571" endline="1587">evio::BaseStructure::treeToString</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a7fe9f85e6b1c612098111c6b95481b84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string evio::BaseStructure::treeToString</definition>
        <argsstring>(std::string const &amp;indent) const</argsstring>
        <name>treeToString</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
<para>Recursive method to obtain a string representation of the entire tree structure rooted at this structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indent</parametername>
</parameternamelist>
<parameterdescription>
<para>string containing indentation for this structure. Generally called with &quot;&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a string representation of the entire tree structure rooted at this structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="652" column="21" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1571" bodyend="1587"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" compoundref="da/d80/_base_structure_8h" startline="411">evio::BaseStructure::children</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3f0a34f51bbc96c4faeef160eaed0996" compoundref="dc/de3/_base_structure_8cpp" startline="467" endline="467">evio::BaseStructure::getChildCount</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acf98ea08ba17e38d2c6b7b0af37293a9" compoundref="dc/de3/_base_structure_8cpp" startline="1226" endline="1226">evio::BaseStructure::isLeaf</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a7f33ccd6c19c44b142215c835c0aa192" compoundref="dc/de3/_base_structure_8cpp" startline="1524" endline="1562">evio::BaseStructure::toString</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1aafc000e4a21eec3e8f844251799f91c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="db/dfb/classevio_1_1_base_structure_header" kindref="compound">BaseStructureHeader</ref> &gt;</type>
        <definition>std::shared_ptr&lt; BaseStructureHeader &gt; evio::BaseStructure::getHeader</definition>
        <argsstring>() const</argsstring>
        <name>getHeader</name>
        <briefdescription>
<para>Return the header for this structure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the header for this structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="654" column="25" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1594" bodyend="1594"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a216a3d4858d6280df0f42d397b2759dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t evio::BaseStructure::write</definition>
        <argsstring>(ByteBuffer &amp;dest)</argsstring>
        <name>write</name>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>dest</declname>
          <defname>byteBuffer</defname>
        </param>
        <briefdescription>
<para>Write myself out into a byte buffer with fastest algorithm I could find. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>byteBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the byteBuffer to write to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes written. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>overflow_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if too little space in byteBuffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="656" column="16" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2879" bodyend="2889"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1aa0e335238a57eaa0bffee8f968e5995f" compoundref="d4/d6c/_byte_buffer_8cpp" startline="475" endline="475">evio::ByteBuffer::array</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1abf7abf99aa7544601997f40eba298648" compoundref="d4/d6c/_byte_buffer_8cpp" startline="490" endline="490">evio::ByteBuffer::arrayOffset</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a639bf2bdac6b782654a649442061a528" compoundref="dc/de3/_base_structure_8cpp" startline="1660" endline="1660">evio::BaseStructure::getTotalBytes</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a3d5f0120189717ffc8d2d480d89cb91a" compoundref="d4/d6c/_byte_buffer_8cpp" startline="466" endline="466">evio::ByteBuffer::order</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a88f84e6b1757db70542eac13294fc80e" compoundref="d4/d6c/_byte_buffer_8cpp" startline="518" endline="518">evio::ByteBuffer::position</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a32b043081cd3a62187f2577ce2966e7d" compoundref="d4/d6c/_byte_buffer_8cpp" startline="497" endline="497">evio::ByteBuffer::remaining</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a165601aa2afb10063c6725a54b80f7b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t evio::BaseStructure::write</definition>
        <argsstring>(uint8_t *dest, ByteOrder const &amp;order)</argsstring>
        <name>write</name>
        <param>
          <type>uint8_t *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> const &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Write myself out to a pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer at which to write evio format data of this bank. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>byte order in which to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes written. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="657" column="16" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2731" bodyend="2869"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" compoundref="da/d80/_base_structure_8h" startline="602">evio::BaseStructure::byteOrder</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1a4ba6cdff823495b629ad3283c18e5cff" compoundref="dd/d95/_byte_order_8cpp" startline="86" endline="97">evio::ByteOrder::byteSwap16</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1a60983271868534fd949d944087e32db3" compoundref="dd/d95/_byte_order_8cpp" startline="109" endline="120">evio::ByteOrder::byteSwap32</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1ab57f0490234e6d17fedb0c39cf5093c1" compoundref="dd/d95/_byte_order_8cpp" startline="132" endline="143">evio::ByteOrder::byteSwap64</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a9a9803199ba7b5236f9fb5ccaacc9c6d" compoundref="db/da7/_data_type_8h" startline="42">evio::DataType::CHAR8</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a9dad3afa35396436b3734347474c6b6c" compoundref="da/d80/_base_structure_8h" startline="568">evio::BaseStructure::charData</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a44ebcac2851a8e66b41605ab55bc6708" compoundref="db/da7/_data_type_8h" startline="39">evio::DataType::CHARSTAR8</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" compoundref="da/d80/_base_structure_8h" startline="411">evio::BaseStructure::children</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a9790e6d2d964cd17518b510cade71013" compoundref="db/da7/_data_type_8h" startline="51">evio::DataType::COMPOSITE</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a018e0280b01ac441c63dc529f391c812" compoundref="db/da7/_data_type_8h" startline="44">evio::DataType::DOUBLE64</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a88f301e38ebcc137ed91b13ffbb7b6b1" compoundref="da/d80/_base_structure_8h" startline="552">evio::BaseStructure::doubleData</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a15212317494206aed89652808e36ffcb" compoundref="db/da7/_data_type_8h" startline="38">evio::DataType::FLOAT32</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a7e6f6c32641b1e7700f24d80aa19f99e" compoundref="da/d80/_base_structure_8h" startline="555">evio::BaseStructure::floatData</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d5/d23/classevio_1_1_data_type_1ae23b05542b144e3b7d72628280532195" compoundref="db/da7/_data_type_8h" startline="47">evio::DataType::INT32</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a7d054641d85f3d44bf162369bf2e2022" compoundref="da/d80/_base_structure_8h" startline="540">evio::BaseStructure::intData</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acf98ea08ba17e38d2c6b7b0af37293a9" compoundref="dc/de3/_base_structure_8cpp" startline="1226" endline="1226">evio::BaseStructure::isLeaf</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1ab0a29204d87f503b7e96f1b855914137" compoundref="d1/d02/_byte_order_8h" startline="102" endline="102">evio::ByteOrder::isLocalEndian</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a0ad3467f252ad341a3f630f0210bc9e1" compoundref="db/da7/_data_type_8h" startline="45">evio::DataType::LONG64</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a98c3c791cb4c1cb5fefe377c895d1da8" compoundref="da/d80/_base_structure_8h" startline="546">evio::BaseStructure::longData</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a227fb12c5f747c91239e4d305fa83447" compoundref="db/da7/_data_type_8h" startline="40">evio::DataType::SHORT16</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a37df56b8f81fc97692385bab31460527" compoundref="da/d80/_base_structure_8h" startline="534">evio::BaseStructure::shortData</references>
        <references refid="d5/d4b/classevio_1_1_composite_data_1adf40a2dfe3ba46ef019b16c2abcf9aba">evio::CompositeData::swapAll</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a1d561abba7301ebf74fefad8b29fa8ae" compoundref="db/da7/_data_type_8h" startline="43">evio::DataType::UCHAR8</references>
        <references refid="d5/d23/classevio_1_1_data_type_1ab594570d76a48584ae27c5e2276b3c04" compoundref="db/da7/_data_type_8h" startline="37">evio::DataType::UINT32</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a0f556bae625e41a9adc3bae9949112d3" compoundref="db/da7/_data_type_8h" startline="46">evio::DataType::ULONG64</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a2b3013fda814a931239319319790c761" compoundref="db/da7/_data_type_8h" startline="36">evio::DataType::UNKNOWN32</references>
        <references refid="d5/d23/classevio_1_1_data_type_1aa4dc041c0f0796a4b7dd12d11a9c325a" compoundref="db/da7/_data_type_8h" startline="41">evio::DataType::USHORT16</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a42b0810ce1c98aa6d9916475de98ec82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t evio::BaseStructure::writeQuick</definition>
        <argsstring>(uint8_t *dest)</argsstring>
        <name>writeQuick</name>
        <param>
          <type>uint8_t *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Write myself out as evio format data in the data&apos;s current byte order given by <ref refid="d9/ddd/classevio_1_1_base_structure_1a714c3de502f914d68f40025e8754fc0d" kindref="member">getByteOrder()</ref> at the given pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is much more efficient than using <ref refid="d9/ddd/classevio_1_1_base_structure_1a165601aa2afb10063c6725a54b80f7b5" kindref="member">write(uint8_t *, ByteOrder const &amp;)</ref>.</para>
<para><bold>However, be warned that this method is only useful when this structure has just been read from a file or buffer. Once the user adds data (and does not call the appropriate update method) or children to this structure, this method does NOT produce correct results.</bold></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer at which to write evio format data of this bank in currently set byte order. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes written. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="659" column="16" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2715" bodyend="2721"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" compoundref="da/d80/_base_structure_8h" startline="602">evio::BaseStructure::byteOrder</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1abe16136d78101e6a704f717b9d0426af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t evio::BaseStructure::writeQuick</definition>
        <argsstring>(ByteBuffer &amp;dest)</argsstring>
        <name>writeQuick</name>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Write myself into a <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> as evio format data in the data&apos;s current byte order given by <ref refid="d9/ddd/classevio_1_1_base_structure_1a714c3de502f914d68f40025e8754fc0d" kindref="member">getByteOrder()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is much more efficient than using <ref refid="d9/ddd/classevio_1_1_base_structure_1a216a3d4858d6280df0f42d397b2759dc" kindref="member">write(ByteBuffer &amp;)</ref>.</para>
<para><bold>However, be warned that this method is only useful when this structure has just been read from a file or buffer. Once the user adds data (and does not call the appropriate update method) or children to this structure, this method does NOT produce correct results.</bold></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>destination <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> to contain evio format data of this bank in currently set byte order. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes written. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="660" column="16" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2695" bodyend="2700"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a714c3de502f914d68f40025e8754fc0d" compoundref="dc/de3/_base_structure_8cpp" startline="1502" endline="1502">evio::BaseStructure::getByteOrder</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a3d5f0120189717ffc8d2d480d89cb91a" compoundref="d4/d6c/_byte_buffer_8cpp" startline="466" endline="466">evio::ByteBuffer::order</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1ab864753c79b9a896ae8ff2e09ebfc44f" compoundref="d4/d6c/_byte_buffer_8cpp" startline="1325" endline="1340">evio::ByteBuffer::put</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ac32a371061bb108c2dcce0d21df4d87c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::BaseStructure::getNumberDataItems</definition>
        <argsstring>()</argsstring>
        <name>getNumberDataItems</name>
        <briefdescription>
<para>Get the number of stored data items like number of banks, ints, floats, etc. </para>
        </briefdescription>
        <detaileddescription>
<para>(not the size in ints or bytes). Some items may be padded such as shorts and bytes. This will tell the meaningful number of such data items. In the case of containers, returns number of 32-bit words not in header.</para>
<para><simplesect kind="return"><para>number of stored data items (not size or length), or number of words if container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="662" column="18" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1606" bodyend="1653"/>
        <references refid="d5/d23/classevio_1_1_data_type_1a44ebcac2851a8e66b41605ab55bc6708" compoundref="db/da7/_data_type_8h" startline="39">evio::DataType::CHARSTAR8</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a9790e6d2d964cd17518b510cade71013" compoundref="db/da7/_data_type_8h" startline="51">evio::DataType::COMPOSITE</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae06e4d62b8242a789603ef428ba34ec8" compoundref="da/d80/_base_structure_8h" startline="558">evio::BaseStructure::compositeData</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a0a61f0f28a505939e06e84c1e6e51daf" compoundref="db/da7/_data_type_8h" startline="251" endline="251">evio::DataType::getBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a0c5d29c325064e230d12cd5a30e8ef68" compoundref="dc/de3/_base_structure_8cpp" startline="2027" endline="2042">evio::BaseStructure::getStringData</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ac70d6ee0180157dfd4f7938cc2dc2909" compoundref="dc/de3/_base_structure_8cpp" startline="2537" endline="2537">evio::BaseStructure::isContainer</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5ff899f399d825ee358ddcc9d65a354b" compoundref="da/d80/_base_structure_8h" startline="599">evio::BaseStructure::numberDataItems</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a7dbf9d7691f2c8ebb1fea19fdfb67482" compoundref="dc/de3/_base_structure_8cpp" startline="2551" endline="2597">evio::BaseStructure::dataLength</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::BaseStructure::setAllHeaderLengths</definition>
        <argsstring>()</argsstring>
        <name>setAllHeaderLengths</name>
        <briefdescription>
<para>Compute and set length of all header fields for this structure and all its descendants. </para>
        </briefdescription>
        <detaileddescription>
<para>For writing events, this will be crucial for setting the values in the headers.</para>
<para><simplesect kind="return"><para>the length that would go in the header field (for a leaf). </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the length is too large. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="664" column="18" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2636" bodyend="2679"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" compoundref="da/d80/_base_structure_8h" startline="411">evio::BaseStructure::children</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a7dbf9d7691f2c8ebb1fea19fdfb67482" compoundref="dc/de3/_base_structure_8cpp" startline="2551" endline="2597">evio::BaseStructure::dataLength</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acf98ea08ba17e38d2c6b7b0af37293a9" compoundref="dc/de3/_base_structure_8cpp" startline="1226" endline="1226">evio::BaseStructure::isLeaf</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1abb71e9e91493d619c5d694c509201ffa" compoundref="da/d80/_base_structure_8h" startline="605">evio::BaseStructure::lengthsUpToDate</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a5fe3a48fb1f8898bdd13d08ea689ea41" compoundref="dc/de3/_base_structure_8cpp" startline="3157" endline="3184">evio::BaseStructure::updateCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a84c0b49e9886b62dae99c8b32bec410a" compoundref="dc/de3/_base_structure_8cpp" startline="3325" endline="3357">evio::BaseStructure::updateCompositeData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a89685661be04c90b3059e318f498531a" compoundref="dc/de3/_base_structure_8cpp" startline="3267" endline="3294">evio::BaseStructure::updateDoubleData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a39c24b766b220d1cda0e48a37f9b4881" compoundref="dc/de3/_base_structure_8cpp" startline="3230" endline="3257">evio::BaseStructure::updateFloatData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0264daf6e038c485628e364992c05e0e" compoundref="dc/de3/_base_structure_8cpp" startline="2904" endline="2935">evio::BaseStructure::updateIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a3b3dde0d329569255caa66a4f66d177f" compoundref="dc/de3/_base_structure_8cpp" startline="3084" endline="3111">evio::BaseStructure::updateLongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a408dedd1788bfcae0104b3455da671cc" compoundref="dc/de3/_base_structure_8cpp" startline="2981" endline="3024">evio::BaseStructure::updateShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a4730e93ed7f947b82f022da6a417f611" compoundref="dc/de3/_base_structure_8cpp" startline="3304" endline="3315">evio::BaseStructure::updateStringData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a896a4fdf01edece007470588d1835058" compoundref="dc/de3/_base_structure_8cpp" startline="3194" endline="3220">evio::BaseStructure::updateUCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0c3cfcf8e19805e392d092c8c7b9602c" compoundref="dc/de3/_base_structure_8cpp" startline="2945" endline="2971">evio::BaseStructure::updateUIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a1add8a09e87d9605a6da5deff79808e4" compoundref="dc/de3/_base_structure_8cpp" startline="3121" endline="3147">evio::BaseStructure::updateULongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af3021857b10c869f6ade49085cc392c2" compoundref="dc/de3/_base_structure_8cpp" startline="3034" endline="3074">evio::BaseStructure::updateUShortData</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ac70d6ee0180157dfd4f7938cc2dc2909" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::BaseStructure::isContainer</definition>
        <argsstring>() const</argsstring>
        <name>isContainer</name>
        <briefdescription>
<para>Checks whether this structure is a container, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>a structure of structures. <simplesect kind="return"><para><computeroutput>true</computeroutput> if this structure is a container. This is the same check as <ref refid="d9/ddd/classevio_1_1_base_structure_1abf1788d29991b16091ebfb96ae7627ec" kindref="member">getAllowsChildren</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="665" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2537" bodyend="2537"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac32a371061bb108c2dcce0d21df4d87c" compoundref="dc/de3/_base_structure_8cpp" startline="1606" endline="1653">evio::BaseStructure::getNumberDataItems</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a639bf2bdac6b782654a649442061a528" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::BaseStructure::getTotalBytes</definition>
        <argsstring>() const</argsstring>
        <name>getTotalBytes</name>
        <briefdescription>
<para>Get the length of this structure in bytes, including the header. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the length of this structure in bytes, including the header. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="666" column="18" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1660" bodyend="1660"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a216a3d4858d6280df0f42d397b2759dc" compoundref="dc/de3/_base_structure_8cpp" startline="2879" endline="2889">evio::BaseStructure::write</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a7b02d376f76291b95ad3d96420534350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt; &amp;</type>
        <definition>std::vector&lt; uint8_t &gt; &amp; evio::BaseStructure::getRawBytes</definition>
        <argsstring>()</argsstring>
        <name>getRawBytes</name>
        <briefdescription>
<para>Get the raw data of the structure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the raw data of the structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="668" column="21" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1667" bodyend="1667"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ac7f038740895252926e0f05dc6e6c682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int16_t &gt; &amp;</type>
        <definition>std::vector&lt; int16_t &gt; &amp; evio::BaseStructure::getShortData</definition>
        <argsstring>()</argsstring>
        <name>getShortData</name>
        <briefdescription>
<para>Gets the raw data as an int16_t vector if the content type as indicated by the header is appropriate. </para>
        </briefdescription>
        <detaileddescription>
<para>If the returned vector&apos;s data is modified, then <ref refid="d9/ddd/classevio_1_1_base_structure_1a408dedd1788bfcae0104b3455da671cc" kindref="member">updateShortData</ref> <bold>MUST</bold> be called!</para>
<para><simplesect kind="return"><para>a reference to the data as an int16_t vector. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if contained data type is not int16_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="676" column="22" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1696" bodyend="1720"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ab315c15b1c10617a2f9351320dadfc4c" compoundref="dc/de3/_base_structure_8cpp" startline="1517" endline="1517">evio::BaseStructure::needSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a227fb12c5f747c91239e4d305fa83447" compoundref="db/da7/_data_type_8h" startline="40">evio::DataType::SHORT16</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a37df56b8f81fc97692385bab31460527" compoundref="da/d80/_base_structure_8h" startline="534">evio::BaseStructure::shortData</references>
        <references refid="d1/d02/_byte_order_8h_1abf29e9eea0fd8b7b06dd855e1bad0293" compoundref="d1/d02/_byte_order_8h" startline="23">SWAP_16</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a1b2a0620587c0eb2c39bcab988d2611c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint16_t &gt; &amp;</type>
        <definition>std::vector&lt; uint16_t &gt; &amp; evio::BaseStructure::getUShortData</definition>
        <argsstring>()</argsstring>
        <name>getUShortData</name>
        <briefdescription>
<para>Gets the raw data as an uint16_t vector if the content type as indicated by the header is appropriate. </para>
        </briefdescription>
        <detaileddescription>
<para>If the returned vector&apos;s data is modified, then <ref refid="d9/ddd/classevio_1_1_base_structure_1af3021857b10c869f6ade49085cc392c2" kindref="member">updateUShortData</ref> <bold>MUST</bold> be called!</para>
<para><simplesect kind="return"><para>a reference to the data as an uint16_t vector. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if contained data type is not uint16_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="677" column="21" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1731" bodyend="1750"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ab315c15b1c10617a2f9351320dadfc4c" compoundref="dc/de3/_base_structure_8cpp" startline="1517" endline="1517">evio::BaseStructure::needSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d1/d02/_byte_order_8h_1abf29e9eea0fd8b7b06dd855e1bad0293" compoundref="d1/d02/_byte_order_8h" startline="23">SWAP_16</references>
        <references refid="d5/d23/classevio_1_1_data_type_1aa4dc041c0f0796a4b7dd12d11a9c325a" compoundref="db/da7/_data_type_8h" startline="41">evio::DataType::USHORT16</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ad78217635d3b770cefb9fba496f0b09d" compoundref="da/d80/_base_structure_8h" startline="537">evio::BaseStructure::ushortData</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a622bb507ede6789103db9fd9052ff57a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int32_t &gt; &amp;</type>
        <definition>std::vector&lt; int32_t &gt; &amp; evio::BaseStructure::getIntData</definition>
        <argsstring>()</argsstring>
        <name>getIntData</name>
        <briefdescription>
<para>Gets the raw data as an int32_t vector if the content type as indicated by the header is appropriate. </para>
        </briefdescription>
        <detaileddescription>
<para>If the returned vector&apos;s data is modified, then <ref refid="d9/ddd/classevio_1_1_base_structure_1a0264daf6e038c485628e364992c05e0e" kindref="member">updateIntData</ref> <bold>MUST</bold> be called!</para>
<para><simplesect kind="return"><para>a reference to the data as an int32_t vector. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if contained data type is not int32_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="679" column="22" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1761" bodyend="1780"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d5/d23/classevio_1_1_data_type_1ae23b05542b144e3b7d72628280532195" compoundref="db/da7/_data_type_8h" startline="47">evio::DataType::INT32</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a7d054641d85f3d44bf162369bf2e2022" compoundref="da/d80/_base_structure_8h" startline="540">evio::BaseStructure::intData</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ab315c15b1c10617a2f9351320dadfc4c" compoundref="dc/de3/_base_structure_8cpp" startline="1517" endline="1517">evio::BaseStructure::needSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d1/d02/_byte_order_8h_1a700fb30611761c46a674a45cc28ff561" compoundref="d1/d02/_byte_order_8h" startline="28">SWAP_32</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ab635c54c693b2475f39e29ee94c6311b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt; &amp;</type>
        <definition>std::vector&lt; uint32_t &gt; &amp; evio::BaseStructure::getUIntData</definition>
        <argsstring>()</argsstring>
        <name>getUIntData</name>
        <briefdescription>
<para>Gets the raw data as an uint32_t vector if the content type as indicated by the header is appropriate. </para>
        </briefdescription>
        <detaileddescription>
<para>If the returned vector&apos;s data is modified, then <ref refid="d9/ddd/classevio_1_1_base_structure_1a0c3cfcf8e19805e392d092c8c7b9602c" kindref="member">updateUIntData</ref> <bold>MUST</bold> be called!</para>
<para><simplesect kind="return"><para>a reference to the data as an uint32_t vector. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if contained data type is not uint32_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="680" column="21" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1791" bodyend="1810"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ab315c15b1c10617a2f9351320dadfc4c" compoundref="dc/de3/_base_structure_8cpp" startline="1517" endline="1517">evio::BaseStructure::needSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d1/d02/_byte_order_8h_1a700fb30611761c46a674a45cc28ff561" compoundref="d1/d02/_byte_order_8h" startline="28">SWAP_32</references>
        <references refid="d5/d23/classevio_1_1_data_type_1ab594570d76a48584ae27c5e2276b3c04" compoundref="db/da7/_data_type_8h" startline="37">evio::DataType::UINT32</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ab4506507f62a2207e5ed1c2f64a58e68" compoundref="da/d80/_base_structure_8h" startline="543">evio::BaseStructure::uintData</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a710023eaa51b01f35b8adf0159b472d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int64_t &gt; &amp;</type>
        <definition>std::vector&lt; int64_t &gt; &amp; evio::BaseStructure::getLongData</definition>
        <argsstring>()</argsstring>
        <name>getLongData</name>
        <briefdescription>
<para>Gets the raw data as an int64_t vector if the content type as indicated by the header is appropriate. </para>
        </briefdescription>
        <detaileddescription>
<para>If the returned vector&apos;s data is modified, then <ref refid="d9/ddd/classevio_1_1_base_structure_1a3b3dde0d329569255caa66a4f66d177f" kindref="member">updateLongData</ref> <bold>MUST</bold> be called!</para>
<para><simplesect kind="return"><para>a reference to the data as an int64_t vector. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if contained data type is not int64_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="682" column="22" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1821" bodyend="1840"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a0ad3467f252ad341a3f630f0210bc9e1" compoundref="db/da7/_data_type_8h" startline="45">evio::DataType::LONG64</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a98c3c791cb4c1cb5fefe377c895d1da8" compoundref="da/d80/_base_structure_8h" startline="546">evio::BaseStructure::longData</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ab315c15b1c10617a2f9351320dadfc4c" compoundref="dc/de3/_base_structure_8cpp" startline="1517" endline="1517">evio::BaseStructure::needSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d1/d02/_byte_order_8h_1a8021644ad809413f98b4093a341b2041" compoundref="d1/d02/_byte_order_8h" startline="35">SWAP_64</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ae0327f6bc030cdd08266a3115f69a9e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint64_t &gt; &amp;</type>
        <definition>std::vector&lt; uint64_t &gt; &amp; evio::BaseStructure::getULongData</definition>
        <argsstring>()</argsstring>
        <name>getULongData</name>
        <briefdescription>
<para>Gets the raw data as an uint64_t vector if the content type as indicated by the header is appropriate. </para>
        </briefdescription>
        <detaileddescription>
<para>If the returned vector&apos;s data is modified, then <ref refid="d9/ddd/classevio_1_1_base_structure_1a1add8a09e87d9605a6da5deff79808e4" kindref="member">updateULongData</ref> <bold>MUST</bold> be called!</para>
<para><simplesect kind="return"><para>a reference to the data as an uint64_t vector. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if contained data type is not uint64_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="683" column="21" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1851" bodyend="1870"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ab315c15b1c10617a2f9351320dadfc4c" compoundref="dc/de3/_base_structure_8cpp" startline="1517" endline="1517">evio::BaseStructure::needSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d1/d02/_byte_order_8h_1a8021644ad809413f98b4093a341b2041" compoundref="d1/d02/_byte_order_8h" startline="35">SWAP_64</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a0f556bae625e41a9adc3bae9949112d3" compoundref="db/da7/_data_type_8h" startline="46">evio::DataType::ULONG64</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6aa9f6fb780d77877214ce03be40002b" compoundref="da/d80/_base_structure_8h" startline="549">evio::BaseStructure::ulongData</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1af78744f272c2da5a9e708a67c2c0cdbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt; &amp;</type>
        <definition>std::vector&lt; float &gt; &amp; evio::BaseStructure::getFloatData</definition>
        <argsstring>()</argsstring>
        <name>getFloatData</name>
        <briefdescription>
<para>Gets the raw data as a float vector if the content type as indicated by the header is appropriate. </para>
        </briefdescription>
        <detaileddescription>
<para>If the returned vector&apos;s data is modified, then <ref refid="d9/ddd/classevio_1_1_base_structure_1a39c24b766b220d1cda0e48a37f9b4881" kindref="member">updateFloatData</ref> <bold>MUST</bold> be called!</para>
<para><simplesect kind="return"><para>a reference to the data as a float vector. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if contained data type is not float. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="685" column="22" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1881" bodyend="1900"/>
        <references refid="d5/d23/classevio_1_1_data_type_1a15212317494206aed89652808e36ffcb" compoundref="db/da7/_data_type_8h" startline="38">evio::DataType::FLOAT32</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a7e6f6c32641b1e7700f24d80aa19f99e" compoundref="da/d80/_base_structure_8h" startline="555">evio::BaseStructure::floatData</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ab315c15b1c10617a2f9351320dadfc4c" compoundref="dc/de3/_base_structure_8cpp" startline="1517" endline="1517">evio::BaseStructure::needSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d1/d02/_byte_order_8h_1a700fb30611761c46a674a45cc28ff561" compoundref="d1/d02/_byte_order_8h" startline="28">SWAP_32</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ac85e2171b9e2afb61ad572d015723fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt; &amp;</type>
        <definition>std::vector&lt; double &gt; &amp; evio::BaseStructure::getDoubleData</definition>
        <argsstring>()</argsstring>
        <name>getDoubleData</name>
        <briefdescription>
<para>Gets the raw data as a double vector if the content type as indicated by the header is appropriate. </para>
        </briefdescription>
        <detaileddescription>
<para>If the returned vector&apos;s data is modified, then <ref refid="d9/ddd/classevio_1_1_base_structure_1a89685661be04c90b3059e318f498531a" kindref="member">updateDoubleData</ref> <bold>MUST</bold> be called!</para>
<para><simplesect kind="return"><para>a reference to the data as a double vector. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if contained data type is not double. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="686" column="21" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1911" bodyend="1930"/>
        <references refid="d5/d23/classevio_1_1_data_type_1a018e0280b01ac441c63dc529f391c812" compoundref="db/da7/_data_type_8h" startline="44">evio::DataType::DOUBLE64</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a88f301e38ebcc137ed91b13ffbb7b6b1" compoundref="da/d80/_base_structure_8h" startline="552">evio::BaseStructure::doubleData</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ab315c15b1c10617a2f9351320dadfc4c" compoundref="dc/de3/_base_structure_8cpp" startline="1517" endline="1517">evio::BaseStructure::needSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d1/d02/_byte_order_8h_1a8021644ad809413f98b4093a341b2041" compoundref="d1/d02/_byte_order_8h" startline="35">SWAP_64</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a807313df5509f3ebbe5e43bb25f471e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; signed char &gt; &amp;</type>
        <definition>std::vector&lt; signed char &gt; &amp; evio::BaseStructure::getCharData</definition>
        <argsstring>()</argsstring>
        <name>getCharData</name>
        <briefdescription>
<para>Gets the raw data as an signed char vector, if the contents type as indicated by the header is appropriate. </para>
        </briefdescription>
        <detaileddescription>
<para>If the returned vector&apos;s data is modified, then <ref refid="d9/ddd/classevio_1_1_base_structure_1a5fe3a48fb1f8898bdd13d08ea689ea41" kindref="member">updateCharData</ref> <bold>MUST</bold> be called!</para>
<para><simplesect kind="return"><para>the data as an signed char vector, or <computeroutput>null</computeroutput> if this makes no sense for the given contents type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="688" column="22" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1963" bodyend="1976"/>
        <references refid="d5/d23/classevio_1_1_data_type_1a9a9803199ba7b5236f9fb5ccaacc9c6d" compoundref="db/da7/_data_type_8h" startline="42">evio::DataType::CHAR8</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a9dad3afa35396436b3734347474c6b6c" compoundref="da/d80/_base_structure_8h" startline="568">evio::BaseStructure::charData</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1aa67b53fb0e89e5e68998bfdb5b4ae0b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; unsigned char &gt; &amp;</type>
        <definition>std::vector&lt; unsigned char &gt; &amp; evio::BaseStructure::getUCharData</definition>
        <argsstring>()</argsstring>
        <name>getUCharData</name>
        <briefdescription>
<para>Gets the raw data as an unsigned char vector, if the contents type as indicated by the header is appropriate. </para>
        </briefdescription>
        <detaileddescription>
<para>If the returned vector&apos;s data is modified, then <ref refid="d9/ddd/classevio_1_1_base_structure_1a5fe3a48fb1f8898bdd13d08ea689ea41" kindref="member">updateCharData</ref> <bold>MUST</bold> be called!</para>
<para><simplesect kind="return"><para>the data as an unsigned char vector, or <computeroutput>null</computeroutput> if this makes no sense for the given contents type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="689" column="22" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1987" bodyend="2000"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a1d561abba7301ebf74fefad8b29fa8ae" compoundref="db/da7/_data_type_8h" startline="43">evio::DataType::UCHAR8</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1aa787d317915a5b6bb5e008e06522bd1b" compoundref="da/d80/_base_structure_8h" startline="571">evio::BaseStructure::ucharData</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1ac5e88c4f6a89a59851bf08a613d6ac42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d5/d4b/classevio_1_1_composite_data" kindref="compound">CompositeData</ref> &gt; &gt; &amp;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; CompositeData &gt; &gt; &amp; evio::BaseStructure::getCompositeData</definition>
        <argsstring>()</argsstring>
        <name>getCompositeData</name>
        <briefdescription>
<para>Gets the composite data as an vector of <ref refid="d5/d4b/classevio_1_1_composite_data" kindref="compound">CompositeData</ref> objects, if the content type as indicated by the header is appropriate. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the data as a vector of <ref refid="d5/d4b/classevio_1_1_composite_data" kindref="compound">CompositeData</ref> objects, or <computeroutput>null</computeroutput> if this makes no sense for the given content type. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the data is internally inconsistent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="691" column="22" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1942" bodyend="1952"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" compoundref="da/d80/_base_structure_8h" startline="602">evio::BaseStructure::byteOrder</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a9790e6d2d964cd17518b510cade71013" compoundref="db/da7/_data_type_8h" startline="51">evio::DataType::COMPOSITE</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae06e4d62b8242a789603ef428ba34ec8" compoundref="da/d80/_base_structure_8h" startline="558">evio::BaseStructure::compositeData</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d5/d4b/classevio_1_1_composite_data_1a9134283cf594778b9e4e925d199e0cc7">evio::CompositeData::parse</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a0c5d29c325064e230d12cd5a30e8ef68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt; &amp;</type>
        <definition>std::vector&lt; std::string &gt; &amp; evio::BaseStructure::getStringData</definition>
        <argsstring>()</argsstring>
        <name>getStringData</name>
        <briefdescription>
<para>Gets the raw data (ascii) as an vector of string objects, if the contents type as indicated by the header is appropriate. </para>
        </briefdescription>
        <detaileddescription>
<para>For any other behavior, the user should retrieve the data as a bytes and manipulate it in the exact manner desired. If there are non ascii or non-printing ascii chars or the bytes or not in evio format, a single string containing everything is returned.</para>
<para>Originally, in evio versions 1, 2 and 3, only one string was stored. Subsequent changes allowed a vector of strings to be stored and retrieved. The changes are backwards compatible.</para>
<para>The following is true about the string raw data format: <itemizedlist>
<listitem>
<para>Each string IS immediately followed by an ending null (0). </para>
</listitem>
<listitem>
<para>All string data are further padded/ended with at least one 0x4 valued ASCII char (up to 4 possible). </para>
</listitem>
<listitem>
<para>The presence of 1 to 4 ending 4&apos;s distinguishes the recent string array version from the original, single string version. </para>
</listitem>
<listitem>
<para>The original version string may be padded with anything after its ending null. </para>
</listitem>
</itemizedlist>
</para>
<para><simplesect kind="return"><para>the data as a vector of string objects if <ref refid="d5/d23/classevio_1_1_data_type" kindref="compound">DataType</ref> is CHARSTAR8, or <computeroutput>null</computeroutput> if this makes no sense for the given type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="693" column="22" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2027" bodyend="2042"/>
        <references refid="d5/d23/classevio_1_1_data_type_1a44ebcac2851a8e66b41605ab55bc6708" compoundref="db/da7/_data_type_8h" startline="39">evio::DataType::CHARSTAR8</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ad1e9d48dc5380e47df3e0080f2ab7955" compoundref="da/d80/_base_structure_8h" startline="576">evio::BaseStructure::stringList</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a627d070cacdcdf245689e6d950e0f629" compoundref="dc/de3/_base_structure_8cpp" startline="2411" endline="2526">evio::BaseStructure::unpackRawBytesToStrings</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac32a371061bb108c2dcce0d21df4d87c" compoundref="dc/de3/_base_structure_8cpp" startline="1606" endline="1653">evio::BaseStructure::getNumberDataItems</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a627d070cacdcdf245689e6d950e0f629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::BaseStructure::unpackRawBytesToStrings</definition>
        <argsstring>()</argsstring>
        <name>unpackRawBytesToStrings</name>
        <briefdescription>
<para>Extract string data from rawBytes array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of strings extracted from bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="694" column="18" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2411" bodyend="2526"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a8c3a60ec0b0e0eef73390d4ce94e1617" compoundref="da/d80/_base_structure_8h" startline="588">evio::BaseStructure::badStringFormat</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a46671840c4a09bd8854917d39ef9220a" compoundref="da/d80/_base_structure_8h" startline="582">evio::BaseStructure::stringEnd</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ad1e9d48dc5380e47df3e0080f2ab7955" compoundref="da/d80/_base_structure_8h" startline="576">evio::BaseStructure::stringList</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0c5d29c325064e230d12cd5a30e8ef68" compoundref="dc/de3/_base_structure_8cpp" startline="2027" endline="2042">evio::BaseStructure::getStringData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1afc0a6e74a1642c31a7df18af2aa75606" compoundref="dc/de3/_base_structure_8cpp" startline="2216" endline="2219">evio::BaseStructure::unpackRawBytesToStrings</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a0264daf6e038c485628e364992c05e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::updateIntData</definition>
        <argsstring>()</argsstring>
        <name>updateIntData</name>
        <briefdescription>
<para>If data in this structure was changed by modifying the vector returned from <ref refid="d9/ddd/classevio_1_1_base_structure_1a622bb507ede6789103db9fd9052ff57a" kindref="member">getIntData()</ref>, then this method needs to be called in order to make this object internally consistent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object corresponds to a different data type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="713" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2904" bodyend="2935"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" compoundref="da/d80/_base_structure_8h" startline="602">evio::BaseStructure::byteOrder</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1a60983271868534fd949d944087e32db3" compoundref="dd/d95/_byte_order_8cpp" startline="109" endline="120">evio::ByteOrder::byteSwap32</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d5/d23/classevio_1_1_data_type_1ae23b05542b144e3b7d72628280532195" compoundref="db/da7/_data_type_8h" startline="47">evio::DataType::INT32</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a7d054641d85f3d44bf162369bf2e2022" compoundref="da/d80/_base_structure_8h" startline="540">evio::BaseStructure::intData</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1a53f173621aa4ecf3bda24b74fdcb28b2" compoundref="d1/d02/_byte_order_8h" startline="151" endline="153">evio::ByteOrder::needToSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5ff899f399d825ee358ddcc9d65a354b" compoundref="da/d80/_base_structure_8h" startline="599">evio::BaseStructure::numberDataItems</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a4b55bfb1a25acc690c9456f0869c4b49" compoundref="db/da7/_data_type_8h" startline="193" endline="197">evio::DataType::toString</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a0c3cfcf8e19805e392d092c8c7b9602c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::updateUIntData</definition>
        <argsstring>()</argsstring>
        <name>updateUIntData</name>
        <briefdescription>
<para>If data in this structure was changed by modifying the vector returned from <ref refid="d9/ddd/classevio_1_1_base_structure_1ab635c54c693b2475f39e29ee94c6311b" kindref="member">getUIntData()</ref>, then this method needs to be called in order to make this object internally consistent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object corresponds to a different data type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="714" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2945" bodyend="2971"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" compoundref="da/d80/_base_structure_8h" startline="602">evio::BaseStructure::byteOrder</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1a60983271868534fd949d944087e32db3" compoundref="dd/d95/_byte_order_8cpp" startline="109" endline="120">evio::ByteOrder::byteSwap32</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1a53f173621aa4ecf3bda24b74fdcb28b2" compoundref="d1/d02/_byte_order_8h" startline="151" endline="153">evio::ByteOrder::needToSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5ff899f399d825ee358ddcc9d65a354b" compoundref="da/d80/_base_structure_8h" startline="599">evio::BaseStructure::numberDataItems</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a4b55bfb1a25acc690c9456f0869c4b49" compoundref="db/da7/_data_type_8h" startline="193" endline="197">evio::DataType::toString</references>
        <references refid="d5/d23/classevio_1_1_data_type_1ab594570d76a48584ae27c5e2276b3c04" compoundref="db/da7/_data_type_8h" startline="37">evio::DataType::UINT32</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ab4506507f62a2207e5ed1c2f64a58e68" compoundref="da/d80/_base_structure_8h" startline="543">evio::BaseStructure::uintData</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a408dedd1788bfcae0104b3455da671cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::updateShortData</definition>
        <argsstring>()</argsstring>
        <name>updateShortData</name>
        <briefdescription>
<para>If data in this structure was changed by modifying the vector returned from <ref refid="d9/ddd/classevio_1_1_base_structure_1ac7f038740895252926e0f05dc6e6c682" kindref="member">getShortData()</ref>, then this method needs to be called in order to make this object internally consistent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object corresponds to a different data type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="715" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2981" bodyend="3024"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" compoundref="da/d80/_base_structure_8h" startline="602">evio::BaseStructure::byteOrder</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1a4ba6cdff823495b629ad3283c18e5cff" compoundref="dd/d95/_byte_order_8cpp" startline="86" endline="97">evio::ByteOrder::byteSwap16</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1a53f173621aa4ecf3bda24b74fdcb28b2" compoundref="d1/d02/_byte_order_8h" startline="151" endline="153">evio::ByteOrder::needToSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5ff899f399d825ee358ddcc9d65a354b" compoundref="da/d80/_base_structure_8h" startline="599">evio::BaseStructure::numberDataItems</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a227fb12c5f747c91239e4d305fa83447" compoundref="db/da7/_data_type_8h" startline="40">evio::DataType::SHORT16</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a37df56b8f81fc97692385bab31460527" compoundref="da/d80/_base_structure_8h" startline="534">evio::BaseStructure::shortData</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a4b55bfb1a25acc690c9456f0869c4b49" compoundref="db/da7/_data_type_8h" startline="193" endline="197">evio::DataType::toString</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1af3021857b10c869f6ade49085cc392c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::updateUShortData</definition>
        <argsstring>()</argsstring>
        <name>updateUShortData</name>
        <briefdescription>
<para>If data in this structure was changed by modifying the vector returned from <ref refid="d9/ddd/classevio_1_1_base_structure_1a1b2a0620587c0eb2c39bcab988d2611c" kindref="member">getUShortData()</ref>, then this method needs to be called in order to make this object internally consistent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object corresponds to a different data type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="716" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="3034" bodyend="3074"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" compoundref="da/d80/_base_structure_8h" startline="602">evio::BaseStructure::byteOrder</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1a4ba6cdff823495b629ad3283c18e5cff" compoundref="dd/d95/_byte_order_8cpp" startline="86" endline="97">evio::ByteOrder::byteSwap16</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1a53f173621aa4ecf3bda24b74fdcb28b2" compoundref="d1/d02/_byte_order_8h" startline="151" endline="153">evio::ByteOrder::needToSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5ff899f399d825ee358ddcc9d65a354b" compoundref="da/d80/_base_structure_8h" startline="599">evio::BaseStructure::numberDataItems</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a4b55bfb1a25acc690c9456f0869c4b49" compoundref="db/da7/_data_type_8h" startline="193" endline="197">evio::DataType::toString</references>
        <references refid="d5/d23/classevio_1_1_data_type_1aa4dc041c0f0796a4b7dd12d11a9c325a" compoundref="db/da7/_data_type_8h" startline="41">evio::DataType::USHORT16</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ad78217635d3b770cefb9fba496f0b09d" compoundref="da/d80/_base_structure_8h" startline="537">evio::BaseStructure::ushortData</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a3b3dde0d329569255caa66a4f66d177f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::updateLongData</definition>
        <argsstring>()</argsstring>
        <name>updateLongData</name>
        <briefdescription>
<para>If data in this structure was changed by modifying the vector returned from <ref refid="d9/ddd/classevio_1_1_base_structure_1a710023eaa51b01f35b8adf0159b472d8" kindref="member">getLongData()</ref>, then this method needs to be called in order to make this object internally consistent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object corresponds to a different data type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="717" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="3084" bodyend="3111"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" compoundref="da/d80/_base_structure_8h" startline="602">evio::BaseStructure::byteOrder</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1ab57f0490234e6d17fedb0c39cf5093c1" compoundref="dd/d95/_byte_order_8cpp" startline="132" endline="143">evio::ByteOrder::byteSwap64</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a0ad3467f252ad341a3f630f0210bc9e1" compoundref="db/da7/_data_type_8h" startline="45">evio::DataType::LONG64</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a98c3c791cb4c1cb5fefe377c895d1da8" compoundref="da/d80/_base_structure_8h" startline="546">evio::BaseStructure::longData</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1a53f173621aa4ecf3bda24b74fdcb28b2" compoundref="d1/d02/_byte_order_8h" startline="151" endline="153">evio::ByteOrder::needToSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5ff899f399d825ee358ddcc9d65a354b" compoundref="da/d80/_base_structure_8h" startline="599">evio::BaseStructure::numberDataItems</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a4b55bfb1a25acc690c9456f0869c4b49" compoundref="db/da7/_data_type_8h" startline="193" endline="197">evio::DataType::toString</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a1add8a09e87d9605a6da5deff79808e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::updateULongData</definition>
        <argsstring>()</argsstring>
        <name>updateULongData</name>
        <briefdescription>
<para>If data in this structure was changed by modifying the vector returned from <ref refid="d9/ddd/classevio_1_1_base_structure_1ae0327f6bc030cdd08266a3115f69a9e5" kindref="member">getULongData()</ref>, then this method needs to be called in order to make this object internally consistent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object corresponds to a different data type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="718" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="3121" bodyend="3147"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" compoundref="da/d80/_base_structure_8h" startline="602">evio::BaseStructure::byteOrder</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1ab57f0490234e6d17fedb0c39cf5093c1" compoundref="dd/d95/_byte_order_8cpp" startline="132" endline="143">evio::ByteOrder::byteSwap64</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1a53f173621aa4ecf3bda24b74fdcb28b2" compoundref="d1/d02/_byte_order_8h" startline="151" endline="153">evio::ByteOrder::needToSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5ff899f399d825ee358ddcc9d65a354b" compoundref="da/d80/_base_structure_8h" startline="599">evio::BaseStructure::numberDataItems</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a4b55bfb1a25acc690c9456f0869c4b49" compoundref="db/da7/_data_type_8h" startline="193" endline="197">evio::DataType::toString</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a0f556bae625e41a9adc3bae9949112d3" compoundref="db/da7/_data_type_8h" startline="46">evio::DataType::ULONG64</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6aa9f6fb780d77877214ce03be40002b" compoundref="da/d80/_base_structure_8h" startline="549">evio::BaseStructure::ulongData</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a5fe3a48fb1f8898bdd13d08ea689ea41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::updateCharData</definition>
        <argsstring>()</argsstring>
        <name>updateCharData</name>
        <briefdescription>
<para>If data in this structure was changed by modifying the vector returned from <ref refid="d9/ddd/classevio_1_1_base_structure_1a807313df5509f3ebbe5e43bb25f471e3" kindref="member">getCharData()</ref>, then this method needs to be called in order to make this object internally consistent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object corresponds to a different data type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="719" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="3157" bodyend="3184"/>
        <references refid="d5/d23/classevio_1_1_data_type_1a9a9803199ba7b5236f9fb5ccaacc9c6d" compoundref="db/da7/_data_type_8h" startline="42">evio::DataType::CHAR8</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a9dad3afa35396436b3734347474c6b6c" compoundref="da/d80/_base_structure_8h" startline="568">evio::BaseStructure::charData</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5ff899f399d825ee358ddcc9d65a354b" compoundref="da/d80/_base_structure_8h" startline="599">evio::BaseStructure::numberDataItems</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a4b55bfb1a25acc690c9456f0869c4b49" compoundref="db/da7/_data_type_8h" startline="193" endline="197">evio::DataType::toString</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a896a4fdf01edece007470588d1835058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::updateUCharData</definition>
        <argsstring>()</argsstring>
        <name>updateUCharData</name>
        <briefdescription>
<para>If data in this structure was changed by modifying the vector returned from <ref refid="d9/ddd/classevio_1_1_base_structure_1aa67b53fb0e89e5e68998bfdb5b4ae0b6" kindref="member">getUCharData()</ref>, then this method needs to be called in order to make this object internally consistent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object corresponds to a different data type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="720" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="3194" bodyend="3220"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5ff899f399d825ee358ddcc9d65a354b" compoundref="da/d80/_base_structure_8h" startline="599">evio::BaseStructure::numberDataItems</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a4b55bfb1a25acc690c9456f0869c4b49" compoundref="db/da7/_data_type_8h" startline="193" endline="197">evio::DataType::toString</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a1d561abba7301ebf74fefad8b29fa8ae" compoundref="db/da7/_data_type_8h" startline="43">evio::DataType::UCHAR8</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1aa787d317915a5b6bb5e008e06522bd1b" compoundref="da/d80/_base_structure_8h" startline="571">evio::BaseStructure::ucharData</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a39c24b766b220d1cda0e48a37f9b4881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::updateFloatData</definition>
        <argsstring>()</argsstring>
        <name>updateFloatData</name>
        <briefdescription>
<para>If data in this structure was changed by modifying the vector returned from <ref refid="d9/ddd/classevio_1_1_base_structure_1af78744f272c2da5a9e708a67c2c0cdbc" kindref="member">getFloatData()</ref>, then this method needs to be called in order to make this object internally consistent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object corresponds to a different data type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="721" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="3230" bodyend="3257"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" compoundref="da/d80/_base_structure_8h" startline="602">evio::BaseStructure::byteOrder</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1a60983271868534fd949d944087e32db3" compoundref="dd/d95/_byte_order_8cpp" startline="109" endline="120">evio::ByteOrder::byteSwap32</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a15212317494206aed89652808e36ffcb" compoundref="db/da7/_data_type_8h" startline="38">evio::DataType::FLOAT32</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a7e6f6c32641b1e7700f24d80aa19f99e" compoundref="da/d80/_base_structure_8h" startline="555">evio::BaseStructure::floatData</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1a53f173621aa4ecf3bda24b74fdcb28b2" compoundref="d1/d02/_byte_order_8h" startline="151" endline="153">evio::ByteOrder::needToSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5ff899f399d825ee358ddcc9d65a354b" compoundref="da/d80/_base_structure_8h" startline="599">evio::BaseStructure::numberDataItems</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a4b55bfb1a25acc690c9456f0869c4b49" compoundref="db/da7/_data_type_8h" startline="193" endline="197">evio::DataType::toString</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a89685661be04c90b3059e318f498531a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::updateDoubleData</definition>
        <argsstring>()</argsstring>
        <name>updateDoubleData</name>
        <briefdescription>
<para>If data in this structure was changed by modifying the vector returned from <ref refid="d9/ddd/classevio_1_1_base_structure_1ac85e2171b9e2afb61ad572d015723fbf" kindref="member">getDoubleData()</ref>, then this method needs to be called in order to make this object internally consistent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object corresponds to a different data type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="722" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="3267" bodyend="3294"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" compoundref="da/d80/_base_structure_8h" startline="602">evio::BaseStructure::byteOrder</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1ab57f0490234e6d17fedb0c39cf5093c1" compoundref="dd/d95/_byte_order_8cpp" startline="132" endline="143">evio::ByteOrder::byteSwap64</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a018e0280b01ac441c63dc529f391c812" compoundref="db/da7/_data_type_8h" startline="44">evio::DataType::DOUBLE64</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a88f301e38ebcc137ed91b13ffbb7b6b1" compoundref="da/d80/_base_structure_8h" startline="552">evio::BaseStructure::doubleData</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="da/d7d/classevio_1_1_byte_order_1a53f173621aa4ecf3bda24b74fdcb28b2" compoundref="d1/d02/_byte_order_8h" startline="151" endline="153">evio::ByteOrder::needToSwap</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5ff899f399d825ee358ddcc9d65a354b" compoundref="da/d80/_base_structure_8h" startline="599">evio::BaseStructure::numberDataItems</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a4b55bfb1a25acc690c9456f0869c4b49" compoundref="db/da7/_data_type_8h" startline="193" endline="197">evio::DataType::toString</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a4730e93ed7f947b82f022da6a417f611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::updateStringData</definition>
        <argsstring>()</argsstring>
        <name>updateStringData</name>
        <briefdescription>
<para>If data in this structure was changed by modifying the vector returned from <ref refid="d9/ddd/classevio_1_1_base_structure_1a0c5d29c325064e230d12cd5a30e8ef68" kindref="member">getStringData()</ref>, then this method needs to be called in order to make this object internally consistent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object corresponds to a different data type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="723" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="3304" bodyend="3315"/>
        <references refid="d5/d23/classevio_1_1_data_type_1a44ebcac2851a8e66b41605ab55bc6708" compoundref="db/da7/_data_type_8h" startline="39">evio::DataType::CHARSTAR8</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1adc7c9d3969d7e561016ba76dded03058" compoundref="dc/de3/_base_structure_8cpp" startline="2159" endline="2206">evio::BaseStructure::stringsToRawBytes</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a4b55bfb1a25acc690c9456f0869c4b49" compoundref="db/da7/_data_type_8h" startline="193" endline="197">evio::DataType::toString</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a84c0b49e9886b62dae99c8b32bec410a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::updateCompositeData</definition>
        <argsstring>()</argsstring>
        <name>updateCompositeData</name>
        <briefdescription>
<para>If data in this structure was changed by modifying the vector returned from <ref refid="d9/ddd/classevio_1_1_base_structure_1ac5e88c4f6a89a59851bf08a613d6ac42" kindref="member">getCompositeData()</ref>, then this method needs to be called in order to make this object internally consistent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if this object corresponds to a different data type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="724" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="3325" bodyend="3357"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" compoundref="da/d80/_base_structure_8h" startline="602">evio::BaseStructure::byteOrder</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a9790e6d2d964cd17518b510cade71013" compoundref="db/da7/_data_type_8h" startline="51">evio::DataType::COMPOSITE</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ae06e4d62b8242a789603ef428ba34ec8" compoundref="da/d80/_base_structure_8h" startline="558">evio::BaseStructure::compositeData</references>
        <references refid="d5/d4b/classevio_1_1_composite_data_1a1c44828a1acbffe083cc5122f8c4c8f1">evio::CompositeData::generateRawBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5ff899f399d825ee358ddcc9d65a354b" compoundref="da/d80/_base_structure_8h" startline="599">evio::BaseStructure::numberDataItems</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a4b55bfb1a25acc690c9456f0869c4b49" compoundref="db/da7/_data_type_8h" startline="193" endline="197">evio::DataType::toString</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d9/ddd/classevio_1_1_base_structure_1a71b2e0d148b268113eb6214bd50a0643" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t evio::BaseStructure::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="363" column="24" bodyfile="src/libsrc/BaseStructure.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/ddd/classevio_1_1_base_structure_1a49ba916414823d231113d835a9b7620f" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>typedef std::ptrdiff_t evio::BaseStructure::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="364" column="32" bodyfile="src/libsrc/BaseStructure.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/ddd/classevio_1_1_base_structure_1ac5a18739caa01565f19cc2ecb29faa6a" prot="public" static="no">
        <type>std::input_iterator_tag</type>
        <definition>typedef std::input_iterator_tag evio::BaseStructure::iterator_category</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="365" column="41" bodyfile="src/libsrc/BaseStructure.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/ddd/classevio_1_1_base_structure_1a33937f6e7034fccea57626062e7f34eb" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;BaseStructure&gt; evio::BaseStructure::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="367" column="33" bodyfile="src/libsrc/BaseStructure.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/ddd/classevio_1_1_base_structure_1a3189b9ed0ee2381128a0eaf4b0143571" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;BaseStructure&gt; evio::BaseStructure::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="368" column="33" bodyfile="src/libsrc/BaseStructure.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/ddd/classevio_1_1_base_structure_1a6c36c12ffe61cb8ebe8c5bf402f3087b" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;BaseStructure&gt; evio::BaseStructure::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="369" column="33" bodyfile="src/libsrc/BaseStructure.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/ddd/classevio_1_1_base_structure_1a9e1427e32d6d200e1f02f9dff936cbc4" prot="public" static="no">
        <type><ref refid="d5/d6b/classevio_1_1node_iterator" kindref="compound">nodeIterator</ref>&lt; std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; &gt;</type>
        <definition>typedef nodeIterator&lt;std::shared_ptr&lt;BaseStructure&gt; &gt; evio::BaseStructure::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="371" column="30" bodyfile="src/libsrc/BaseStructure.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/ddd/classevio_1_1_base_structure_1a9bfcca6273152e739af79404c28ba2a8" prot="public" static="no">
        <type><ref refid="d8/d2b/classevio_1_1node_breadth_iterator" kindref="compound">nodeBreadthIterator</ref>&lt; std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; &gt;</type>
        <definition>typedef nodeBreadthIterator&lt;std::shared_ptr&lt;BaseStructure&gt; &gt; evio::BaseStructure::breadth_iterator</definition>
        <argsstring></argsstring>
        <name>breadth_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="372" column="37" bodyfile="src/libsrc/BaseStructure.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1ad8aebbe861a56dfa3904009f265d45ca" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
        <definition>std::shared_ptr&lt;BaseStructure&gt; evio::BaseStructure::parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>This node&apos;s parent, or null if this node has no parent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="408" column="25" bodyfile="src/libsrc/BaseStructure.h" bodystart="408" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a9e5210514fffefb8e67a3c8e736a694a" compoundref="dc/de3/_base_structure_8cpp" startline="37" endline="49">evio::BaseStructure::BaseStructure</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a70802d7ff9b48f7b924bd448868e5266" compoundref="dc/de3/_base_structure_8cpp" startline="440" endline="440">evio::BaseStructure::getParent</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a8e83d158f39983480fbb1e1a4e1e659b" compoundref="dc/de3/_base_structure_8cpp" startline="131" endline="143">evio::BaseStructure::operator=</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a41bd6cd1bcbcc44bde3c0f9dcb2c7c17" compoundref="dc/de3/_base_structure_8cpp" startline="362" endline="362">evio::BaseStructure::setParent</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;BaseStructure&gt; &gt; evio::BaseStructure::children</definition>
        <argsstring></argsstring>
        <name>children</name>
        <briefdescription>
<para>Array of children, may be null if this node has no children. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="411" column="21" bodyfile="src/libsrc/BaseStructure.h" bodystart="411" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a9e5210514fffefb8e67a3c8e736a694a" compoundref="dc/de3/_base_structure_8cpp" startline="37" endline="49">evio::BaseStructure::BaseStructure</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac91b87b457e9dfc0555202f4a534b3bc" compoundref="dc/de3/_base_structure_8cpp" startline="516" endline="516">evio::BaseStructure::childrenBegin</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a5c04b4a9d58ab6ac98218df1173a0338" compoundref="dc/de3/_base_structure_8cpp" startline="527" endline="527">evio::BaseStructure::childrenEnd</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a5b2df8aed45cf4534cd655772a68af67" compoundref="dc/de3/_base_structure_8cpp" startline="457" endline="459">evio::BaseStructure::getChildAt</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a3f0a34f51bbc96c4faeef160eaed0996" compoundref="dc/de3/_base_structure_8cpp" startline="467" endline="467">evio::BaseStructure::getChildCount</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a1f2a6022fb0d1af1a8ccfa4c6c56655c" compoundref="dc/de3/_base_structure_8cpp" startline="447" endline="447">evio::BaseStructure::getChildren</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1abde363c80f5877872d708d8b893a14d2" compoundref="dc/de3/_base_structure_8cpp" startline="483" endline="505">evio::BaseStructure::getIndex</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a015be72a2d2a8d0d806d3d3c9d90ca83" compoundref="dc/de3/_base_structure_8cpp" startline="380" endline="404">evio::BaseStructure::insert</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a8e83d158f39983480fbb1e1a4e1e659b" compoundref="dc/de3/_base_structure_8cpp" startline="131" endline="143">evio::BaseStructure::operator=</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a3961ab65e777588a2215103779819d66" compoundref="dc/de3/_base_structure_8cpp" startline="415" endline="432">evio::BaseStructure::remove</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a7f33ccd6c19c44b142215c835c0aa192" compoundref="dc/de3/_base_structure_8cpp" startline="1524" endline="1562">evio::BaseStructure::toString</referencedby>
        <referencedby refid="d4/d12/classevio_1_1_evio_event_1a96cc08b2bd2a9eef2c97afd7db36e7d9" compoundref="df/d94/_evio_event_8h" startline="140" endline="178">evio::EvioEvent::toString</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a441099dff9fd748e9438b7f551ac36aa" compoundref="dc/de3/_base_structure_8cpp" startline="157" endline="169">evio::BaseStructure::transform</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a7fe9f85e6b1c612098111c6b95481b84" compoundref="dc/de3/_base_structure_8cpp" startline="1571" endline="1587">evio::BaseStructure::treeToString</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a165601aa2afb10063c6725a54b80f7b5" compoundref="dc/de3/_base_structure_8cpp" startline="2731" endline="2869">evio::BaseStructure::write</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1a7dd7cf17b8603987a79ad89cbbeb9783" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::BaseStructure::allowsChildren</definition>
        <argsstring></argsstring>
        <name>allowsChildren</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>True if the node is able to have children. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="414" column="14" bodyfile="src/libsrc/BaseStructure.h" bodystart="414" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a9e5210514fffefb8e67a3c8e736a694a" compoundref="dc/de3/_base_structure_8cpp" startline="37" endline="49">evio::BaseStructure::BaseStructure</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1abf1788d29991b16091ebfb96ae7627ec" compoundref="dc/de3/_base_structure_8cpp" startline="554" endline="554">evio::BaseStructure::getAllowsChildren</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a015be72a2d2a8d0d806d3d3c9d90ca83" compoundref="dc/de3/_base_structure_8cpp" startline="380" endline="404">evio::BaseStructure::insert</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a8e83d158f39983480fbb1e1a4e1e659b" compoundref="dc/de3/_base_structure_8cpp" startline="131" endline="143">evio::BaseStructure::operator=</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a098f7f23b0646a750a59181ff232838e" compoundref="dc/de3/_base_structure_8cpp" startline="539" endline="546">evio::BaseStructure::setAllowsChildren</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="db/dfb/classevio_1_1_base_structure_header" kindref="compound">BaseStructureHeader</ref> &gt;</type>
        <definition>std::shared_ptr&lt;BaseStructureHeader&gt; evio::BaseStructure::header</definition>
        <argsstring></argsstring>
        <name>header</name>
        <briefdescription>
<para>Holds the header of the bank as a shared pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="528" column="25" bodyfile="src/libsrc/BaseStructure.h" bodystart="528" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a4d28cb35a6d49be7cdf219edd6f7bf6d" compoundref="dc/de3/_base_structure_8cpp" startline="20" endline="22">evio::BaseStructure::BaseStructure</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a7dbf9d7691f2c8ebb1fea19fdfb67482" compoundref="dc/de3/_base_structure_8cpp" startline="2551" endline="2597">evio::BaseStructure::dataLength</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a807313df5509f3ebbe5e43bb25f471e3" compoundref="dc/de3/_base_structure_8cpp" startline="1963" endline="1976">evio::BaseStructure::getCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac5e88c4f6a89a59851bf08a613d6ac42" compoundref="dc/de3/_base_structure_8cpp" startline="1942" endline="1952">evio::BaseStructure::getCompositeData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac85e2171b9e2afb61ad572d015723fbf" compoundref="dc/de3/_base_structure_8cpp" startline="1911" endline="1930">evio::BaseStructure::getDoubleData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af78744f272c2da5a9e708a67c2c0cdbc" compoundref="dc/de3/_base_structure_8cpp" startline="1881" endline="1900">evio::BaseStructure::getFloatData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1aafc000e4a21eec3e8f844251799f91c0" compoundref="dc/de3/_base_structure_8cpp" startline="1594" endline="1594">evio::BaseStructure::getHeader</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a622bb507ede6789103db9fd9052ff57a" compoundref="dc/de3/_base_structure_8cpp" startline="1761" endline="1780">evio::BaseStructure::getIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a710023eaa51b01f35b8adf0159b472d8" compoundref="dc/de3/_base_structure_8cpp" startline="1821" endline="1840">evio::BaseStructure::getLongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac32a371061bb108c2dcce0d21df4d87c" compoundref="dc/de3/_base_structure_8cpp" startline="1606" endline="1653">evio::BaseStructure::getNumberDataItems</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac7f038740895252926e0f05dc6e6c682" compoundref="dc/de3/_base_structure_8cpp" startline="1696" endline="1720">evio::BaseStructure::getShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0c5d29c325064e230d12cd5a30e8ef68" compoundref="dc/de3/_base_structure_8cpp" startline="2027" endline="2042">evio::BaseStructure::getStringData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a639bf2bdac6b782654a649442061a528" compoundref="dc/de3/_base_structure_8cpp" startline="1660" endline="1660">evio::BaseStructure::getTotalBytes</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1aa67b53fb0e89e5e68998bfdb5b4ae0b6" compoundref="dc/de3/_base_structure_8cpp" startline="1987" endline="2000">evio::BaseStructure::getUCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ab635c54c693b2475f39e29ee94c6311b" compoundref="dc/de3/_base_structure_8cpp" startline="1791" endline="1810">evio::BaseStructure::getUIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ae0327f6bc030cdd08266a3115f69a9e5" compoundref="dc/de3/_base_structure_8cpp" startline="1851" endline="1870">evio::BaseStructure::getULongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a1b2a0620587c0eb2c39bcab988d2611c" compoundref="dc/de3/_base_structure_8cpp" startline="1731" endline="1750">evio::BaseStructure::getUShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac70d6ee0180157dfd4f7938cc2dc2909" compoundref="dc/de3/_base_structure_8cpp" startline="2537" endline="2537">evio::BaseStructure::isContainer</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a8e83d158f39983480fbb1e1a4e1e659b" compoundref="dc/de3/_base_structure_8cpp" startline="131" endline="143">evio::BaseStructure::operator=</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1adc7c9d3969d7e561016ba76dded03058" compoundref="dc/de3/_base_structure_8cpp" startline="2159" endline="2206">evio::BaseStructure::stringsToRawBytes</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a7f33ccd6c19c44b142215c835c0aa192" compoundref="dc/de3/_base_structure_8cpp" startline="1524" endline="1562">evio::BaseStructure::toString</referencedby>
        <referencedby refid="d4/d12/classevio_1_1_evio_event_1a96cc08b2bd2a9eef2c97afd7db36e7d9" compoundref="df/d94/_evio_event_8h" startline="140" endline="178">evio::EvioEvent::toString</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a5fe3a48fb1f8898bdd13d08ea689ea41" compoundref="dc/de3/_base_structure_8cpp" startline="3157" endline="3184">evio::BaseStructure::updateCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a84c0b49e9886b62dae99c8b32bec410a" compoundref="dc/de3/_base_structure_8cpp" startline="3325" endline="3357">evio::BaseStructure::updateCompositeData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a89685661be04c90b3059e318f498531a" compoundref="dc/de3/_base_structure_8cpp" startline="3267" endline="3294">evio::BaseStructure::updateDoubleData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a39c24b766b220d1cda0e48a37f9b4881" compoundref="dc/de3/_base_structure_8cpp" startline="3230" endline="3257">evio::BaseStructure::updateFloatData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0264daf6e038c485628e364992c05e0e" compoundref="dc/de3/_base_structure_8cpp" startline="2904" endline="2935">evio::BaseStructure::updateIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a3b3dde0d329569255caa66a4f66d177f" compoundref="dc/de3/_base_structure_8cpp" startline="3084" endline="3111">evio::BaseStructure::updateLongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a408dedd1788bfcae0104b3455da671cc" compoundref="dc/de3/_base_structure_8cpp" startline="2981" endline="3024">evio::BaseStructure::updateShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a4730e93ed7f947b82f022da6a417f611" compoundref="dc/de3/_base_structure_8cpp" startline="3304" endline="3315">evio::BaseStructure::updateStringData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a896a4fdf01edece007470588d1835058" compoundref="dc/de3/_base_structure_8cpp" startline="3194" endline="3220">evio::BaseStructure::updateUCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0c3cfcf8e19805e392d092c8c7b9602c" compoundref="dc/de3/_base_structure_8cpp" startline="2945" endline="2971">evio::BaseStructure::updateUIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a1add8a09e87d9605a6da5deff79808e4" compoundref="dc/de3/_base_structure_8cpp" startline="3121" endline="3147">evio::BaseStructure::updateULongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af3021857b10c869f6ade49085cc392c2" compoundref="dc/de3/_base_structure_8cpp" startline="3034" endline="3074">evio::BaseStructure::updateUShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a165601aa2afb10063c6725a54b80f7b5" compoundref="dc/de3/_base_structure_8cpp" startline="2731" endline="2869">evio::BaseStructure::write</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1abe16136d78101e6a704f717b9d0426af" compoundref="dc/de3/_base_structure_8cpp" startline="2695" endline="2700">evio::BaseStructure::writeQuick</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; evio::BaseStructure::rawBytes</definition>
        <argsstring></argsstring>
        <name>rawBytes</name>
        <briefdescription>
<para>The raw data of the structure. </para>
        </briefdescription>
        <detaileddescription>
<para>May contain padding. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="531" column="21" bodyfile="src/libsrc/BaseStructure.h" bodystart="531" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a7dbf9d7691f2c8ebb1fea19fdfb67482" compoundref="dc/de3/_base_structure_8cpp" startline="2551" endline="2597">evio::BaseStructure::dataLength</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a807313df5509f3ebbe5e43bb25f471e3" compoundref="dc/de3/_base_structure_8cpp" startline="1963" endline="1976">evio::BaseStructure::getCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac5e88c4f6a89a59851bf08a613d6ac42" compoundref="dc/de3/_base_structure_8cpp" startline="1942" endline="1952">evio::BaseStructure::getCompositeData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac85e2171b9e2afb61ad572d015723fbf" compoundref="dc/de3/_base_structure_8cpp" startline="1911" endline="1930">evio::BaseStructure::getDoubleData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af78744f272c2da5a9e708a67c2c0cdbc" compoundref="dc/de3/_base_structure_8cpp" startline="1881" endline="1900">evio::BaseStructure::getFloatData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a622bb507ede6789103db9fd9052ff57a" compoundref="dc/de3/_base_structure_8cpp" startline="1761" endline="1780">evio::BaseStructure::getIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a710023eaa51b01f35b8adf0159b472d8" compoundref="dc/de3/_base_structure_8cpp" startline="1821" endline="1840">evio::BaseStructure::getLongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac32a371061bb108c2dcce0d21df4d87c" compoundref="dc/de3/_base_structure_8cpp" startline="1606" endline="1653">evio::BaseStructure::getNumberDataItems</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a7b02d376f76291b95ad3d96420534350" compoundref="dc/de3/_base_structure_8cpp" startline="1667" endline="1667">evio::BaseStructure::getRawBytes</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac7f038740895252926e0f05dc6e6c682" compoundref="dc/de3/_base_structure_8cpp" startline="1696" endline="1720">evio::BaseStructure::getShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0c5d29c325064e230d12cd5a30e8ef68" compoundref="dc/de3/_base_structure_8cpp" startline="2027" endline="2042">evio::BaseStructure::getStringData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1aa67b53fb0e89e5e68998bfdb5b4ae0b6" compoundref="dc/de3/_base_structure_8cpp" startline="1987" endline="2000">evio::BaseStructure::getUCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ab635c54c693b2475f39e29ee94c6311b" compoundref="dc/de3/_base_structure_8cpp" startline="1791" endline="1810">evio::BaseStructure::getUIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ae0327f6bc030cdd08266a3115f69a9e5" compoundref="dc/de3/_base_structure_8cpp" startline="1851" endline="1870">evio::BaseStructure::getULongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a1b2a0620587c0eb2c39bcab988d2611c" compoundref="dc/de3/_base_structure_8cpp" startline="1731" endline="1750">evio::BaseStructure::getUShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a61499e60b45774c6f2eb93cebdf25634" compoundref="dc/de3/_base_structure_8cpp" startline="1675" endline="1678">evio::BaseStructure::setRawBytes</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1adc7c9d3969d7e561016ba76dded03058" compoundref="dc/de3/_base_structure_8cpp" startline="2159" endline="2206">evio::BaseStructure::stringsToRawBytes</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a7f33ccd6c19c44b142215c835c0aa192" compoundref="dc/de3/_base_structure_8cpp" startline="1524" endline="1562">evio::BaseStructure::toString</referencedby>
        <referencedby refid="d4/d12/classevio_1_1_evio_event_1a96cc08b2bd2a9eef2c97afd7db36e7d9" compoundref="df/d94/_evio_event_8h" startline="140" endline="178">evio::EvioEvent::toString</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a627d070cacdcdf245689e6d950e0f629" compoundref="dc/de3/_base_structure_8cpp" startline="2411" endline="2526">evio::BaseStructure::unpackRawBytesToStrings</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a5fe3a48fb1f8898bdd13d08ea689ea41" compoundref="dc/de3/_base_structure_8cpp" startline="3157" endline="3184">evio::BaseStructure::updateCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a84c0b49e9886b62dae99c8b32bec410a" compoundref="dc/de3/_base_structure_8cpp" startline="3325" endline="3357">evio::BaseStructure::updateCompositeData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a89685661be04c90b3059e318f498531a" compoundref="dc/de3/_base_structure_8cpp" startline="3267" endline="3294">evio::BaseStructure::updateDoubleData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a39c24b766b220d1cda0e48a37f9b4881" compoundref="dc/de3/_base_structure_8cpp" startline="3230" endline="3257">evio::BaseStructure::updateFloatData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0264daf6e038c485628e364992c05e0e" compoundref="dc/de3/_base_structure_8cpp" startline="2904" endline="2935">evio::BaseStructure::updateIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a3b3dde0d329569255caa66a4f66d177f" compoundref="dc/de3/_base_structure_8cpp" startline="3084" endline="3111">evio::BaseStructure::updateLongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a408dedd1788bfcae0104b3455da671cc" compoundref="dc/de3/_base_structure_8cpp" startline="2981" endline="3024">evio::BaseStructure::updateShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a896a4fdf01edece007470588d1835058" compoundref="dc/de3/_base_structure_8cpp" startline="3194" endline="3220">evio::BaseStructure::updateUCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0c3cfcf8e19805e392d092c8c7b9602c" compoundref="dc/de3/_base_structure_8cpp" startline="2945" endline="2971">evio::BaseStructure::updateUIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a1add8a09e87d9605a6da5deff79808e4" compoundref="dc/de3/_base_structure_8cpp" startline="3121" endline="3147">evio::BaseStructure::updateULongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af3021857b10c869f6ade49085cc392c2" compoundref="dc/de3/_base_structure_8cpp" startline="3034" endline="3074">evio::BaseStructure::updateUShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a165601aa2afb10063c6725a54b80f7b5" compoundref="dc/de3/_base_structure_8cpp" startline="2731" endline="2869">evio::BaseStructure::write</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1abe16136d78101e6a704f717b9d0426af" compoundref="dc/de3/_base_structure_8cpp" startline="2695" endline="2700">evio::BaseStructure::writeQuick</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1a37df56b8f81fc97692385bab31460527" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; int16_t &gt;</type>
        <definition>std::vector&lt;int16_t&gt; evio::BaseStructure::shortData</definition>
        <argsstring></argsstring>
        <name>shortData</name>
        <briefdescription>
<para>Used if raw data should be interpreted as shorts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="534" column="21" bodyfile="src/libsrc/BaseStructure.h" bodystart="534" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac7f038740895252926e0f05dc6e6c682" compoundref="dc/de3/_base_structure_8cpp" startline="1696" endline="1720">evio::BaseStructure::getShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a408dedd1788bfcae0104b3455da671cc" compoundref="dc/de3/_base_structure_8cpp" startline="2981" endline="3024">evio::BaseStructure::updateShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a165601aa2afb10063c6725a54b80f7b5" compoundref="dc/de3/_base_structure_8cpp" startline="2731" endline="2869">evio::BaseStructure::write</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1ad78217635d3b770cefb9fba496f0b09d" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; uint16_t &gt;</type>
        <definition>std::vector&lt;uint16_t&gt; evio::BaseStructure::ushortData</definition>
        <argsstring></argsstring>
        <name>ushortData</name>
        <briefdescription>
<para>Used if raw data should be interpreted as unsigned shorts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="537" column="21" bodyfile="src/libsrc/BaseStructure.h" bodystart="537" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a1b2a0620587c0eb2c39bcab988d2611c" compoundref="dc/de3/_base_structure_8cpp" startline="1731" endline="1750">evio::BaseStructure::getUShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af3021857b10c869f6ade49085cc392c2" compoundref="dc/de3/_base_structure_8cpp" startline="3034" endline="3074">evio::BaseStructure::updateUShortData</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1a7d054641d85f3d44bf162369bf2e2022" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; int32_t &gt;</type>
        <definition>std::vector&lt;int32_t&gt; evio::BaseStructure::intData</definition>
        <argsstring></argsstring>
        <name>intData</name>
        <briefdescription>
<para>Used if raw data should be interpreted as ints. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="540" column="21" bodyfile="src/libsrc/BaseStructure.h" bodystart="540" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a622bb507ede6789103db9fd9052ff57a" compoundref="dc/de3/_base_structure_8cpp" startline="1761" endline="1780">evio::BaseStructure::getIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0264daf6e038c485628e364992c05e0e" compoundref="dc/de3/_base_structure_8cpp" startline="2904" endline="2935">evio::BaseStructure::updateIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a165601aa2afb10063c6725a54b80f7b5" compoundref="dc/de3/_base_structure_8cpp" startline="2731" endline="2869">evio::BaseStructure::write</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1ab4506507f62a2207e5ed1c2f64a58e68" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt;uint32_t&gt; evio::BaseStructure::uintData</definition>
        <argsstring></argsstring>
        <name>uintData</name>
        <briefdescription>
<para>Used if raw data should be interpreted as unsigned ints. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="543" column="21" bodyfile="src/libsrc/BaseStructure.h" bodystart="543" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ab635c54c693b2475f39e29ee94c6311b" compoundref="dc/de3/_base_structure_8cpp" startline="1791" endline="1810">evio::BaseStructure::getUIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0c3cfcf8e19805e392d092c8c7b9602c" compoundref="dc/de3/_base_structure_8cpp" startline="2945" endline="2971">evio::BaseStructure::updateUIntData</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1a98c3c791cb4c1cb5fefe377c895d1da8" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; int64_t &gt;</type>
        <definition>std::vector&lt;int64_t&gt; evio::BaseStructure::longData</definition>
        <argsstring></argsstring>
        <name>longData</name>
        <briefdescription>
<para>Used if raw data should be interpreted as longs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="546" column="21" bodyfile="src/libsrc/BaseStructure.h" bodystart="546" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a710023eaa51b01f35b8adf0159b472d8" compoundref="dc/de3/_base_structure_8cpp" startline="1821" endline="1840">evio::BaseStructure::getLongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a3b3dde0d329569255caa66a4f66d177f" compoundref="dc/de3/_base_structure_8cpp" startline="3084" endline="3111">evio::BaseStructure::updateLongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a165601aa2afb10063c6725a54b80f7b5" compoundref="dc/de3/_base_structure_8cpp" startline="2731" endline="2869">evio::BaseStructure::write</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1a6aa9f6fb780d77877214ce03be40002b" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; uint64_t &gt;</type>
        <definition>std::vector&lt;uint64_t&gt; evio::BaseStructure::ulongData</definition>
        <argsstring></argsstring>
        <name>ulongData</name>
        <briefdescription>
<para>Used if raw data should be interpreted as unsigned longs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="549" column="21" bodyfile="src/libsrc/BaseStructure.h" bodystart="549" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ae0327f6bc030cdd08266a3115f69a9e5" compoundref="dc/de3/_base_structure_8cpp" startline="1851" endline="1870">evio::BaseStructure::getULongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a1add8a09e87d9605a6da5deff79808e4" compoundref="dc/de3/_base_structure_8cpp" startline="3121" endline="3147">evio::BaseStructure::updateULongData</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1a88f301e38ebcc137ed91b13ffbb7b6b1" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; evio::BaseStructure::doubleData</definition>
        <argsstring></argsstring>
        <name>doubleData</name>
        <briefdescription>
<para>Used if raw data should be interpreted as doubles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="552" column="21" bodyfile="src/libsrc/BaseStructure.h" bodystart="552" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac85e2171b9e2afb61ad572d015723fbf" compoundref="dc/de3/_base_structure_8cpp" startline="1911" endline="1930">evio::BaseStructure::getDoubleData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a89685661be04c90b3059e318f498531a" compoundref="dc/de3/_base_structure_8cpp" startline="3267" endline="3294">evio::BaseStructure::updateDoubleData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a165601aa2afb10063c6725a54b80f7b5" compoundref="dc/de3/_base_structure_8cpp" startline="2731" endline="2869">evio::BaseStructure::write</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1a7e6f6c32641b1e7700f24d80aa19f99e" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; evio::BaseStructure::floatData</definition>
        <argsstring></argsstring>
        <name>floatData</name>
        <briefdescription>
<para>Used if raw data should be interpreted as floats. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="555" column="21" bodyfile="src/libsrc/BaseStructure.h" bodystart="555" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af78744f272c2da5a9e708a67c2c0cdbc" compoundref="dc/de3/_base_structure_8cpp" startline="1881" endline="1900">evio::BaseStructure::getFloatData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a39c24b766b220d1cda0e48a37f9b4881" compoundref="dc/de3/_base_structure_8cpp" startline="3230" endline="3257">evio::BaseStructure::updateFloatData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a165601aa2afb10063c6725a54b80f7b5" compoundref="dc/de3/_base_structure_8cpp" startline="2731" endline="2869">evio::BaseStructure::write</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1ae06e4d62b8242a789603ef428ba34ec8" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d5/d4b/classevio_1_1_composite_data" kindref="compound">CompositeData</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;CompositeData&gt; &gt; evio::BaseStructure::compositeData</definition>
        <argsstring></argsstring>
        <name>compositeData</name>
        <briefdescription>
<para>Used if raw data should be interpreted as composite type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="558" column="21" bodyfile="src/libsrc/BaseStructure.h" bodystart="558" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac5e88c4f6a89a59851bf08a613d6ac42" compoundref="dc/de3/_base_structure_8cpp" startline="1942" endline="1952">evio::BaseStructure::getCompositeData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac32a371061bb108c2dcce0d21df4d87c" compoundref="dc/de3/_base_structure_8cpp" startline="1606" endline="1653">evio::BaseStructure::getNumberDataItems</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a84c0b49e9886b62dae99c8b32bec410a" compoundref="dc/de3/_base_structure_8cpp" startline="3325" endline="3357">evio::BaseStructure::updateCompositeData</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1a9dad3afa35396436b3734347474c6b6c" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; signed char &gt;</type>
        <definition>std::vector&lt;signed char&gt; evio::BaseStructure::charData</definition>
        <argsstring></argsstring>
        <name>charData</name>
        <briefdescription>
<para>Used if raw data should be interpreted as signed chars. </para>
        </briefdescription>
        <detaileddescription>
<para>The reason rawBytes is not used directly is because it may be padded and it may not, depending on whether this object was created by <ref refid="df/dbd/classevio_1_1_evio_reader" kindref="compound">EvioReader</ref> or by <ref refid="db/d06/classevio_1_1_event_builder" kindref="compound">EventBuilder</ref>, etc., etc. We don&apos;t want to return rawBytes when a user calls <ref refid="d9/ddd/classevio_1_1_base_structure_1a807313df5509f3ebbe5e43bb25f471e3" kindref="member">getCharData()</ref> if there are padding bytes in it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="568" column="21" bodyfile="src/libsrc/BaseStructure.h" bodystart="568" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a807313df5509f3ebbe5e43bb25f471e3" compoundref="dc/de3/_base_structure_8cpp" startline="1963" endline="1976">evio::BaseStructure::getCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a5fe3a48fb1f8898bdd13d08ea689ea41" compoundref="dc/de3/_base_structure_8cpp" startline="3157" endline="3184">evio::BaseStructure::updateCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a165601aa2afb10063c6725a54b80f7b5" compoundref="dc/de3/_base_structure_8cpp" startline="2731" endline="2869">evio::BaseStructure::write</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1aa787d317915a5b6bb5e008e06522bd1b" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; unsigned char &gt;</type>
        <definition>std::vector&lt;unsigned char&gt; evio::BaseStructure::ucharData</definition>
        <argsstring></argsstring>
        <name>ucharData</name>
        <briefdescription>
<para>Used if raw data should be interpreted as unsigned chars. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="571" column="21" bodyfile="src/libsrc/BaseStructure.h" bodystart="571" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1aa67b53fb0e89e5e68998bfdb5b4ae0b6" compoundref="dc/de3/_base_structure_8cpp" startline="1987" endline="2000">evio::BaseStructure::getUCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a896a4fdf01edece007470588d1835058" compoundref="dc/de3/_base_structure_8cpp" startline="3194" endline="3220">evio::BaseStructure::updateUCharData</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1ad1e9d48dc5380e47df3e0080f2ab7955" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string &gt; evio::BaseStructure::stringList</definition>
        <argsstring></argsstring>
        <name>stringList</name>
        <briefdescription>
<para>Used if raw data should be interpreted as a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="576" column="21" bodyfile="src/libsrc/BaseStructure.h" bodystart="576" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0c5d29c325064e230d12cd5a30e8ef68" compoundref="dc/de3/_base_structure_8cpp" startline="2027" endline="2042">evio::BaseStructure::getStringData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1adc7c9d3969d7e561016ba76dded03058" compoundref="dc/de3/_base_structure_8cpp" startline="2159" endline="2206">evio::BaseStructure::stringsToRawBytes</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a627d070cacdcdf245689e6d950e0f629" compoundref="dc/de3/_base_structure_8cpp" startline="2411" endline="2526">evio::BaseStructure::unpackRawBytesToStrings</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1a46671840c4a09bd8854917d39ef9220a" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int evio::BaseStructure::stringEnd</definition>
        <argsstring></argsstring>
        <name>stringEnd</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Keep track of end of the last string added to stringData (including null but not padding). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="582" column="13" bodyfile="src/libsrc/BaseStructure.h" bodystart="582" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a627d070cacdcdf245689e6d950e0f629" compoundref="dc/de3/_base_structure_8cpp" startline="2411" endline="2526">evio::BaseStructure::unpackRawBytesToStrings</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1a8c3a60ec0b0e0eef73390d4ce94e1617" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::BaseStructure::badStringFormat</definition>
        <argsstring></argsstring>
        <name>badStringFormat</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>True if char data has non-ascii or non-printable characters, or has too little data to be in proper format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="588" column="14" bodyfile="src/libsrc/BaseStructure.h" bodystart="588" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a627d070cacdcdf245689e6d950e0f629" compoundref="dc/de3/_base_structure_8cpp" startline="2411" endline="2526">evio::BaseStructure::unpackRawBytesToStrings</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1a5ff899f399d825ee358ddcc9d65a354b" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t evio::BaseStructure::numberDataItems</definition>
        <argsstring></argsstring>
        <name>numberDataItems</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The number of stored data items like number of banks, ints, floats, etc. </para>
        </briefdescription>
        <detaileddescription>
<para>(not the size in ints or bytes). Some items may be padded such as shorts and bytes. This will tell the meaningful number of such data items. In other words, no padding is included. In the case of containers, returns number of bytes not in header. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="599" column="16" bodyfile="src/libsrc/BaseStructure.h" bodystart="599" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac32a371061bb108c2dcce0d21df4d87c" compoundref="dc/de3/_base_structure_8cpp" startline="1606" endline="1653">evio::BaseStructure::getNumberDataItems</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1adc7c9d3969d7e561016ba76dded03058" compoundref="dc/de3/_base_structure_8cpp" startline="2159" endline="2206">evio::BaseStructure::stringsToRawBytes</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a5fe3a48fb1f8898bdd13d08ea689ea41" compoundref="dc/de3/_base_structure_8cpp" startline="3157" endline="3184">evio::BaseStructure::updateCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a84c0b49e9886b62dae99c8b32bec410a" compoundref="dc/de3/_base_structure_8cpp" startline="3325" endline="3357">evio::BaseStructure::updateCompositeData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a89685661be04c90b3059e318f498531a" compoundref="dc/de3/_base_structure_8cpp" startline="3267" endline="3294">evio::BaseStructure::updateDoubleData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a39c24b766b220d1cda0e48a37f9b4881" compoundref="dc/de3/_base_structure_8cpp" startline="3230" endline="3257">evio::BaseStructure::updateFloatData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0264daf6e038c485628e364992c05e0e" compoundref="dc/de3/_base_structure_8cpp" startline="2904" endline="2935">evio::BaseStructure::updateIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a3b3dde0d329569255caa66a4f66d177f" compoundref="dc/de3/_base_structure_8cpp" startline="3084" endline="3111">evio::BaseStructure::updateLongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a408dedd1788bfcae0104b3455da671cc" compoundref="dc/de3/_base_structure_8cpp" startline="2981" endline="3024">evio::BaseStructure::updateShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a896a4fdf01edece007470588d1835058" compoundref="dc/de3/_base_structure_8cpp" startline="3194" endline="3220">evio::BaseStructure::updateUCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0c3cfcf8e19805e392d092c8c7b9602c" compoundref="dc/de3/_base_structure_8cpp" startline="2945" endline="2971">evio::BaseStructure::updateUIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a1add8a09e87d9605a6da5deff79808e4" compoundref="dc/de3/_base_structure_8cpp" startline="3121" endline="3147">evio::BaseStructure::updateULongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af3021857b10c869f6ade49085cc392c2" compoundref="dc/de3/_base_structure_8cpp" startline="3034" endline="3074">evio::BaseStructure::updateUShortData</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" prot="protected" static="no" mutable="no">
        <type><ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref></type>
        <definition>ByteOrder evio::BaseStructure::byteOrder</definition>
        <argsstring></argsstring>
        <name>byteOrder</name>
        <initializer>{<ref refid="da/d7d/classevio_1_1_byte_order_1ae4055f708921d4e6540ab4662d27147c" kindref="member">ByteOrder::ENDIAN_LOCAL</ref>}</initializer>
        <briefdescription>
<para>Endianness of the raw data if appropriate. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize to local endian. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="602" column="19" bodyfile="src/libsrc/BaseStructure.h" bodystart="602" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a714c3de502f914d68f40025e8754fc0d" compoundref="dc/de3/_base_structure_8cpp" startline="1502" endline="1502">evio::BaseStructure::getByteOrder</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ac5e88c4f6a89a59851bf08a613d6ac42" compoundref="dc/de3/_base_structure_8cpp" startline="1942" endline="1952">evio::BaseStructure::getCompositeData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1ab315c15b1c10617a2f9351320dadfc4c" compoundref="dc/de3/_base_structure_8cpp" startline="1517" endline="1517">evio::BaseStructure::needSwap</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a7d44ced2b37f73f90022b9aee6e4c24f" compoundref="dc/de3/_base_structure_8cpp" startline="1510" endline="1510">evio::BaseStructure::setByteOrder</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a84c0b49e9886b62dae99c8b32bec410a" compoundref="dc/de3/_base_structure_8cpp" startline="3325" endline="3357">evio::BaseStructure::updateCompositeData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a89685661be04c90b3059e318f498531a" compoundref="dc/de3/_base_structure_8cpp" startline="3267" endline="3294">evio::BaseStructure::updateDoubleData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a39c24b766b220d1cda0e48a37f9b4881" compoundref="dc/de3/_base_structure_8cpp" startline="3230" endline="3257">evio::BaseStructure::updateFloatData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0264daf6e038c485628e364992c05e0e" compoundref="dc/de3/_base_structure_8cpp" startline="2904" endline="2935">evio::BaseStructure::updateIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a3b3dde0d329569255caa66a4f66d177f" compoundref="dc/de3/_base_structure_8cpp" startline="3084" endline="3111">evio::BaseStructure::updateLongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a408dedd1788bfcae0104b3455da671cc" compoundref="dc/de3/_base_structure_8cpp" startline="2981" endline="3024">evio::BaseStructure::updateShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0c3cfcf8e19805e392d092c8c7b9602c" compoundref="dc/de3/_base_structure_8cpp" startline="2945" endline="2971">evio::BaseStructure::updateUIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a1add8a09e87d9605a6da5deff79808e4" compoundref="dc/de3/_base_structure_8cpp" startline="3121" endline="3147">evio::BaseStructure::updateULongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af3021857b10c869f6ade49085cc392c2" compoundref="dc/de3/_base_structure_8cpp" startline="3034" endline="3074">evio::BaseStructure::updateUShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a165601aa2afb10063c6725a54b80f7b5" compoundref="dc/de3/_base_structure_8cpp" startline="2731" endline="2869">evio::BaseStructure::write</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a42b0810ce1c98aa6d9916475de98ec82" compoundref="dc/de3/_base_structure_8cpp" startline="2715" endline="2721">evio::BaseStructure::writeQuick</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/ddd/classevio_1_1_base_structure_1abb71e9e91493d619c5d694c509201ffa" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::BaseStructure::lengthsUpToDate</definition>
        <argsstring></argsstring>
        <name>lengthsUpToDate</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Keep track of whether header length data is up-to-date or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="605" column="14" bodyfile="src/libsrc/BaseStructure.h" bodystart="605" bodyend="-1"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a9e5210514fffefb8e67a3c8e736a694a" compoundref="dc/de3/_base_structure_8cpp" startline="37" endline="49">evio::BaseStructure::BaseStructure</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a571479dd61aebe7e17ffa408af6aa87f" compoundref="dc/de3/_base_structure_8cpp" startline="2607" endline="2607">evio::BaseStructure::getLengthsUpToDate</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a8e83d158f39983480fbb1e1a4e1e659b" compoundref="dc/de3/_base_structure_8cpp" startline="131" endline="143">evio::BaseStructure::operator=</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" compoundref="dc/de3/_base_structure_8cpp" startline="2617" endline="2626">evio::BaseStructure::setLengthsUpToDate</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a441099dff9fd748e9438b7f551ac36aa" compoundref="dc/de3/_base_structure_8cpp" startline="157" endline="169">evio::BaseStructure::transform</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a41bd6cd1bcbcc44bde3c0f9dcb2c7c17" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::setParent</definition>
        <argsstring>(const std::shared_ptr&lt; BaseStructure &gt; &amp;newParent)</argsstring>
        <name>setParent</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; &amp;</type>
          <declname>newParent</declname>
        </param>
        <briefdescription>
<para>Sets this node&apos;s parent to <computeroutput>newParent</computeroutput> but does not change the parent&apos;s child array. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is called from <ref refid="d9/ddd/classevio_1_1_base_structure_1a015be72a2d2a8d0d806d3d3c9d90ca83" kindref="member">insert</ref> and <ref refid="d9/ddd/classevio_1_1_base_structure_1a3961ab65e777588a2215103779819d66" kindref="member">remove</ref> to reassign a child&apos;s parent, it should not be messaged from anywhere else. Originally part of java&apos;s DefaultMutableBaseStructure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newParent</parametername>
</parameternamelist>
<parameterdescription>
<para>this node&apos;s new parent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="423" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="362" bodyend="362"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ad8aebbe861a56dfa3904009f265d45ca" compoundref="da/d80/_base_structure_8h" startline="408">evio::BaseStructure::parent</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a7bee59156af6c2a4d83eabeb93a33eb5" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; BaseStructure &gt; &gt; evio::BaseStructure::getPathToRoot</definition>
        <argsstring>(const std::shared_ptr&lt; BaseStructure &gt; &amp;aNode, int depth) const</argsstring>
        <name>getPathToRoot</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; &amp;</type>
          <declname>aNode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
<para>Builds the parents of node up to and including the root node, where the original node is the last element in the returned vector. </para>
        </briefdescription>
        <detaileddescription>
<para>The length of the returned array gives the node&apos;s depth in the tree. Originally part of java&apos;s DefaultMutableTreeNode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aNode</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> to get the path for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>an int giving the number of steps already taken towards the root (on recursive calls), used to size the returned vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a vector of <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> shared pointer giving the path from the root to the specified node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="465" column="21" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="831" bodyend="852"/>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1aa60a696d28dc913f60e7f37baa01af65" compoundref="dc/de3/_base_structure_8cpp" startline="814" endline="816">evio::BaseStructure::getPath</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a571479dd61aebe7e17ffa408af6aa87f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::BaseStructure::getLengthsUpToDate</definition>
        <argsstring>() const</argsstring>
        <name>getLengthsUpToDate</name>
        <briefdescription>
<para>Get whether the lengths of all header fields for this structure and all it descendants are up to date or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether the lengths of all header fields for this structure and all it descendants are up to date or not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="617" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2607" bodyend="2607"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1abb71e9e91493d619c5d694c509201ffa" compoundref="da/d80/_base_structure_8h" startline="605">evio::BaseStructure::lengthsUpToDate</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::setLengthsUpToDate</definition>
        <argsstring>(bool lengthsUpToDate)</argsstring>
        <name>setLengthsUpToDate</name>
        <param>
          <type>bool</type>
          <declname>lengthsUpToDate</declname>
          <defname>lenUpToDate</defname>
        </param>
        <briefdescription>
<para>Set whether the lengths of all header fields for this structure and all it descendants are up to date or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lenUpToDate</parametername>
</parameternamelist>
<parameterdescription>
<para>are the lengths of all header fields for this structure and all it descendants up to date or not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="618" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2617" bodyend="2626"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1abb71e9e91493d619c5d694c509201ffa" compoundref="da/d80/_base_structure_8h" startline="605">evio::BaseStructure::lengthsUpToDate</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ad8aebbe861a56dfa3904009f265d45ca" compoundref="da/d80/_base_structure_8h" startline="408">evio::BaseStructure::parent</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a015be72a2d2a8d0d806d3d3c9d90ca83" compoundref="dc/de3/_base_structure_8cpp" startline="380" endline="404">evio::BaseStructure::insert</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a3961ab65e777588a2215103779819d66" compoundref="dc/de3/_base_structure_8cpp" startline="415" endline="432">evio::BaseStructure::remove</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a5fe3a48fb1f8898bdd13d08ea689ea41" compoundref="dc/de3/_base_structure_8cpp" startline="3157" endline="3184">evio::BaseStructure::updateCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a84c0b49e9886b62dae99c8b32bec410a" compoundref="dc/de3/_base_structure_8cpp" startline="3325" endline="3357">evio::BaseStructure::updateCompositeData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a89685661be04c90b3059e318f498531a" compoundref="dc/de3/_base_structure_8cpp" startline="3267" endline="3294">evio::BaseStructure::updateDoubleData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a39c24b766b220d1cda0e48a37f9b4881" compoundref="dc/de3/_base_structure_8cpp" startline="3230" endline="3257">evio::BaseStructure::updateFloatData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0264daf6e038c485628e364992c05e0e" compoundref="dc/de3/_base_structure_8cpp" startline="2904" endline="2935">evio::BaseStructure::updateIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a3b3dde0d329569255caa66a4f66d177f" compoundref="dc/de3/_base_structure_8cpp" startline="3084" endline="3111">evio::BaseStructure::updateLongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a408dedd1788bfcae0104b3455da671cc" compoundref="dc/de3/_base_structure_8cpp" startline="2981" endline="3024">evio::BaseStructure::updateShortData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a4730e93ed7f947b82f022da6a417f611" compoundref="dc/de3/_base_structure_8cpp" startline="3304" endline="3315">evio::BaseStructure::updateStringData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a896a4fdf01edece007470588d1835058" compoundref="dc/de3/_base_structure_8cpp" startline="3194" endline="3220">evio::BaseStructure::updateUCharData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a0c3cfcf8e19805e392d092c8c7b9602c" compoundref="dc/de3/_base_structure_8cpp" startline="2945" endline="2971">evio::BaseStructure::updateUIntData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a1add8a09e87d9605a6da5deff79808e4" compoundref="dc/de3/_base_structure_8cpp" startline="3121" endline="3147">evio::BaseStructure::updateULongData</referencedby>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1af3021857b10c869f6ade49085cc392c2" compoundref="dc/de3/_base_structure_8cpp" startline="3034" endline="3074">evio::BaseStructure::updateUShortData</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a7dbf9d7691f2c8ebb1fea19fdfb67482" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::BaseStructure::dataLength</definition>
        <argsstring>()</argsstring>
        <name>dataLength</name>
        <briefdescription>
<para>Compute the dataLength in 32-bit words. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the amount of data needed by a leaf of primitives. For non-leafs (structures of structures) this returns 0. For data types smaller than an int, e.g. a short, it computes assuming padding to an integer number of ints. For example, if we are writing a byte array of length 3 or 4, the it would return 1. If the byte array is 5,6,7 or 8 it would return 2;</para>
<para><simplesect kind="return"><para>the amount of 32-bit words (ints) needed by a leaf of primitives, else 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="619" column="18" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2551" bodyend="2597"/>
        <references refid="d5/d23/classevio_1_1_data_type_1a9a9803199ba7b5236f9fb5ccaacc9c6d" compoundref="db/da7/_data_type_8h" startline="42">evio::DataType::CHAR8</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a44ebcac2851a8e66b41605ab55bc6708" compoundref="db/da7/_data_type_8h" startline="39">evio::DataType::CHARSTAR8</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a9790e6d2d964cd17518b510cade71013" compoundref="db/da7/_data_type_8h" startline="51">evio::DataType::COMPOSITE</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a0a61f0f28a505939e06e84c1e6e51daf" compoundref="db/da7/_data_type_8h" startline="251" endline="251">evio::DataType::getBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ac32a371061bb108c2dcce0d21df4d87c" compoundref="dc/de3/_base_structure_8cpp" startline="1606" endline="1653">evio::BaseStructure::getNumberDataItems</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1acf98ea08ba17e38d2c6b7b0af37293a9" compoundref="dc/de3/_base_structure_8cpp" startline="1226" endline="1226">evio::BaseStructure::isLeaf</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a1d561abba7301ebf74fefad8b29fa8ae" compoundref="db/da7/_data_type_8h" startline="43">evio::DataType::UCHAR8</references>
        <references refid="d5/d23/classevio_1_1_data_type_1a2b3013fda814a931239319319790c761" compoundref="db/da7/_data_type_8h" startline="36">evio::DataType::UNKNOWN32</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" compoundref="dc/de3/_base_structure_8cpp" startline="2636" endline="2679">evio::BaseStructure::setAllHeaderLengths</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1adc7c9d3969d7e561016ba76dded03058" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::stringsToRawBytes</definition>
        <argsstring>()</argsstring>
        <name>stringsToRawBytes</name>
        <briefdescription>
<para>This method transforms the internal vector of strings into internal rawBytes vector of evio format data not including header. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="620" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="2159" bodyend="2206"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" compoundref="da/d80/_base_structure_8h" startline="528">evio::BaseStructure::header</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a5ff899f399d825ee358ddcc9d65a354b" compoundref="da/d80/_base_structure_8h" startline="599">evio::BaseStructure::numberDataItems</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
        <references refid="d9/ddd/classevio_1_1_base_structure_1ad1e9d48dc5380e47df3e0080f2ab7955" compoundref="da/d80/_base_structure_8h" startline="576">evio::BaseStructure::stringList</references>
        <references refid="d3/d87/classevio_1_1_util_1ad5fb04e9424d2289798ce4fa72a0427a" compoundref="dd/d90/_util_8h" startline="729" endline="748">evio::Util::stringsToRawSize</references>
        <referencedby refid="d9/ddd/classevio_1_1_base_structure_1a4730e93ed7f947b82f022da6a417f611" compoundref="dc/de3/_base_structure_8cpp" startline="3304" endline="3315">evio::BaseStructure::updateStringData</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a61499e60b45774c6f2eb93cebdf25634" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::setRawBytes</definition>
        <argsstring>(uint8_t *bytes, uint32_t len)</argsstring>
        <name>setRawBytes</name>
        <param>
          <type>uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Set the data for the structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the data to be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="672" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1675" bodyend="1678"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
      </memberdef>
      <memberdef kind="function" id="d9/ddd/classevio_1_1_base_structure_1a9522305de1646e358ef455c6d5449b78" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::BaseStructure::setRawBytes</definition>
        <argsstring>(std::vector&lt; uint8_t &gt; &amp;bytes)</argsstring>
        <name>setRawBytes</name>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Set the data for the structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of data to be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/BaseStructure.h" line="673" column="14" bodyfile="src/libsrc/BaseStructure.cpp" bodystart="1685" bodyend="1685"/>
        <references refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" compoundref="da/d80/_base_structure_8h" startline="531">evio::BaseStructure::rawBytes</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This holds a CODA TagSegment structure. </para>
    </briefdescription>
    <detaileddescription>
<para>Mostly it has a header (a <computeroutput>TagSegementHeader</computeroutput>) and the raw data stored as a vector.</para>
<para><simplesect kind="author"><para>heddle </para>
</simplesect>
<simplesect kind="author"><para>timmer </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>std::enable_shared_from_this&lt; BaseStructure &gt;</label>
      </node>
      <node id="2">
        <label>evio::BaseStructure</label>
        <link refid="d9/ddd/classevio_1_1_base_structure"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>evio::EvioTagSegment</label>
        <link refid="d7/d91/classevio_1_1_evio_tag_segment"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>std::enable_shared_from_this&lt; BaseStructure &gt;</label>
      </node>
      <node id="2">
        <label>evio::BaseStructure</label>
        <link refid="d9/ddd/classevio_1_1_base_structure"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>byteOrder</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>evio::EvioTagSegment</label>
        <link refid="d7/d91/classevio_1_1_evio_tag_segment"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>evio::ByteOrder</label>
        <link refid="da/d7d/classevio_1_1_byte_order"/>
        <childnode refid="4" relation="usage">
          <edgelabel>ENDIAN_BIG</edgelabel>
          <edgelabel>ENDIAN_LITTLE</edgelabel>
          <edgelabel>ENDIAN_LOCAL</edgelabel>
          <edgelabel>ENDIAN_UNKNOWN</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/libsrc/EvioTagSegment.h" line="35" column="5" bodyfile="src/libsrc/EvioTagSegment.h" bodystart="35" bodyend="81"/>
    <listofallmembers>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a0bf8806bcb29279bf9f6fffe42067806" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>add</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a7dd7cf17b8603987a79ad89cbbeb9783" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>allowsChildren</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a8c3a60ec0b0e0eef73390d4ce94e1617" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>badStringFormat</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a4d28cb35a6d49be7cdf219edd6f7bf6d" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>BaseStructure</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a39352fd39615be8a3a34706ff8776739" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>BaseStructure</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a9e5210514fffefb8e67a3c8e736a694a" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>BaseStructure</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a4c06e0c4513bfb568f1424ba7be76e89" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>BaseStructure</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1adfe7d36699cb3376c5d44551edf3fb8f" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>bbegin</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1af19d422cb8edad9a7ab7c50d9f95384b" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>begin</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a68fb4345c10511f9aa796006d324647b" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>bend</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a9bfcca6273152e739af79404c28ba2a8" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>breadth_iterator</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a6befdae54cea18d9179279faf71f4611" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>byteOrder</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a9dad3afa35396436b3734347474c6b6c" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>charData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ae2163bd1d26d4eb4ce4ed83d55475466" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>children</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ac91b87b457e9dfc0555202f4a534b3bc" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>childrenBegin</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a5c04b4a9d58ab6ac98218df1173a0338" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>childrenEnd</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ae06e4d62b8242a789603ef428ba34ec8" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>compositeData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a7dbf9d7691f2c8ebb1fea19fdfb67482" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>dataLength</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a49ba916414823d231113d835a9b7620f" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>difference_type</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a88f301e38ebcc137ed91b13ffbb7b6b1" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>doubleData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a5f4561d633f547ffe744cbfb68de97e3" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>end</name></member>
      <member refid="d7/d91/classevio_1_1_evio_tag_segment_1ad6d3e71466260ce95dd1b273335fe4b6" prot="private" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>EvioTagSegment</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a7e6f6c32641b1e7700f24d80aa19f99e" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>floatData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1abf1788d29991b16091ebfb96ae7627ec" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getAllowsChildren</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a714c3de502f914d68f40025e8754fc0d" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getByteOrder</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a807313df5509f3ebbe5e43bb25f471e3" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getCharData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ae823ac500f8419e635066d4ba8aa0d80" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getChildAfter</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a5b2df8aed45cf4534cd655772a68af67" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getChildAt</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1aa4f07fa81af0ad966ff6860d399cd92b" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getChildBefore</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a3f0a34f51bbc96c4faeef160eaed0996" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getChildCount</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a1f2a6022fb0d1af1a8ccfa4c6c56655c" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getChildren</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ac5e88c4f6a89a59851bf08a613d6ac42" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getCompositeData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a9b038ad8e9a6b35538890289ec4e065b" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getDepth</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ac85e2171b9e2afb61ad572d015723fbf" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getDoubleData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1aafc1de1d8846a4141f9cc125860e80b7" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getFirstChild</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a4ef4e13ada4b6c8a131c4a23d0f9fba1" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getFirstLeaf</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1af78744f272c2da5a9e708a67c2c0cdbc" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getFloatData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1aafc000e4a21eec3e8f844251799f91c0" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getHeader</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1abde363c80f5877872d708d8b893a14d2" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getIndex</name></member>
      <member refid="d7/d91/classevio_1_1_evio_tag_segment_1a70327d9a4b433b55aeb3d78fef704af3" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getInstance</name></member>
      <member refid="d7/d91/classevio_1_1_evio_tag_segment_1ab4446300d4c9e987a526800993978808" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getInstance</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a622bb507ede6789103db9fd9052ff57a" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getIntData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a32f3f0587d35660a188083139a7a9a1e" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getLastChild</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a7299ce9b855d3b1b9193369eb930dfe9" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getLastLeaf</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a22f78ec396671f5e421c9f23bdc7f06b" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getLeafCount</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a571479dd61aebe7e17ffa408af6aa87f" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getLengthsUpToDate</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a66c6db380ce04efa87430c79358e72d5" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getLevel</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a710023eaa51b01f35b8adf0159b472d8" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getLongData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a7f61b0849a7f260192bfc77f8fd74a7d" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getMatchingStructures</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a3a9e454880823fc12618657e361eda9a" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getNextLeaf</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1af548a815cc358d4187e39378be02fc2c" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getNextNode</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1acf9557af3d316538b7b0929c8ba80e51" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getNextSibling</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ac32a371061bb108c2dcce0d21df4d87c" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getNumberDataItems</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a70802d7ff9b48f7b924bd448868e5266" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getParent</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1aa60a696d28dc913f60e7f37baa01af65" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getPath</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a7bee59156af6c2a4d83eabeb93a33eb5" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getPathToRoot</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1af475cd78e3dbbefdbf0ddbc4f21123d3" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getPreviousLeaf</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ab25c72ef83ab662bcbed3517c346ab17" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getPreviousNode</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a54b447d883807ece3fdd067f43e74824" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getPreviousSibling</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a7b02d376f76291b95ad3d96420534350" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getRawBytes</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a106e3a5e0396a3a7ca3cd8fff899be01" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getRoot</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1aa3c835fa26a5f6fd69dc201f1b148690" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getSharedAncestor</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ac7f038740895252926e0f05dc6e6c682" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getShortData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ad2f13cac7d47b222f31c71d797fd9ec1" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getSiblingCount</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a0c5d29c325064e230d12cd5a30e8ef68" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getStringData</name></member>
      <member refid="d7/d91/classevio_1_1_evio_tag_segment_1ab8897c9eb1b05f2a2911e2e8ee8d9a75" prot="public" virt="virtual"><scope>evio::EvioTagSegment</scope><name>getStructureType</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a90eb00ca90216fa72d3b36f5995cdb59" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getThis</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ae729917eb076c7a35adb765b8fbbab84" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getThisConst</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a639bf2bdac6b782654a649442061a528" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getTotalBytes</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1aa67b53fb0e89e5e68998bfdb5b4ae0b6" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getUCharData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ab635c54c693b2475f39e29ee94c6311b" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getUIntData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ae0327f6bc030cdd08266a3115f69a9e5" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getULongData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a1b2a0620587c0eb2c39bcab988d2611c" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>getUShortData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a34bde5df553f75ff01b9b4ad50774505" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>header</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a015be72a2d2a8d0d806d3d3c9d90ca83" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>insert</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a7d054641d85f3d44bf162369bf2e2022" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>intData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ac70d6ee0180157dfd4f7938cc2dc2909" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>isContainer</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1acf98ea08ba17e38d2c6b7b0af37293a9" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>isLeaf</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ae1ac1caa124541ce3f2c650f9fc93918" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>isNodeAncestor</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a0dedb096d61e25bd1880e62ce55b2d1c" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>isNodeChild</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ad3d833d7d9b300b2957733a8ea3c55ba" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>isNodeDescendant</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1add0599ffe7241826de84b869acd2522a" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>isNodeRelated</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a156969f00dbcbe831d02cb28236b4e93" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>isNodeSibling</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a95a5ea0dd8b56c9bcc2a0ae728ac4f65" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>isRoot</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a9e1427e32d6d200e1f02f9dff936cbc4" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>iterator</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ac5a18739caa01565f19cc2ecb29faa6a" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>iterator_category</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1abb71e9e91493d619c5d694c509201ffa" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>lengthsUpToDate</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a98c3c791cb4c1cb5fefe377c895d1da8" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>longData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ab315c15b1c10617a2f9351320dadfc4c" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>needSwap</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a5ff899f399d825ee358ddcc9d65a354b" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>numberDataItems</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a5119bb2d63f0b797eae9b8fdd9762664" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>operator=</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a8e83d158f39983480fbb1e1a4e1e659b" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>operator=</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ad8aebbe861a56dfa3904009f265d45ca" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>parent</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a6c36c12ffe61cb8ebe8c5bf402f3087b" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>pointer</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a3ce65765b35750510c627385d60e8467" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>rawBytes</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a3189b9ed0ee2381128a0eaf4b0143571" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>reference</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a3961ab65e777588a2215103779819d66" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>remove</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a55c78ec59a4f5ba5004a425891b39fc4" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>remove</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1aa7c077d1f2b7a835a2dbff7da6246970" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>removeAllChildren</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a1befb9979d5e205e6aa921627ffafabb" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>removeFromParent</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a779f6d11b2adf7ea78bd649afccc182a" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>setAllHeaderLengths</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a098f7f23b0646a750a59181ff232838e" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>setAllowsChildren</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a7d44ced2b37f73f90022b9aee6e4c24f" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>setByteOrder</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1acad98d2d54e73731091c23f521488874" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>setLengthsUpToDate</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a41bd6cd1bcbcc44bde3c0f9dcb2c7c17" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>setParent</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a61499e60b45774c6f2eb93cebdf25634" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>setRawBytes</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a9522305de1646e358ef455c6d5449b78" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>setRawBytes</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a37df56b8f81fc97692385bab31460527" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>shortData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a71b2e0d148b268113eb6214bd50a0643" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>size_type</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a46671840c4a09bd8854917d39ef9220a" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>stringEnd</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ad1e9d48dc5380e47df3e0080f2ab7955" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>stringList</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1adc7c9d3969d7e561016ba76dded03058" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>stringsToRawBytes</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a5f336d2ae655e9666cf361e43e665268" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>stringsToRawBytes</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a681fe5581a4e8e4b1b13d607085835a4" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>stringsToRawSize</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1af557b993fb782635edfc7e4fb587f699" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>stringToRawSize</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a7f33ccd6c19c44b142215c835c0aa192" prot="public" virt="virtual"><scope>evio::EvioTagSegment</scope><name>toString</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a441099dff9fd748e9438b7f551ac36aa" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>transform</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a7fe9f85e6b1c612098111c6b95481b84" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>treeToString</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1aa787d317915a5b6bb5e008e06522bd1b" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>ucharData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ab4506507f62a2207e5ed1c2f64a58e68" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>uintData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a6aa9f6fb780d77877214ce03be40002b" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>ulongData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a627d070cacdcdf245689e6d950e0f629" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>unpackRawBytesToStrings</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1afc0a6e74a1642c31a7df18af2aa75606" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>unpackRawBytesToStrings</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ac570b2681253df3aa179b4f3f45b8e50" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>unpackRawBytesToStrings</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ab9fcd82a0c4662790934a83fedb59cf5" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>unpackRawBytesToStrings</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a3d44cd7066b5008e10a16dc915cfcfd8" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>unpackRawBytesToStrings</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a5fe3a48fb1f8898bdd13d08ea689ea41" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>updateCharData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a84c0b49e9886b62dae99c8b32bec410a" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>updateCompositeData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a89685661be04c90b3059e318f498531a" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>updateDoubleData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a39c24b766b220d1cda0e48a37f9b4881" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>updateFloatData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a0264daf6e038c485628e364992c05e0e" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>updateIntData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a3b3dde0d329569255caa66a4f66d177f" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>updateLongData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a408dedd1788bfcae0104b3455da671cc" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>updateShortData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a4730e93ed7f947b82f022da6a417f611" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>updateStringData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a896a4fdf01edece007470588d1835058" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>updateUCharData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a0c3cfcf8e19805e392d092c8c7b9602c" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>updateUIntData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a1add8a09e87d9605a6da5deff79808e4" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>updateULongData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1af3021857b10c869f6ade49085cc392c2" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>updateUShortData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1ad78217635d3b770cefb9fba496f0b09d" prot="protected" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>ushortData</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a33937f6e7034fccea57626062e7f34eb" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>value_type</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a25dfdca6a73381878becf7f87c4bc85e" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>visitAllStructures</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1abbbded337a8b13bbab1159d89e8d9743" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>visitAllStructures</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a216a3d4858d6280df0f42d397b2759dc" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>write</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a165601aa2afb10063c6725a54b80f7b5" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>write</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1a42b0810ce1c98aa6d9916475de98ec82" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>writeQuick</name></member>
      <member refid="d9/ddd/classevio_1_1_base_structure_1abe16136d78101e6a704f717b9d0426af" prot="public" virt="non-virtual"><scope>evio::EvioTagSegment</scope><name>writeQuick</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
