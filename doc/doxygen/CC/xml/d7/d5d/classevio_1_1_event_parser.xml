<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="d7/d5d/classevio_1_1_event_parser" kind="class" language="C++" prot="public">
    <compoundname>evio::EventParser</compoundname>
    <includes local="no">EventParser.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d7/d5d/classevio_1_1_event_parser_1ad315da60104407e4afafd297c5949c6b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d9/d71/classevio_1_1_i_evio_listener" kindref="compound">IEvioListener</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;IEvioListener&gt; &gt; evio::EventParser::evioListenerList</definition>
        <argsstring></argsstring>
        <name>evioListenerList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="59" column="21" bodyfile="src/libsrc/EventParser.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d5d/classevio_1_1_event_parser_1a1f4bbdf51003375fa99612e215249de5" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="dc/d78/classevio_1_1_i_evio_filter" kindref="compound">IEvioFilter</ref> &gt;</type>
        <definition>std::shared_ptr&lt;IEvioFilter&gt; evio::EventParser::evioFilter</definition>
        <argsstring></argsstring>
        <name>evioFilter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="60" column="25" bodyfile="src/libsrc/EventParser.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d7/d5d/classevio_1_1_event_parser_1a020d1c4bf00e6e945a88fb4d0ffcf7da" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool evio::EventParser::notificationActive</definition>
        <argsstring></argsstring>
        <name>notificationActive</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="66" column="14" bodyfile="src/libsrc/EventParser.h" bodystart="66" bodyend="-1"/>
        <referencedby refid="d7/d5d/classevio_1_1_event_parser_1a2ca57fd09594290998558bb995b8ceb0" compoundref="de/d4a/_event_parser_8cpp" startline="425" endline="425">isNotificationActive</referencedby>
        <referencedby refid="d7/d5d/classevio_1_1_event_parser_1a865d6fc67d9ed9ec95c6a06b0d4e4c89" compoundref="de/d4a/_event_parser_8cpp" startline="315" endline="338">notifyEvioListeners</referencedby>
        <referencedby refid="d7/d5d/classevio_1_1_event_parser_1aee6fdf574f52f40faabd5504e1fd564c" compoundref="de/d4a/_event_parser_8cpp" startline="345" endline="360">notifyStart</referencedby>
        <referencedby refid="d7/d5d/classevio_1_1_event_parser_1a946fee7e09726cbfa0bf0094eed04579" compoundref="de/d4a/_event_parser_8cpp" startline="367" endline="382">notifyStop</referencedby>
        <referencedby refid="d7/d5d/classevio_1_1_event_parser_1aa563397e1a05ffc3e96821697aa49547" compoundref="de/d4a/_event_parser_8cpp" startline="435" endline="435">setNotificationActive</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d7/d5d/classevio_1_1_event_parser_1a6f7541475954dc182c6a76e553022456" prot="protected" static="no" mutable="no">
        <type>std::recursive_mutex</type>
        <definition>std::recursive_mutex evio::EventParser::mtx</definition>
        <argsstring></argsstring>
        <name>mtx</name>
        <briefdescription>
<para>Mutex for thread safety. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="68" column="30" bodyfile="src/libsrc/EventParser.h" bodystart="68" bodyend="-1"/>
        <referencedby refid="d7/d5d/classevio_1_1_event_parser_1a411f1cffe76bc747032b670b92685a4a" compoundref="de/d4a/_event_parser_8cpp" startline="134" endline="158">parseEvent</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1aa8681dc82dd6eb0831fa4d4448ec2806" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::parseStructure</definition>
        <argsstring>(std::shared_ptr&lt; EvioEvent &gt; evioEvent, std::shared_ptr&lt; BaseStructure &gt; structure)</argsstring>
        <name>parseStructure</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d4/d12/classevio_1_1_evio_event" kindref="compound">EvioEvent</ref> &gt;</type>
          <declname>evioEvent</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Parse a structure. </para>
        </briefdescription>
        <detaileddescription>
<para>If it is a structure of structures, such as a bank of banks or a segment of tag segments, parse recursively. Listeners are notified AFTER all their children have been handled, not before. Thus the LAST structure that will send notification is the outermost bank<ndash/>the event bank itself.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evioEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>the parent event being processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>the structure being processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if data not in evio format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="62" column="14" bodyfile="src/libsrc/EventParser.cpp" bodystart="210" bodyend="305"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1a09b0b1c53d32dee4746fa94981d3f6af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::eventParse</definition>
        <argsstring>(std::shared_ptr&lt; EvioEvent &gt; &amp;evioEvent)</argsstring>
        <name>eventParse</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d4/d12/classevio_1_1_evio_event" kindref="compound">EvioEvent</ref> &gt; &amp;</type>
          <declname>evioEvent</declname>
        </param>
        <briefdescription>
<para>Method for parsing the event which will drill down and uncover all structures. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evioEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>the event to parse. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="72" column="21" bodyfile="src/libsrc/EventParser.cpp" bodystart="21" bodyend="25"/>
        <referencedby refid="df/dbd/classevio_1_1_evio_reader_1aa77d791d33bd4f45cae293faf6b7bd65" compoundref="dc/d9c/_evio_reader_8cpp" startline="248" endline="252">evio::EvioReader::parseEvent</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1ac371287993fc7da2f1c8081affe6727f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::vistAllStructures</definition>
        <argsstring>(std::shared_ptr&lt; BaseStructure &gt; const &amp;structure, std::shared_ptr&lt; IEvioListener &gt; const &amp;listener)</argsstring>
        <name>vistAllStructures</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; const &amp;</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/d71/classevio_1_1_i_evio_listener" kindref="compound">IEvioListener</ref> &gt; const &amp;</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Visit all the structures in the given structure (including the structure itself <ndash/> which is considered its own descendant). </para>
        </briefdescription>
        <detaileddescription>
<para>This is similar to listening to the event as it is being parsed, but is done to a complete (already) parsed event.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>the structure to start scanning. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>an listener to notify as each structure is visited. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="106" column="21" bodyfile="src/libsrc/EventParser.cpp" bodystart="464" bodyend="467"/>
        <referencedby refid="d7/d5d/classevio_1_1_event_parser_1a3781c3b665cd382f065f63e07297c3ea" compoundref="de/d4a/_event_parser_8cpp" startline="531" endline="555">getMatchingStructures</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1a477769fbf73e5c83e4607e308b36daad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::vistAllStructures</definition>
        <argsstring>(std::shared_ptr&lt; BaseStructure &gt; const &amp;structure, std::shared_ptr&lt; IEvioListener &gt; const &amp;listener, std::shared_ptr&lt; IEvioFilter &gt; const &amp;filter)</argsstring>
        <name>vistAllStructures</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; const &amp;</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/d71/classevio_1_1_i_evio_listener" kindref="compound">IEvioListener</ref> &gt; const &amp;</type>
          <declname>listener</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d78/classevio_1_1_i_evio_filter" kindref="compound">IEvioFilter</ref> &gt; const &amp;</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
<para>Visit all the structures in the given structure (including the structure itself <ndash/> which is considered its own descendant) in a depth first manner. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>the structure to start scanning. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>an listener to notify as each structure is visited. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional filter that must &quot;accept&quot; structures before they are passed to the listener. If <computeroutput>null</computeroutput>, all structures are passed. In this way, specific types of structures can be captured. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="108" column="21" bodyfile="src/libsrc/EventParser.cpp" bodystart="481" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1a3781c3b665cd382f065f63e07297c3ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::getMatchingStructures</definition>
        <argsstring>(std::shared_ptr&lt; BaseStructure &gt; const &amp;structure, std::shared_ptr&lt; IEvioFilter &gt; const &amp;filter, std::vector&lt; std::shared_ptr&lt; BaseStructure &gt;&gt; &amp;structs)</argsstring>
        <name>getMatchingStructures</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; const &amp;</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d78/classevio_1_1_i_evio_filter" kindref="compound">IEvioFilter</ref> &gt; const &amp;</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;&gt; &amp;</type>
          <declname>structs</declname>
        </param>
        <briefdescription>
<para>Visit all the descendant structures, and collect those that pass a filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>the structure to start scanning. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>the filter that must be passed. If <computeroutput>nullptr</computeroutput>, this will return all the structures. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structs</parametername>
</parameternamelist>
<parameterdescription>
<para>vector to be filled with all structures that are accepted by filter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="111" column="21" bodyfile="src/libsrc/EventParser.cpp" bodystart="531" bodyend="555"/>
        <references refid="d7/d5d/classevio_1_1_event_parser_1ac371287993fc7da2f1c8081affe6727f" compoundref="de/d4a/_event_parser_8cpp" startline="464" endline="467">vistAllStructures</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1a411f1cffe76bc747032b670b92685a4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::parseEvent</definition>
        <argsstring>(std::shared_ptr&lt; EvioEvent &gt; &amp;evioEvent)</argsstring>
        <name>parseEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d4/d12/classevio_1_1_evio_event" kindref="compound">EvioEvent</ref> &gt; &amp;</type>
          <declname>evioEvent</declname>
        </param>
        <briefdescription>
<para>This is the workhorse method for parsing the event. </para>
        </briefdescription>
        <detaileddescription>
<para>It will drill down and uncover all structures (banks, segments, and tagsegments) and notify any interested listeners in a SAX-Like manner.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evioEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>the event to parse. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if arg is null or data not in evio format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="74" column="14" bodyfile="src/libsrc/EventParser.cpp" bodystart="134" bodyend="158"/>
        <references refid="d7/d5d/classevio_1_1_event_parser_1a6f7541475954dc182c6a76e553022456" compoundref="d0/dd5/_event_parser_8h" startline="68">mtx</references>
        <references refid="d7/d5d/classevio_1_1_event_parser_1aee6fdf574f52f40faabd5504e1fd564c" compoundref="de/d4a/_event_parser_8cpp" startline="345" endline="360">notifyStart</references>
        <references refid="d7/d5d/classevio_1_1_event_parser_1a946fee7e09726cbfa0bf0094eed04579" compoundref="de/d4a/_event_parser_8cpp" startline="367" endline="382">notifyStop</references>
        <referencedby refid="d7/d5d/classevio_1_1_event_parser_1a93121796f759452521bf0d2d767fa383" compoundref="de/d4a/_event_parser_8cpp" startline="171" endline="198">parseEvent</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1a93121796f759452521bf0d2d767fa383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::parseEvent</definition>
        <argsstring>(std::shared_ptr&lt; EvioEvent &gt; &amp;evioEvent, bool synced)</argsstring>
        <name>parseEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d4/d12/classevio_1_1_evio_event" kindref="compound">EvioEvent</ref> &gt; &amp;</type>
          <declname>evioEvent</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>synced</declname>
        </param>
        <briefdescription>
<para>This is the workhorse method for parsing the event. </para>
        </briefdescription>
        <detaileddescription>
<para>It will drill down and uncover all structures (banks, segments, and tagsegments) and notify any interested listeners in a SAX-Like manner. <linebreak/>
 Note: applications may choose not to provide a listener. In that case, when the event is parsed, its structures may be accessed through the event&apos;s tree model, i.e., via <computeroutput>event.getTreeModel()</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evioEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>the event to parse. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>synced</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, mutex protect this method. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if arg is null or data not in evio format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="75" column="14" bodyfile="src/libsrc/EventParser.cpp" bodystart="171" bodyend="198"/>
        <references refid="d7/d5d/classevio_1_1_event_parser_1aee6fdf574f52f40faabd5504e1fd564c" compoundref="de/d4a/_event_parser_8cpp" startline="345" endline="360">notifyStart</references>
        <references refid="d7/d5d/classevio_1_1_event_parser_1a946fee7e09726cbfa0bf0094eed04579" compoundref="de/d4a/_event_parser_8cpp" startline="367" endline="382">notifyStop</references>
        <references refid="d7/d5d/classevio_1_1_event_parser_1a411f1cffe76bc747032b670b92685a4a" compoundref="de/d4a/_event_parser_8cpp" startline="134" endline="158">parseEvent</references>
      </memberdef>
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1a28f25dc0fcd69f68dfd03617d84717d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::removeEvioListener</definition>
        <argsstring>(std::shared_ptr&lt; IEvioListener &gt; &amp;listener)</argsstring>
        <name>removeEvioListener</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/d71/classevio_1_1_i_evio_listener" kindref="compound">IEvioListener</ref> &gt; &amp;</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Remove an Evio listener. </para>
        </briefdescription>
        <detaileddescription>
<para>Evio listeners listen for structures encountered when an event is being parsed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>The Evio listener to remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="95" column="14" bodyfile="src/libsrc/EventParser.cpp" bodystart="389" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1a6fe971b74f17ed39f7f7f127b0bb2b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::addEvioListener</definition>
        <argsstring>(std::shared_ptr&lt; IEvioListener &gt; &amp;listener)</argsstring>
        <name>addEvioListener</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/d71/classevio_1_1_i_evio_listener" kindref="compound">IEvioListener</ref> &gt; &amp;</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Add an Evio listener. </para>
        </briefdescription>
        <detaileddescription>
<para>Evio listeners listen for structures encountered when an event is being parsed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>The Evio listener to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="96" column="14" bodyfile="src/libsrc/EventParser.cpp" bodystart="410" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1a2ca57fd09594290998558bb995b8ceb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::EventParser::isNotificationActive</definition>
        <argsstring>() const</argsstring>
        <name>isNotificationActive</name>
        <briefdescription>
<para>Get the flag determining whether notification of listeners is active. </para>
        </briefdescription>
        <detaileddescription>
<para>Normally it is. But in some cases it should be temporarily suspended. For example, in a &quot;goto event&quot; process, the listeners will not be notified of the intervening events as the file is scanned to get to the target event.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if notification of events to the listeners is active. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="98" column="14" bodyfile="src/libsrc/EventParser.cpp" bodystart="425" bodyend="425"/>
        <references refid="d7/d5d/classevio_1_1_event_parser_1a020d1c4bf00e6e945a88fb4d0ffcf7da" compoundref="d0/dd5/_event_parser_8h" startline="66">notificationActive</references>
      </memberdef>
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1aa563397e1a05ffc3e96821697aa49547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::setNotificationActive</definition>
        <argsstring>(bool notificationActive)</argsstring>
        <name>setNotificationActive</name>
        <param>
          <type>bool</type>
          <declname>notificationActive</declname>
          <defname>active</defname>
        </param>
        <briefdescription>
<para>Set the flag determining whether notification of listeners is active. </para>
        </briefdescription>
        <detaileddescription>
<para>Normally it is. But in some cases it should be temporarily suspended. For example, in a &quot;goto event&quot; process, the listeners will not be notified of the intervening events as the file is scanned to get to the target event.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>active</parametername>
</parameternamelist>
<parameterdescription>
<para>set <computeroutput>true</computeroutput> if notification of events to the listeners is active. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="99" column="14" bodyfile="src/libsrc/EventParser.cpp" bodystart="435" bodyend="435"/>
        <references refid="d7/d5d/classevio_1_1_event_parser_1a020d1c4bf00e6e945a88fb4d0ffcf7da" compoundref="d0/dd5/_event_parser_8h" startline="66">notificationActive</references>
      </memberdef>
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1a1b19cb26522c6994046da12af26984e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::setEvioFilter</definition>
        <argsstring>(std::shared_ptr&lt; IEvioFilter &gt; &amp;evioFilter)</argsstring>
        <name>setEvioFilter</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d78/classevio_1_1_i_evio_filter" kindref="compound">IEvioFilter</ref> &gt; &amp;</type>
          <declname>evioFilter</declname>
          <defname>filter</defname>
        </param>
        <briefdescription>
<para>Set the global filter used for filtering structures. </para>
        </briefdescription>
        <detaileddescription>
<para>If set to <computeroutput>null</computeroutput>, the default, then all structures will be sent to the listeners.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>the filter to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dc/d78/classevio_1_1_i_evio_filter" kindref="compound">IEvioFilter</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="100" column="14" bodyfile="src/libsrc/EventParser.cpp" bodystart="445" bodyend="445"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1a060066d17a393baaa5d85b69f094f798" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::parseStruct</definition>
        <argsstring>(std::shared_ptr&lt; BaseStructure &gt; structure)</argsstring>
        <name>parseStruct</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Parse a structure. </para>
        </briefdescription>
        <detaileddescription>
<para>If it is a structure of structures, such as a bank of banks or a segment of tag segments, parse recursively.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>the structure being processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if data not in evio format </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="79" column="21" bodyfile="src/libsrc/EventParser.cpp" bodystart="35" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1a0f590920243580b992764dced200d3f3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::visitAllDescendants</definition>
        <argsstring>(std::shared_ptr&lt; BaseStructure &gt; const &amp;topLevelStruct, std::shared_ptr&lt; BaseStructure &gt; const &amp;structure, std::shared_ptr&lt; IEvioListener &gt; const &amp;listener, std::shared_ptr&lt; IEvioFilter &gt; const &amp;filter)</argsstring>
        <name>visitAllDescendants</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; const &amp;</type>
          <declname>topLevelStruct</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; const &amp;</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/d71/classevio_1_1_i_evio_listener" kindref="compound">IEvioListener</ref> &gt; const &amp;</type>
          <declname>listener</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d78/classevio_1_1_i_evio_filter" kindref="compound">IEvioFilter</ref> &gt; const &amp;</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
<para>Visit all the descendants of a given structure (which is considered a descendant of itself.) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>topLevelStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>the structure starting the scan. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>the structure to start scanning. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>an listener to notify as each structure is visited. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional filter that must &quot;accept&quot; structures before they are passed to the listener. If <computeroutput>nullptr</computeroutput>, all structures are passed. In this way, specific types of structures can be captured. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="116" column="22" bodyfile="src/libsrc/EventParser.cpp" bodystart="500" bodyend="520"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1a865d6fc67d9ed9ec95c6a06b0d4e4c89" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::notifyEvioListeners</definition>
        <argsstring>(std::shared_ptr&lt; EvioEvent &gt; &amp;event, std::shared_ptr&lt; BaseStructure &gt; &amp;structure)</argsstring>
        <name>notifyEvioListeners</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d4/d12/classevio_1_1_evio_event" kindref="compound">EvioEvent</ref> &gt; &amp;</type>
          <declname>event</declname>
          <defname>evioEvent</defname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> &gt; &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>This is when a structure is encountered while parsing an event. </para>
        </briefdescription>
        <detaileddescription>
<para>It notifies all listeners about the structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evioEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>event being parsed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>the structure encountered, which may be a Bank, Segment, or TagSegment. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="88" column="14" bodyfile="src/libsrc/EventParser.cpp" bodystart="315" bodyend="338"/>
        <references refid="d7/d5d/classevio_1_1_event_parser_1a020d1c4bf00e6e945a88fb4d0ffcf7da" compoundref="d0/dd5/_event_parser_8h" startline="66">notificationActive</references>
      </memberdef>
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1aee6fdf574f52f40faabd5504e1fd564c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::notifyStart</definition>
        <argsstring>(std::shared_ptr&lt; EvioEvent &gt; &amp;event)</argsstring>
        <name>notifyStart</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d4/d12/classevio_1_1_evio_event" kindref="compound">EvioEvent</ref> &gt; &amp;</type>
          <declname>event</declname>
          <defname>evioEvent</defname>
        </param>
        <briefdescription>
<para>Notify listeners we are starting to parse a new event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evioEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>the event in question; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="90" column="14" bodyfile="src/libsrc/EventParser.cpp" bodystart="345" bodyend="360"/>
        <references refid="d7/d5d/classevio_1_1_event_parser_1a020d1c4bf00e6e945a88fb4d0ffcf7da" compoundref="d0/dd5/_event_parser_8h" startline="66">notificationActive</references>
        <referencedby refid="d7/d5d/classevio_1_1_event_parser_1a411f1cffe76bc747032b670b92685a4a" compoundref="de/d4a/_event_parser_8cpp" startline="134" endline="158">parseEvent</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/d5d/classevio_1_1_event_parser_1a946fee7e09726cbfa0bf0094eed04579" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::EventParser::notifyStop</definition>
        <argsstring>(std::shared_ptr&lt; EvioEvent &gt; &amp;event)</argsstring>
        <name>notifyStop</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d4/d12/classevio_1_1_evio_event" kindref="compound">EvioEvent</ref> &gt; &amp;</type>
          <declname>event</declname>
          <defname>evioEvent</defname>
        </param>
        <briefdescription>
<para>Notify listeners we are done to parsing a new event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evioEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>the event in question; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/EventParser.h" line="91" column="14" bodyfile="src/libsrc/EventParser.cpp" bodystart="367" bodyend="382"/>
        <references refid="d7/d5d/classevio_1_1_event_parser_1a020d1c4bf00e6e945a88fb4d0ffcf7da" compoundref="d0/dd5/_event_parser_8h" startline="66">notificationActive</references>
        <referencedby refid="d7/d5d/classevio_1_1_event_parser_1a411f1cffe76bc747032b670b92685a4a" compoundref="de/d4a/_event_parser_8cpp" startline="134" endline="158">parseEvent</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Creates an object that controls the parsing of events. </para>
    </briefdescription>
    <detaileddescription>
<para>This object, like the <ref refid="df/dbd/classevio_1_1_evio_reader" kindref="compound">EvioReader</ref> object, has a method for parsing an event. An <ref refid="df/dbd/classevio_1_1_evio_reader" kindref="compound">EvioReader</ref> object will ultimately call this method<ndash/>i.e., the concrete implementation of event parsing is in this class. There is also a static method to do the parsing of an event, but without notifications.</para>
<para>This class is also used to scan already parsed structures in a <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> tree. Originally, in it&apos;s java form, the &quot;visit&quot; methods were part of the <ref refid="d9/ddd/classevio_1_1_base_structure" kindref="compound">BaseStructure</ref> class, but since that results in C++ circular references, it is now in this class and slightly modified to be static.</para>
<para><simplesect kind="author"><para>heddle (original Java file). </para>
</simplesect>
<simplesect kind="author"><para>timmer </para>
</simplesect>
<simplesect kind="date"><para>5/19/2020 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="src/libsrc/EventParser.h" line="55" column="5" bodyfile="src/libsrc/EventParser.h" bodystart="55" bodyend="122"/>
    <listofallmembers>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a6fe971b74f17ed39f7f7f127b0bb2b72" prot="public" virt="non-virtual"><scope>evio::EventParser</scope><name>addEvioListener</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a09b0b1c53d32dee4746fa94981d3f6af" prot="public" virt="non-virtual"><scope>evio::EventParser</scope><name>eventParse</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a1f4bbdf51003375fa99612e215249de5" prot="private" virt="non-virtual"><scope>evio::EventParser</scope><name>evioFilter</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1ad315da60104407e4afafd297c5949c6b" prot="private" virt="non-virtual"><scope>evio::EventParser</scope><name>evioListenerList</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a3781c3b665cd382f065f63e07297c3ea" prot="public" virt="non-virtual"><scope>evio::EventParser</scope><name>getMatchingStructures</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a2ca57fd09594290998558bb995b8ceb0" prot="public" virt="non-virtual"><scope>evio::EventParser</scope><name>isNotificationActive</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a6f7541475954dc182c6a76e553022456" prot="protected" virt="non-virtual"><scope>evio::EventParser</scope><name>mtx</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a020d1c4bf00e6e945a88fb4d0ffcf7da" prot="protected" virt="non-virtual"><scope>evio::EventParser</scope><name>notificationActive</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a865d6fc67d9ed9ec95c6a06b0d4e4c89" prot="protected" virt="non-virtual"><scope>evio::EventParser</scope><name>notifyEvioListeners</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1aee6fdf574f52f40faabd5504e1fd564c" prot="protected" virt="non-virtual"><scope>evio::EventParser</scope><name>notifyStart</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a946fee7e09726cbfa0bf0094eed04579" prot="protected" virt="non-virtual"><scope>evio::EventParser</scope><name>notifyStop</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a411f1cffe76bc747032b670b92685a4a" prot="public" virt="non-virtual"><scope>evio::EventParser</scope><name>parseEvent</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a93121796f759452521bf0d2d767fa383" prot="public" virt="non-virtual"><scope>evio::EventParser</scope><name>parseEvent</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a060066d17a393baaa5d85b69f094f798" prot="private" virt="non-virtual"><scope>evio::EventParser</scope><name>parseStruct</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1aa8681dc82dd6eb0831fa4d4448ec2806" prot="private" virt="non-virtual"><scope>evio::EventParser</scope><name>parseStructure</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a28f25dc0fcd69f68dfd03617d84717d5" prot="public" virt="non-virtual"><scope>evio::EventParser</scope><name>removeEvioListener</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a1b19cb26522c6994046da12af26984e2" prot="public" virt="non-virtual"><scope>evio::EventParser</scope><name>setEvioFilter</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1aa563397e1a05ffc3e96821697aa49547" prot="public" virt="non-virtual"><scope>evio::EventParser</scope><name>setNotificationActive</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a0f590920243580b992764dced200d3f3" prot="private" virt="non-virtual"><scope>evio::EventParser</scope><name>visitAllDescendants</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1ac371287993fc7da2f1c8081affe6727f" prot="public" virt="non-virtual"><scope>evio::EventParser</scope><name>vistAllStructures</name></member>
      <member refid="d7/d5d/classevio_1_1_event_parser_1a477769fbf73e5c83e4607e308b36daad" prot="public" virt="non-virtual"><scope>evio::EventParser</scope><name>vistAllStructures</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
