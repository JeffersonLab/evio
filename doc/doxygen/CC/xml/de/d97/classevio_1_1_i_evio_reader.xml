<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="de/d97/classevio_1_1_i_evio_reader" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>evio::IEvioReader</compoundname>
    <derivedcompoundref refid="df/dbd/classevio_1_1_evio_reader" prot="public" virt="non-virtual">evio::EvioReader</derivedcompoundref>
    <derivedcompoundref refid="dd/db3/classevio_1_1_evio_reader_v4" prot="public" virt="non-virtual">evio::EvioReaderV4</derivedcompoundref>
    <derivedcompoundref refid="db/d34/classevio_1_1_evio_reader_v6" prot="public" virt="non-virtual">evio::EvioReaderV6</derivedcompoundref>
    <includes local="no">IEvioReader.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="de/d97/classevio_1_1_i_evio_reader_1aeb9b24a83d7fc38eacf3f6b3b329f926" prot="public" static="no" strong="no">
        <type></type>
        <name>ReadWriteStatus</name>
        <enumvalue id="de/d97/classevio_1_1_i_evio_reader_1aeb9b24a83d7fc38eacf3f6b3b329f926ab14e3269cc4f96bf7a442d278fc51009" prot="public">
          <name>SUCCESS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d97/classevio_1_1_i_evio_reader_1aeb9b24a83d7fc38eacf3f6b3b329f926a6413574a07e897b7be4800fa6921e2e7" prot="public">
          <name>END_OF_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d97/classevio_1_1_i_evio_reader_1aeb9b24a83d7fc38eacf3f6b3b329f926ae0ddb8ce05a096046ff47cf917969b50" prot="public">
          <name>CANNOT_OPEN_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d97/classevio_1_1_i_evio_reader_1aeb9b24a83d7fc38eacf3f6b3b329f926ae3b4a070ccd53865afcc4bc2ad91ed47" prot="public">
          <name>EVIO_EXCEPTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d97/classevio_1_1_i_evio_reader_1aeb9b24a83d7fc38eacf3f6b3b329f926a0c4ce2651b53b53a2e628c80bf3db456" prot="public">
          <name>UNKNOWN_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>This <computeroutput>enum</computeroutput> denotes the status of a read/write. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Used internally.</bold><linebreak/>
 SUCCESS indicates a successful read. <linebreak/>
 END_OF_FILE indicates that we cannot read because an END_OF_FILE has occurred. Technically this means that whatever we are trying to read is larger than the buffer&apos;s unread bytes.<linebreak/>
 CANNOT_OPEN_FILE indicates that we cannot write because the destination file cannot be opened.<linebreak/>
 EVIO_EXCEPTION indicates that an <ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref> was thrown during a read/write, possibly due to out of range values.<linebreak/>
 UNKNOWN_ERROR indicates that an unrecoverable error has occurred. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="54" column="9" bodyfile="src/libsrc/IEvioReader.h" bodystart="54" bodyend="56"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a1018ab2d476c0638970ef40a7fb5e45f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void evio::IEvioReader::setBuffer</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buf)=0</argsstring>
        <name>setBuffer</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1afed8ca62161373d9429747cd44f923ad">setBuffer</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1ad8e9531e9f836cec9980ba88296f8ea6">setBuffer</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a13853d38519b5102badb3cad658c8c71">setBuffer</reimplementedby>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>This method can be used to avoid creating additional <ref refid="df/dbd/classevio_1_1_evio_reader" kindref="compound">EvioReader</ref> objects by reusing this one with another buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The method <ref refid="de/d97/classevio_1_1_i_evio_reader_1abfcc831176f6b4b0c402838b2fa09e6f" kindref="member">close()</ref> is called before anything else.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> to be read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>underflow_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if not enough data in buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if buf is null; buf not in proper format; if first record/block number != 1 when checkRecNumSeq arg is true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="68" column="22"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1ab5bad722797b96b9b756d739b9aa803f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool evio::IEvioReader::isClosed</definition>
        <argsstring>()=0</argsstring>
        <name>isClosed</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1a1040f82394974dc379561ed43492f1c9">isClosed</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a697baee61837fc5a935083d1b45a2e1b">isClosed</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a471909dbd405cec356a4bea1bb3b36f2">isClosed</reimplementedby>
        <briefdescription>
<para>Has <ref refid="de/d97/classevio_1_1_i_evio_reader_1abfcc831176f6b4b0c402838b2fa09e6f" kindref="member">close()</ref> been called (without reopening by calling <ref refid="de/d97/classevio_1_1_i_evio_reader_1a1018ab2d476c0638970ef40a7fb5e45f" kindref="member">setBuffer(std::shared_ptr&lt;ByteBuffer&gt; &amp;)</ref>)? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><programlisting><codeline><highlight class="normal">true<sp/></highlight></codeline>
</programlisting> if this object closed, else<programlisting><codeline><highlight class="normal">false<sp/></highlight></codeline>
</programlisting> . </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="76" column="22"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a522697d2985c7cb42938b241e476cdb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool evio::IEvioReader::checkBlockNumberSequence</definition>
        <argsstring>()=0</argsstring>
        <name>checkBlockNumberSequence</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1ab2b6da60aeff21ffb8f3756da3bb4e42">checkBlockNumberSequence</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a063a318617679c6456802a2f5a840915">checkBlockNumberSequence</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a26944f53034f327241e14b4df19b2f43">checkBlockNumberSequence</reimplementedby>
        <briefdescription>
<para>Is this reader checking the block number sequence and throwing an exception if it&apos;s not sequential and starting with 1? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if checking block number sequence, else <computeroutput>false</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="83" column="22"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a29d8c718deecc5698b2af791ac95cf0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
        <definition>virtual ByteOrder&amp; evio::IEvioReader::getByteOrder</definition>
        <argsstring>()=0</argsstring>
        <name>getByteOrder</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1a839f1ff4e804008d700375059353c37c">getByteOrder</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1aa19337f49c0132536d8d775469c56bac">getByteOrder</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a3beacdbd50e5935e1695e19fcb4c0a5b">getByteOrder</reimplementedby>
        <briefdescription>
<para>Get the byte order of the file/buffer being read. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>byte order of the file/buffer being read. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="89" column="28"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1ade702470274a154209f94c8eb8de046e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>uint32_t</type>
        <definition>virtual uint32_t evio::IEvioReader::getEvioVersion</definition>
        <argsstring>()=0</argsstring>
        <name>getEvioVersion</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1ae69f51f32f0aff7949a85b58edf478ab">getEvioVersion</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1ac3a67d0b1fde4b8ebbbceda5fb301dff">getEvioVersion</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1ac67d8020198420b4dd68b8415dd14804">getEvioVersion</reimplementedby>
        <briefdescription>
<para>Get the evio version number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>evio version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="95" column="26"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a5dd302d0d8651ebe45ed81d66f1eea96" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string evio::IEvioReader::getPath</definition>
        <argsstring>()=0</argsstring>
        <name>getPath</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1a1ea744a04271cd8ab73c5a9bfd2a7937">getPath</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1ad809ffeda3b80606b4f2a76469a05f1d">getPath</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a5c8e87776827eba3f01c3775b8abf513">getPath</reimplementedby>
        <briefdescription>
<para>Get the path to the file. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>path to the file </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="101" column="29"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1ad26dab3458bf03003a0cbbe84fefa567" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="d7/d5d/classevio_1_1_event_parser" kindref="compound">EventParser</ref> &gt; &amp;</type>
        <definition>virtual std::shared_ptr&lt;EventParser&gt;&amp; evio::IEvioReader::getParser</definition>
        <argsstring>()=0</argsstring>
        <name>getParser</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1aabdb4f66fe0e0abed96f77b3c7aa4076">getParser</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a5611fcde6de0d545e86ebe9f5de5c4a2">getParser</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1ac068f1de629e738f0d686e8777574eec">getParser</reimplementedby>
        <briefdescription>
<para>Get the file/buffer parser. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>file/buffer parser. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="107" column="34"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a906861412ddde5f377d529e2ce691a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void evio::IEvioReader::setParser</definition>
        <argsstring>(std::shared_ptr&lt; EventParser &gt; &amp;evParser)=0</argsstring>
        <name>setParser</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1a29afb006cfc6bbca0e92ca85a8cd2724">setParser</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a8855a45490b79bc50eb97ea4985c6efe">setParser</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a34efaca93fa612cb0d81e55d5a77b34c">setParser</reimplementedby>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d7/d5d/classevio_1_1_event_parser" kindref="compound">EventParser</ref> &gt; &amp;</type>
          <declname>evParser</declname>
        </param>
        <briefdescription>
<para>Set the file/buffer parser. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evParser</parametername>
</parameternamelist>
<parameterdescription>
<para>file/buffer parser. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="113" column="22"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1ac23b043c8fc151f4d0dfc1a61ed481cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string evio::IEvioReader::getDictionaryXML</definition>
        <argsstring>()=0</argsstring>
        <name>getDictionaryXML</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1af5475cf7c836eddc90167fb13bd9c4c4">getDictionaryXML</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a1de85bc20f69676951af001a294d0ea8">getDictionaryXML</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a7e517701870bbcf0e6b886f22fe9fbfe">getDictionaryXML</reimplementedby>
        <briefdescription>
<para>Get the XML format dictionary if there is one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>XML format dictionary, else null. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="119" column="29"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a3b8d52dbf2b63734bb6b9844cc7f09a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool evio::IEvioReader::hasDictionaryXML</definition>
        <argsstring>()=0</argsstring>
        <name>hasDictionaryXML</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1a154cbf270dd4e877a87d7bc159055f80">hasDictionaryXML</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a6aa4b9ec29f2198c25d96fb1f1889c28">hasDictionaryXML</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a4c46ba4f3f5dff3924c04dfedbeca3a3">hasDictionaryXML</reimplementedby>
        <briefdescription>
<para>Does this evio file have an associated XML dictionary? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if this evio file has an associated XML dictionary, else <computeroutput>false</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="126" column="22"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1aa5b24915b5fa9c647784866088116120" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d12/classevio_1_1_evio_event" kindref="compound">EvioEvent</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;EvioEvent&gt; evio::IEvioReader::getFirstEvent</definition>
        <argsstring>()=0</argsstring>
        <name>getFirstEvent</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1af7c31b6e809f3bcedb96a511da2f1349">getFirstEvent</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1ab95ca3bc461086c3a998d269a322f167">getFirstEvent</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a5916130d7a0dfea4547f6402ce424afb">getFirstEvent</reimplementedby>
        <briefdescription>
<para>Get the &quot;first&quot; event if there is one. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s also called the Beginning-Of-Run event. This event is defined once but included in each of the related split files written out. <simplesect kind="return"><para>the first event is it existed, else null. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="134" column="33"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a8aa2bdd85a0b9dc864dd2c7a1ed084b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool evio::IEvioReader::hasFirstEvent</definition>
        <argsstring>()=0</argsstring>
        <name>hasFirstEvent</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1ad5d8fff816a6624cdf519cd83771c237">hasFirstEvent</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a24fac9c348dce02aebde184ab8a51792">hasFirstEvent</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1ab163e58b98cabde2c12c318e4dc86f8e">hasFirstEvent</reimplementedby>
        <briefdescription>
<para>Does this evio file have an associated first event? It&apos;s also called the Beginning-Of-Run event. </para>
        </briefdescription>
        <detaileddescription>
<para>This event is defined once but included in each of the related split files written out. <simplesect kind="return"><para><computeroutput>true</computeroutput> if this evio file has an associated first event, else <computeroutput>false</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="143" column="22"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a4eeea1ddbfbe0d76e4669c440cf1e5b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t evio::IEvioReader::getNumEventsRemaining</definition>
        <argsstring>()=0</argsstring>
        <name>getNumEventsRemaining</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1ac131179b4f5f81a5f9ec1488a1e496ef">getNumEventsRemaining</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a4423942f5b5ffe914c6cd9523016d616">getNumEventsRemaining</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1ad13eda1a9231bdd99cc60233a2e6ce71">getNumEventsRemaining</reimplementedby>
        <briefdescription>
<para>Get the number of events remaining in the file. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful only if doing a sequential read.</para>
<para><simplesect kind="return"><para>number of events remaining in the file </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if failed reading from file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="152" column="24"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1ad438c3d38ceca2c36bd6be31eb91b4f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;ByteBuffer&gt; evio::IEvioReader::getByteBuffer</definition>
        <argsstring>()=0</argsstring>
        <name>getByteBuffer</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1a39ccda4e159bd5822362571fa95aa0e1">getByteBuffer</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1abcab0d75e41dc94b7dfd6f8dc9625c17">getByteBuffer</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1ae027d6c123378d535ae7e5beb61876a1">getByteBuffer</reimplementedby>
        <briefdescription>
<para>Get the byte buffer being read. </para>
        </briefdescription>
        <detaileddescription>
<para>Not useful when reading files. <simplesect kind="return"><para>the byte buffer being read (in certain cases). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="158" column="33"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1adc2e2fcc2aceea85771325bac4f3c397" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t evio::IEvioReader::fileSize</definition>
        <argsstring>()=0</argsstring>
        <name>fileSize</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1a09e6555e73ed52bc79e030f26872fe4b">fileSize</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a316eddece193b0cde1a55265d37b8e10">fileSize</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a8bb2d528d1221776a24d4927c1e2bf6f">fileSize</reimplementedby>
        <briefdescription>
<para>Get the size of the file being read, in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the file size in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="164" column="24"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a0d13f3328420b54c37766141d3c8b688" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="d5/d6e/classevio_1_1_i_block_header" kindref="compound">IBlockHeader</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;IBlockHeader&gt; evio::IEvioReader::getFirstBlockHeader</definition>
        <argsstring>()=0</argsstring>
        <name>getFirstBlockHeader</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1aded1f68d418ccb54f353643a62c14faf">getFirstBlockHeader</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1ac1437a584908549758a269487373d0b4">getFirstBlockHeader</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a0ef09cf82837e02326e88ee6d1f5834f">getFirstBlockHeader</reimplementedby>
        <briefdescription>
<para>This returns the FIRST block (record) header. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the first block (record) header. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="170" column="33"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a848dc77538de2be992d106c590180df4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d12/classevio_1_1_evio_event" kindref="compound">EvioEvent</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;EvioEvent&gt; evio::IEvioReader::getEvent</definition>
        <argsstring>(size_t index)=0</argsstring>
        <name>getEvent</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1a1440ceb92510aae8ef149ca60e2522ef">getEvent</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a66f9780670a7493fe61ecd9bd478e070">getEvent</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1acf8a3adfa981f8e7be73b433ad255698">getEvent</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the event in the file/buffer at a given index (starting at 1). </para>
        </briefdescription>
        <detaileddescription>
<para>As useful as this sounds, most applications will probably call <ref refid="de/d97/classevio_1_1_i_evio_reader_1abff17b5f200e64826bffce2a60f3ae66" kindref="member">parseNextEvent()</ref> or <ref refid="de/d97/classevio_1_1_i_evio_reader_1abcd2be8738fe4162409a7d2e883b672b" kindref="member">parseEvent(size_t)</ref> instead, since it combines combines getting an event with parsing it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>number of event desired, starting at 1, from beginning of file/buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the event in the file/buffer at the given index or null if none </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if failed file access; if failed read due to bad file/buffer format; if index out of bounds; if object closed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="185" column="33"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1abcd2be8738fe4162409a7d2e883b672b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d12/classevio_1_1_evio_event" kindref="compound">EvioEvent</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;EvioEvent&gt; evio::IEvioReader::parseEvent</definition>
        <argsstring>(size_t index)=0</argsstring>
        <name>parseEvent</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1a2db8e9e8675cb61ef96aaf454d5cbc82">parseEvent</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a605bc27fbfa468057669a5a157478f78">parseEvent</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1aaf8c11a65e01892f8859999c5287ee72">parseEvent</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>This is a workhorse method. </para>
        </briefdescription>
        <detaileddescription>
<para>It retrieves the desired event from the file/buffer, and then parses it SAX-like. It will drill down and uncover all structures (banks, segments, and tagsegments) and notify any interested listeners.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>number of event desired, starting at 1, from beginning of file/buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the parsed event at the given index or null if none </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if failed file access; if failed read due to bad file/buffer format; if index out of bounds; if object closed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="199" column="33"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a67dd00a6ade28faedc3876240f35edeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d12/classevio_1_1_evio_event" kindref="compound">EvioEvent</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;EvioEvent&gt; evio::IEvioReader::nextEvent</definition>
        <argsstring>()=0</argsstring>
        <name>nextEvent</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1a6d427b496cd39b2ac247a0924cabaa12">nextEvent</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a46655f6197c4f00a3a8a7dc38f15f162">nextEvent</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a5ae6c91129665287e7b784783e52f818">nextEvent</reimplementedby>
        <briefdescription>
<para>Get the next event in the file/buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>As useful as this sounds, most applications will probably call <ref refid="de/d97/classevio_1_1_i_evio_reader_1abff17b5f200e64826bffce2a60f3ae66" kindref="member">parseNextEvent()</ref> instead, since it combines getting the next event with parsing the next event.</para>
<para>Although this method can get events in versions 4+, it now delegates that to another method. No changes were made to this method from versions 1-3 in order to read the version 4 format as it is subset of versions 1-3 with variable block length.</para>
<para><simplesect kind="return"><para>the next event in the file. On error it throws an <ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref>. On end of file, it returns <computeroutput>null</computeroutput>. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if failed file access; if failed read due to bad buffer format; if object closed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="218" column="33"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1abff17b5f200e64826bffce2a60f3ae66" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d12/classevio_1_1_evio_event" kindref="compound">EvioEvent</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;EvioEvent&gt; evio::IEvioReader::parseNextEvent</definition>
        <argsstring>()=0</argsstring>
        <name>parseNextEvent</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1ab05dbae2179ab093e95ba3bb610f9af8">parseNextEvent</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1afb69bdb4a8d522a4605a41505720633a">parseNextEvent</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a8255847c5868e7f2a2f92d021c6aa5d5">parseNextEvent</reimplementedby>
        <briefdescription>
<para>This is a workhorse method. </para>
        </briefdescription>
        <detaileddescription>
<para>It retrieves the next event from the file/buffer, and then parses it SAX-like. It will drill down and uncover all structures (banks, segments, and tagsegments) and notify any interested listeners.</para>
<para><simplesect kind="return"><para>the event that was parsed. On error it throws an <ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref>. On end of file, it returns <computeroutput>null</computeroutput>. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if failed file access; if read failure or bad format; if object closed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="232" column="33"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1ad5ad0599b4726846b3e34db9b036db99" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void evio::IEvioReader::parseEvent</definition>
        <argsstring>(std::shared_ptr&lt; EvioEvent &gt; evioEvent)=0</argsstring>
        <name>parseEvent</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1ae414a83b0a652f08178ecd5b59843154">parseEvent</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1ad64cac6bd49f60a3ad8ff0e621b5e391">parseEvent</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1ac1cecee8635b72cf9a2416777aa5bb4c">parseEvent</reimplementedby>
        <param>
          <type>std::shared_ptr&lt; <ref refid="d4/d12/classevio_1_1_evio_event" kindref="compound">EvioEvent</ref> &gt;</type>
          <declname>evioEvent</declname>
        </param>
        <briefdescription>
<para>This will parse an event, SAX-like. </para>
        </briefdescription>
        <detaileddescription>
<para>It will drill down and uncover all structures (banks, segments, and tagsegments) and notify any interested listeners.</para>
<para>As useful as this sounds, most applications will probably call <ref refid="de/d97/classevio_1_1_i_evio_reader_1abff17b5f200e64826bffce2a60f3ae66" kindref="member">parseNextEvent()</ref> instead, since it combines combines getting the next event with parsing the next event.</para>
<para>This method is only called by synchronized methods and therefore is not synchronized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evioEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>the event to parse. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if bad format </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="246" column="22"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a8781be206ac8c3058beea4607168b329" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>uint32_t</type>
        <definition>virtual uint32_t evio::IEvioReader::getEventArray</definition>
        <argsstring>(size_t evNumber, std::vector&lt; uint8_t &gt; &amp;vec)=0</argsstring>
        <name>getEventArray</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1aabd040b5f2fce682af243f6dd35d17ac">getEventArray</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a5c85cf1408ce75097e67d29624235c35">getEventArray</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a21f8dbf817eb9e3f5a50e66d0c6b75de">getEventArray</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>evNumber</declname>
        </param>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Get an evio bank or event in vector-of-bytes form. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>number of event of interest (starting at 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>vector to contain bank&apos;s/event&apos;s bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes in returned event. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if failed file access; if eventNumber out of bounds (starts at 1); if the event number does not correspond to an existing event; if object closed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="258" column="26"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a8aab3078f0825fdc44adb996637286d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>uint32_t</type>
        <definition>virtual uint32_t evio::IEvioReader::getEventBuffer</definition>
        <argsstring>(size_t evNumber, ByteBuffer &amp;buf)=0</argsstring>
        <name>getEventBuffer</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1af64f120610b16ca13f9957e55ba5c232">getEventBuffer</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a2d24a3b4a17c63b56084cb865ab9f741">getEventBuffer</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a54401688329ae72d5b3f7068ca32ddeb">getEventBuffer</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>evNumber</declname>
        </param>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get an evio bank or event in <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> form. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>number of event of interest </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to contain bank&apos;s/event&apos;s bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes in returned event. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if failed file access; if eventNumber out of bounds (starts at 1); if the event number does not correspond to an existing event; if object closed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="270" column="26"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a73cb48511f980029d7a55ce70c34765b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void evio::IEvioReader::rewind</definition>
        <argsstring>()=0</argsstring>
        <name>rewind</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1a7bbc59a18c152d62fd22e685c76a7ede">rewind</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1ab299451c3cb8fa93da0f4eca0666887c">rewind</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a65bfd0c084c274716e16ac90f7b7084b">rewind</reimplementedby>
        <briefdescription>
<para>The equivalent of rewinding the file. </para>
        </briefdescription>
        <detaileddescription>
<para>What it actually does is set the position of the file/buffer back to where it was after calling the constructor - after the first header. This method, along with the two <computeroutput><ref refid="de/d97/classevio_1_1_i_evio_reader_1a3a3c4a46ffffbd0d090e8ee04a5b54f2" kindref="member">position()</ref></computeroutput> and the <computeroutput><ref refid="de/d97/classevio_1_1_i_evio_reader_1abfcc831176f6b4b0c402838b2fa09e6f" kindref="member">close()</ref></computeroutput> method, allows applications to treat files in a normal random access manner.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if object closed; if failed file access or buffer/file read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="282" column="22"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a3a3c4a46ffffbd0d090e8ee04a5b54f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>ssize_t</type>
        <definition>virtual ssize_t evio::IEvioReader::position</definition>
        <argsstring>()=0</argsstring>
        <name>position</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1a22dbfd15bd8796cb6d4e969ee6237c53">position</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a788f6442710ea217855ba4c70787b5d5">position</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a1ee5892d045c14faeec288341f005288">position</reimplementedby>
        <briefdescription>
<para>This is equivalent to obtaining the current position in the file. </para>
        </briefdescription>
        <detaileddescription>
<para>What it actually does is return the position of the buffer. This method, along with the <computeroutput><ref refid="de/d97/classevio_1_1_i_evio_reader_1a73cb48511f980029d7a55ce70c34765b" kindref="member">rewind()</ref></computeroutput>, <computeroutput>position(int)</computeroutput> and the <computeroutput><ref refid="de/d97/classevio_1_1_i_evio_reader_1abfcc831176f6b4b0c402838b2fa09e6f" kindref="member">close()</ref></computeroutput> method, allows applications to treat files in a normal random access manner. Only meaningful to evio versions 1-3 and for sequential reading.</para>
<para><simplesect kind="return"><para>the position of the buffer; -1 if not sequential read and version 4+ </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if object closed; if error accessing file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="295" column="25"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1abfcc831176f6b4b0c402838b2fa09e6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void evio::IEvioReader::close</definition>
        <argsstring>()=0</argsstring>
        <name>close</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1aca5b3c51d69da66cf6b469607c30f490">close</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1adc59efe016e7c5c57350d41fd9bfbd18">close</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a884233e796129239525dbcf2648d6c4a">close</reimplementedby>
        <briefdescription>
<para>This is closes the file, but for buffers it only sets the position to 0. </para>
        </briefdescription>
        <detaileddescription>
<para>This method, along with the <computeroutput><ref refid="de/d97/classevio_1_1_i_evio_reader_1a73cb48511f980029d7a55ce70c34765b" kindref="member">rewind()</ref></computeroutput> and the two <computeroutput><ref refid="de/d97/classevio_1_1_i_evio_reader_1a3a3c4a46ffffbd0d090e8ee04a5b54f2" kindref="member">position()</ref></computeroutput> methods, allows applications to treat files in a normal random access manner. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="303" column="22"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a2045b543588af4ed7a48f2613d0d40d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="d5/d6e/classevio_1_1_i_block_header" kindref="compound">IBlockHeader</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;IBlockHeader&gt; evio::IEvioReader::getCurrentBlockHeader</definition>
        <argsstring>()=0</argsstring>
        <name>getCurrentBlockHeader</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1a4fcf57ceb076b57af503fe9e60c5336e">getCurrentBlockHeader</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a689d91e4167e2298da870cf26049d670">getCurrentBlockHeader</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a5d24195f0099b106d54315b00585b417">getCurrentBlockHeader</reimplementedby>
        <briefdescription>
<para>This returns the current (active) block (physical record) header. </para>
        </briefdescription>
        <detaileddescription>
<para>Since most users have no interest in physical records, this method should not be used.</para>
<para><simplesect kind="return"><para>the current block header. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="312" column="33"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a0ff6709076fcdd97d13f813f1e6dfd35" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="d4/d12/classevio_1_1_evio_event" kindref="compound">EvioEvent</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;EvioEvent&gt; evio::IEvioReader::gotoEventNumber</definition>
        <argsstring>(size_t evNumber)=0</argsstring>
        <name>gotoEventNumber</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1a826eddabec339a7ce8db233cac4f57b4">gotoEventNumber</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1ac51fae5c6c4f8a9aea1d398379f89857">gotoEventNumber</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1ace3ee5ef2f1277e737d10348a2d2e010">gotoEventNumber</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>evNumber</declname>
        </param>
        <briefdescription>
<para>Go to a specific event in the file. </para>
        </briefdescription>
        <detaileddescription>
<para>The events are numbered 1..N. This number is transient<ndash/>it is not part of the event as stored in the evio file. In versions 4 and up this is just a wrapper on <ref refid="de/d97/classevio_1_1_i_evio_reader_1a848dc77538de2be992d106c590180df4" kindref="member">getEvent(size_t)</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>the event number in a 1..N counting sense, from the start of the file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the specified event in file or null if there&apos;s an error or nothing at that event #. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if object closed; if failed file access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="323" column="33"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1a083befb0e32e9349014602d820d10284" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t evio::IEvioReader::getEventCount</definition>
        <argsstring>()=0</argsstring>
        <name>getEventCount</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1abf53ed479ecb4a465e50b81edb59da09">getEventCount</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1afb236980e8a72c2253c1cc2a2c9918fb">getEventCount</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1afbb1a4769f1a86a1630564c7729c7873">getEventCount</reimplementedby>
        <briefdescription>
<para>This is the number of events in the file/buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Any dictionary or first event are <bold>not</bold> included in the count.</para>
<para><simplesect kind="return"><para>the number of events in the file/buffer. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if read failure; if failed file access; if object closed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="334" column="24"/>
      </memberdef>
      <memberdef kind="function" id="de/d97/classevio_1_1_i_evio_reader_1ac03a4df4105a632bb88b10d3902a14b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t evio::IEvioReader::getBlockCount</definition>
        <argsstring>()=0</argsstring>
        <name>getBlockCount</name>
        <reimplementedby refid="df/dbd/classevio_1_1_evio_reader_1a00e4c65300fa325e411db0b198fc5d09">getBlockCount</reimplementedby>
        <reimplementedby refid="dd/db3/classevio_1_1_evio_reader_v4_1a3575990f705692c10344bf3f5fc753cd">getBlockCount</reimplementedby>
        <reimplementedby refid="db/d34/classevio_1_1_evio_reader_v6_1a497d6bd180ecc3d52384b4f406e78bcf">getBlockCount</reimplementedby>
        <briefdescription>
<para>This is the number of blocks/records in the file/buffer including the empty block, record or trailer at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if object closed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of records in the file/buffer (estimate for version 3 files). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/IEvioReader.h" line="343" column="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This pure, virtual class is meant to encapsulate the operation of reading both 2 differently formatted evio versions. </para>
    </briefdescription>
    <detaileddescription>
<para>One implementing class reads evio versions 1 - 4, and the other, version 6.</para>
<para><simplesect kind="date"><para>06/8/2020 </para>
</simplesect>
<simplesect kind="author"><para>timmer </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>evio::EvioReader</label>
        <link refid="df/dbd/classevio_1_1_evio_reader"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>evio::EvioReaderV4</label>
        <link refid="dd/db3/classevio_1_1_evio_reader_v4"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>evio::EvioReaderV6</label>
        <link refid="db/d34/classevio_1_1_evio_reader_v6"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>evio::IEvioReader</label>
        <link refid="de/d97/classevio_1_1_i_evio_reader"/>
      </node>
    </inheritancegraph>
    <location file="src/libsrc/IEvioReader.h" line="39" column="5" bodyfile="src/libsrc/IEvioReader.h" bodystart="39" bodyend="344"/>
    <listofallmembers>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1aeb9b24a83d7fc38eacf3f6b3b329f926ae0ddb8ce05a096046ff47cf917969b50" prot="public" virt="non-virtual"><scope>evio::IEvioReader</scope><name>CANNOT_OPEN_FILE</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a522697d2985c7cb42938b241e476cdb3" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>checkBlockNumberSequence</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1abfcc831176f6b4b0c402838b2fa09e6f" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>close</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1aeb9b24a83d7fc38eacf3f6b3b329f926a6413574a07e897b7be4800fa6921e2e7" prot="public" virt="non-virtual"><scope>evio::IEvioReader</scope><name>END_OF_FILE</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1aeb9b24a83d7fc38eacf3f6b3b329f926ae3b4a070ccd53865afcc4bc2ad91ed47" prot="public" virt="non-virtual"><scope>evio::IEvioReader</scope><name>EVIO_EXCEPTION</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1adc2e2fcc2aceea85771325bac4f3c397" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>fileSize</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1ac03a4df4105a632bb88b10d3902a14b5" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>getBlockCount</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1ad438c3d38ceca2c36bd6be31eb91b4f1" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>getByteBuffer</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a29d8c718deecc5698b2af791ac95cf0e" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>getByteOrder</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a2045b543588af4ed7a48f2613d0d40d6" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>getCurrentBlockHeader</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1ac23b043c8fc151f4d0dfc1a61ed481cc" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>getDictionaryXML</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a848dc77538de2be992d106c590180df4" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>getEvent</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a8781be206ac8c3058beea4607168b329" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>getEventArray</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a8aab3078f0825fdc44adb996637286d5" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>getEventBuffer</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a083befb0e32e9349014602d820d10284" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>getEventCount</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1ade702470274a154209f94c8eb8de046e" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>getEvioVersion</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a0d13f3328420b54c37766141d3c8b688" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>getFirstBlockHeader</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1aa5b24915b5fa9c647784866088116120" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>getFirstEvent</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a4eeea1ddbfbe0d76e4669c440cf1e5b0" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>getNumEventsRemaining</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1ad26dab3458bf03003a0cbbe84fefa567" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>getParser</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a5dd302d0d8651ebe45ed81d66f1eea96" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>getPath</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a0ff6709076fcdd97d13f813f1e6dfd35" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>gotoEventNumber</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a3b8d52dbf2b63734bb6b9844cc7f09a3" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>hasDictionaryXML</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a8aa2bdd85a0b9dc864dd2c7a1ed084b8" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>hasFirstEvent</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1ab5bad722797b96b9b756d739b9aa803f" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>isClosed</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a67dd00a6ade28faedc3876240f35edeb" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>nextEvent</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1abcd2be8738fe4162409a7d2e883b672b" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>parseEvent</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1ad5ad0599b4726846b3e34db9b036db99" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>parseEvent</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1abff17b5f200e64826bffce2a60f3ae66" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>parseNextEvent</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a3a3c4a46ffffbd0d090e8ee04a5b54f2" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>position</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1aeb9b24a83d7fc38eacf3f6b3b329f926" prot="public" virt="non-virtual"><scope>evio::IEvioReader</scope><name>ReadWriteStatus</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a73cb48511f980029d7a55ce70c34765b" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>rewind</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a1018ab2d476c0638970ef40a7fb5e45f" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>setBuffer</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1a906861412ddde5f377d529e2ce691a71" prot="public" virt="pure-virtual"><scope>evio::IEvioReader</scope><name>setParser</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1aeb9b24a83d7fc38eacf3f6b3b329f926ab14e3269cc4f96bf7a442d278fc51009" prot="public" virt="non-virtual"><scope>evio::IEvioReader</scope><name>SUCCESS</name></member>
      <member refid="de/d97/classevio_1_1_i_evio_reader_1aeb9b24a83d7fc38eacf3f6b3b329f926a0c4ce2651b53b53a2e628c80bf3db456" prot="public" virt="non-virtual"><scope>evio::IEvioReader</scope><name>UNKNOWN_ERROR</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
