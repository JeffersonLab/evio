<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="de/da2/classevio_1_1_record_input" kind="class" language="C++" prot="public">
    <compoundname>evio::RecordInput</compoundname>
    <includes local="no">RecordInput.h</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="de/da2/classevio_1_1_record_input_1aa0c4a79a62d044834db0b310f562ab89" prot="private" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t evio::RecordInput::DEFAULT_BUF_SIZE</definition>
        <argsstring></argsstring>
        <name>DEFAULT_BUF_SIZE</name>
        <initializer>= 8 * 1024 * 1024</initializer>
        <briefdescription>
<para>Default internal buffer size in bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="108" column="31" bodyfile="src/libsrc/RecordInput.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="de/da2/classevio_1_1_record_input_1a1a3e0673cba01d084208e36afc44bddc" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordInput::nEntries</definition>
        <argsstring></argsstring>
        <name>nEntries</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of event in record. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="111" column="18" bodyfile="src/libsrc/RecordInput.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/da2/classevio_1_1_record_input_1a997de5f4b5c9233e67c97ac2d29d3929" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordInput::userHeaderOffset</definition>
        <argsstring></argsstring>
        <name>userHeaderOffset</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Offset, in uncompressed dataBuffer, from just past header to user header (past index). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="115" column="18" bodyfile="src/libsrc/RecordInput.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/da2/classevio_1_1_record_input_1a914d6cd62eae60f59ff39770a7af57d4" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordInput::eventsOffset</definition>
        <argsstring></argsstring>
        <name>eventsOffset</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Offset, in uncompressed dataBuffer, from just past header to event data (past index + user header). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="119" column="18" bodyfile="src/libsrc/RecordInput.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/da2/classevio_1_1_record_input_1a66ab6c560e25bad2666375484a54124d" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordInput::uncompressedEventsLength</definition>
        <argsstring></argsstring>
        <name>uncompressedEventsLength</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Length in bytes of uncompressed data (events) in dataBuffer, not including header, index or user header. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="123" column="18" bodyfile="src/libsrc/RecordInput.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/da2/classevio_1_1_record_input_1a83f064e65d9dd7997d7370d76f80610f" prot="private" static="no" mutable="no">
        <type><ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref></type>
        <definition>ByteOrder evio::RecordInput::byteOrder</definition>
        <argsstring></argsstring>
        <name>byteOrder</name>
        <initializer>{<ref refid="da/d7d/classevio_1_1_byte_order_1ae4055f708921d4e6540ab4662d27147c" kindref="member">ByteOrder::ENDIAN_LOCAL</ref>}</initializer>
        <briefdescription>
<para>Byte order of internal ByteBuffers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="126" column="19" bodyfile="src/libsrc/RecordInput.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/da2/classevio_1_1_record_input_1a4837543b27e43af6da82428be68a26c6" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &gt;</type>
        <definition>std::shared_ptr&lt;RecordHeader&gt; evio::RecordInput::header</definition>
        <argsstring></argsstring>
        <name>header</name>
        <briefdescription>
<para>General header of this record. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="129" column="25" bodyfile="src/libsrc/RecordInput.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/da2/classevio_1_1_record_input_1a500d425257b0cea6119e24bfd85a2dd4" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ByteBuffer&gt; evio::RecordInput::dataBuffer</definition>
        <argsstring></argsstring>
        <name>dataBuffer</name>
        <briefdescription>
<para>This buffer contains uncompressed data consisting of, in order, 1) index array, 2) user header, 3) events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="133" column="25" bodyfile="src/libsrc/RecordInput.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/da2/classevio_1_1_record_input_1a64b06060b07bf1368c314f449735784e" prot="private" static="no" mutable="no">
        <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref></type>
        <definition>ByteBuffer evio::RecordInput::recordBuffer</definition>
        <argsstring></argsstring>
        <name>recordBuffer</name>
        <briefdescription>
<para>This buffer contains compressed data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="136" column="20" bodyfile="src/libsrc/RecordInput.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/da2/classevio_1_1_record_input_1a36a7505e647410c6ce3431f38d4c58a4" prot="private" static="no" mutable="no">
        <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref></type>
        <definition>ByteBuffer evio::RecordInput::headerBuffer</definition>
        <argsstring></argsstring>
        <name>headerBuffer</name>
        <briefdescription>
<para>Record&apos;s header is read into this buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="139" column="20" bodyfile="src/libsrc/RecordInput.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a1c2525f500188847e62715c652e77708" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordInput::allocate</definition>
        <argsstring>(size_t size)</argsstring>
        <name>allocate</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocates data &amp; record buffers for constructing a record from the input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to allocate for each internal <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="144" column="14" bodyfile="src/libsrc/RecordInput.cpp" bodystart="43" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a33536900e470668ad47bb368b94e88cc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordInput::setByteOrder</definition>
        <argsstring>(const ByteOrder &amp;order)</argsstring>
        <name>setByteOrder</name>
        <param>
          <type>const <ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Set the byte order of the internal buffers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>desired byte order of internal buffers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="145" column="14" bodyfile="src/libsrc/RecordInput.cpp" bodystart="147" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1aaec5e98d0fbd179fe794ba29b4622c9c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordInput::showIndex</definition>
        <argsstring>() const</argsstring>
        <name>showIndex</name>
        <briefdescription>
<para>Prints on the screen the index array of the record. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="146" column="14" bodyfile="src/libsrc/RecordInput.cpp" bodystart="755" bodyend="760"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a594a0b6430cfd782d741e5835dda7d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::RecordInput::RecordInput</definition>
        <argsstring>()</argsstring>
        <name>RecordInput</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="150" column="9" bodyfile="src/libsrc/RecordInput.cpp" bodystart="22" bodyend="26"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a3d5f0120189717ffc8d2d480d89cb91a" compoundref="d4/d6c/_byte_buffer_8cpp" startline="466" endline="466">evio::ByteBuffer::order</references>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a50f3443a651a5777f4ca5703a65ec0a4" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::RecordInput::RecordInput</definition>
        <argsstring>(const ByteOrder &amp;order)</argsstring>
        <name>RecordInput</name>
        <param>
          <type>const <ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>byte order of internal byte arrays. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="151" column="18" bodyfile="src/libsrc/RecordInput.cpp" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1ad36390ccb249caf2b414fabfd6dd2aaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::RecordInput::RecordInput</definition>
        <argsstring>(const RecordInput &amp;recordIn)</argsstring>
        <name>RecordInput</name>
        <param>
          <type>const <ref refid="de/da2/classevio_1_1_record_input" kindref="compound">RecordInput</ref> &amp;</type>
          <declname>recordIn</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="152" column="9" bodyfile="src/libsrc/RecordInput.cpp" bodystart="53" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1ac99fdb7643197e0a5936ae98fe90f9cd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>evio::RecordInput::RecordInput</definition>
        <argsstring>(RecordInput &amp;&amp;srcRec) noexcept</argsstring>
        <name>RecordInput</name>
        <param>
          <type><ref refid="de/da2/classevio_1_1_record_input" kindref="compound">RecordInput</ref> &amp;&amp;</type>
          <declname>srcRec</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>srcRec</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="de/da2/classevio_1_1_record_input" kindref="compound">RecordInput</ref> to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="153" column="9" bodyfile="src/libsrc/RecordInput.cpp" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a34d86a58f649571c03497c7eb2ba125a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>evio::RecordInput::~RecordInput</definition>
        <argsstring>()=default</argsstring>
        <name>~RecordInput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="155" column="9"/>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1aa40d7cca1eb46111544ca0a3537d9fdc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="de/da2/classevio_1_1_record_input" kindref="compound">RecordInput</ref> &amp;</type>
        <definition>RecordInput &amp; evio::RecordInput::operator=</definition>
        <argsstring>(RecordInput &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="de/da2/classevio_1_1_record_input" kindref="compound">RecordInput</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>right side object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>left side object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="157" column="22" bodyfile="src/libsrc/RecordInput.cpp" bodystart="86" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a6d88256111bd532501b99bb95583fe93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/da2/classevio_1_1_record_input" kindref="compound">RecordInput</ref> &amp;</type>
        <definition>RecordInput &amp; evio::RecordInput::operator=</definition>
        <argsstring>(const RecordInput &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="de/da2/classevio_1_1_record_input" kindref="compound">RecordInput</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>right side object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>left side object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="158" column="22" bodyfile="src/libsrc/RecordInput.cpp" bodystart="111" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1aabe9771eb8a45b7a6e3b63f0458c0255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RecordHeader &gt; evio::RecordInput::getHeader</definition>
        <argsstring>()</argsstring>
        <name>getHeader</name>
        <briefdescription>
<para>Get the header of this record. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>header of this record. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="160" column="25" bodyfile="src/libsrc/RecordInput.cpp" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1ac8b1a052e0520138565229072470b036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="da/d7d/classevio_1_1_byte_order" kindref="compound">ByteOrder</ref> &amp;</type>
        <definition>const ByteOrder &amp; evio::RecordInput::getByteOrder</definition>
        <argsstring>()</argsstring>
        <name>getByteOrder</name>
        <briefdescription>
<para>Get the byte order of the internal buffers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>byte order of the internal buffers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="161" column="26" bodyfile="src/libsrc/RecordInput.cpp" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1ad3374ca3748213d7b25252b2f5e9d193" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ByteBuffer &gt; evio::RecordInput::getUncompressedDataBuffer</definition>
        <argsstring>()</argsstring>
        <name>getUncompressedDataBuffer</name>
        <briefdescription>
<para>Get the buffer with all uncompressed data in it. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s position and limit are set to read only event data. That means no header, index, or user-header. <simplesect kind="return"><para>the buffer with uncompressed event data in it. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="162" column="25" bodyfile="src/libsrc/RecordInput.cpp" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a0f50d5521b94d5c4a520e39a7ef9025f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordInput::hasIndex</definition>
        <argsstring>() const</argsstring>
        <name>hasIndex</name>
        <briefdescription>
<para>Does this record contain an event index? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if record contains an event index, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="164" column="14" bodyfile="src/libsrc/RecordInput.cpp" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1af34df12d892e4c91c541d4be07147741" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool evio::RecordInput::hasUserHeader</definition>
        <argsstring>() const</argsstring>
        <name>hasUserHeader</name>
        <briefdescription>
<para>Does this record contain a user header? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if record contains a user header, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="165" column="14" bodyfile="src/libsrc/RecordInput.cpp" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a3fc47d4d9e244aa4aa89d9a1006484ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ByteBuffer &gt; evio::RecordInput::getEvent</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buffer, uint32_t index, size_t bufOffset=0)</argsstring>
        <name>getEvent</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the event at the given index and write it into the given byte buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The given byte buffer has to be large enough to receive all the event&apos;s data, but the buffer-&gt;limit() is ignored &amp; reset. Buffer&apos;s byte order is set to that of the internal buffers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to be filled with event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of event starting at 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset into buffer to place event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>buffer buffer arg. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if index too large, or buffer has insufficient space to contain event (buffer-&gt;capacity() &lt; event size). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="167" column="25" bodyfile="src/libsrc/RecordInput.cpp" bodystart="254" bodyend="258"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a9be6c85f5fc872e5e47e13d5c34555a3" compoundref="d8/d15/_reader_8cpp" startline="762" endline="814">evio::Reader::extractDictionaryFromBuffer</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1afaa4a188742e9090fe9be391ce5f3731" compoundref="d8/d15/_reader_8cpp" startline="818" endline="872">evio::Reader::extractDictionaryFromFile</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a124946e794a7b252fc41b6edd7f3f982" compoundref="d8/d15/_reader_8cpp" startline="563" endline="583">evio::Reader::getEvent</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a48a32c2c8ad1ba30a4204c8a56fb84bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
        <definition>ByteBuffer &amp; evio::RecordInput::getEvent</definition>
        <argsstring>(ByteBuffer &amp;buffer, uint32_t index, size_t bufOffset=0)</argsstring>
        <name>getEvent</name>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the event at the given index and write it into the given byte buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The given byte buffer has to be large enough to receive all the event&apos;s data, but the buffer.limit() is ignored &amp; reset. Buffer&apos;s byte order is set to that of the internal buffers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to be filled with event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of event starting at 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset into buffer to place event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>buffer buffer arg. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if index too large, or buffer has insufficient space to contain event (buffer.capacity() &lt; event size). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="168" column="21" bodyfile="src/libsrc/RecordInput.cpp" bodystart="274" bodyend="302"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1aa0e335238a57eaa0bffee8f968e5995f" compoundref="d4/d6c/_byte_buffer_8cpp" startline="475" endline="475">evio::ByteBuffer::array</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1abf7abf99aa7544601997f40eba298648" compoundref="d4/d6c/_byte_buffer_8cpp" startline="490" endline="490">evio::ByteBuffer::arrayOffset</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a6496a99b06b5ed67b8c93b148fd87323" compoundref="d4/d6c/_byte_buffer_8cpp" startline="504" endline="504">evio::ByteBuffer::capacity</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1afb08d1dbc5fbf780afd27617a67eb750" compoundref="d4/d6c/_byte_buffer_8cpp" startline="511" endline="511">evio::ByteBuffer::limit</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a3d5f0120189717ffc8d2d480d89cb91a" compoundref="d4/d6c/_byte_buffer_8cpp" startline="466" endline="466">evio::ByteBuffer::order</references>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a8d6d188181b47c1e8933555f2d76a435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; uint8_t &gt;</type>
        <definition>std::shared_ptr&lt; uint8_t &gt; evio::RecordInput::getUserHeader</definition>
        <argsstring>()</argsstring>
        <name>getUserHeader</name>
        <briefdescription>
<para>Get the user header contained in this record and return it in an allocated array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the user header contained in this record, or null if none. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="169" column="25" bodyfile="src/libsrc/RecordInput.cpp" bodystart="309" bodyend="317"/>
        <referencedby refid="de/da2/classevio_1_1_record_input_1af590580abb73974099c107444b355d97" compoundref="d6/d35/_record_input_8cpp" startline="333" endline="336">getUserHeader</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1ae291a1b2eb21afb9d6366bfeaa220b80" compoundref="d6/d35/_record_input_8cpp" startline="387" endline="400">getUserHeaderAsRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1af590580abb73974099c107444b355d97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ByteBuffer &gt; evio::RecordInput::getUserHeader</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;buffer, size_t bufOffset=0)</argsstring>
        <name>getUserHeader</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get any existing user header and write it into the given byte buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The given byte buffer must be large enough to contain user header. Buffer&apos;s byte order is set to that of the internal buffers. Buffer&apos;s position is set to bufOffset and limit is set to bufOffset + userHeader size.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to be filled with user header. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset into buffer to place user header. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>buffer passed in (position = limit = bufOffset if no user header exists). </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if buffer has insufficient space to contain user header (buffer.capacity() - bufOffset &lt; user header size). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="170" column="25" bodyfile="src/libsrc/RecordInput.cpp" bodystart="333" bodyend="336"/>
        <references refid="de/da2/classevio_1_1_record_input_1a8d6d188181b47c1e8933555f2d76a435" compoundref="d6/d35/_record_input_8cpp" startline="309" endline="317">getUserHeader</references>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1ad5f421e53b8e608d79d8b901034b19dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
        <definition>ByteBuffer &amp; evio::RecordInput::getUserHeader</definition>
        <argsstring>(ByteBuffer &amp;buffer, size_t bufOffset=0)</argsstring>
        <name>getUserHeader</name>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get any existing user header and write it into the given byte buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The given byte buffer must be large enough to contain user header. Buffer&apos;s byte order is set to that of the internal buffers. Buffer&apos;s position is set to bufOffset and limit is set to bufOffset + userHeader size.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to be filled with user header. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset into buffer to place user header. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>buffer passed in (position = limit = bufOffset if no user header exists). </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if buffer has insufficient space to contain user header (buffer.capacity() - bufOffset &lt; user header size). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="171" column="21" bodyfile="src/libsrc/RecordInput.cpp" bodystart="352" bodyend="371"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1aa0e335238a57eaa0bffee8f968e5995f" compoundref="d4/d6c/_byte_buffer_8cpp" startline="475" endline="475">evio::ByteBuffer::array</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1abf7abf99aa7544601997f40eba298648" compoundref="d4/d6c/_byte_buffer_8cpp" startline="490" endline="490">evio::ByteBuffer::arrayOffset</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a6496a99b06b5ed67b8c93b148fd87323" compoundref="d4/d6c/_byte_buffer_8cpp" startline="504" endline="504">evio::ByteBuffer::capacity</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1afb08d1dbc5fbf780afd27617a67eb750" compoundref="d4/d6c/_byte_buffer_8cpp" startline="511" endline="511">evio::ByteBuffer::limit</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a3d5f0120189717ffc8d2d480d89cb91a" compoundref="d4/d6c/_byte_buffer_8cpp" startline="466" endline="466">evio::ByteBuffer::order</references>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a2a4c76794e12fa3433bbc084a0b70196" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; uint8_t &gt;</type>
        <definition>std::shared_ptr&lt; uint8_t &gt; evio::RecordInput::getEvent</definition>
        <argsstring>(uint32_t index, uint32_t *len)</argsstring>
        <name>getEvent</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Get the event at the given index and return it in an allocated array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of event starting at 0. If index too large, it&apos;s set to last index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to int which gets filled with the data length in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>byte array containing event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="173" column="25" bodyfile="src/libsrc/RecordInput.cpp" bodystart="188" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1aa00b2a5e045dcb0dda304b658d97ed26" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordInput::getEventLength</definition>
        <argsstring>(uint32_t index) const</argsstring>
        <name>getEventLength</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the length of the event with given index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of the data in bytes or zero if index does not coresspond to a valid event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="174" column="18" bodyfile="src/libsrc/RecordInput.cpp" bodystart="224" bodyend="238"/>
        <references refid="de/da2/classevio_1_1_record_input_1a7840a207a13cb1bbe312f35fcc0eca2c" compoundref="d6/d35/_record_input_8cpp" startline="749" endline="749">getEntries</references>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a5cac5c4702dec37c7ba7807421583da8" compoundref="d8/d15/_reader_8cpp" startline="645" endline="663">evio::Reader::getEventLength</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a7840a207a13cb1bbe312f35fcc0eca2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordInput::getEntries</definition>
        <argsstring>() const</argsstring>
        <name>getEntries</name>
        <briefdescription>
<para>Returns number of the events packed in the record. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of the events packed in the record </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="175" column="18" bodyfile="src/libsrc/RecordInput.cpp" bodystart="749" bodyend="749"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a124946e794a7b252fc41b6edd7f3f982" compoundref="d8/d15/_reader_8cpp" startline="563" endline="583">evio::Reader::getEvent</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a5cac5c4702dec37c7ba7807421583da8" compoundref="d8/d15/_reader_8cpp" startline="645" endline="663">evio::Reader::getEventLength</referencedby>
        <referencedby refid="de/da2/classevio_1_1_record_input_1aa00b2a5e045dcb0dda304b658d97ed26" compoundref="d6/d35/_record_input_8cpp" startline="224" endline="238">getEventLength</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1ac96bfa4922dce74d379ca204abb2001b" compoundref="d8/d15/_reader_8cpp" startline="704" endline="704">evio::Reader::getRecordEventCount</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1ae291a1b2eb21afb9d6366bfeaa220b80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="de/da2/classevio_1_1_record_input" kindref="compound">RecordInput</ref> &gt;</type>
        <definition>std::shared_ptr&lt; RecordInput &gt; evio::RecordInput::getUserHeaderAsRecord</definition>
        <argsstring>(ByteBuffer &amp;buffer, size_t bufOffset)</argsstring>
        <name>getUserHeaderAsRecord</name>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufOffset</declname>
        </param>
        <briefdescription>
<para>Get any existing user header and write it into the given byte buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The byte buffer must be large enough to contain it. Warning, buffer.limit() is ignored &amp; reset. Parse the user header into the given recordInput object which will be set to the byte order of this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to be filled with user header </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset into buffer to place user header. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>record parsed from user header or nullptr if no user header exists. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if buffer has insufficient space to contain user header (buffer.capacity() - bufOffset &lt; user header size), or if buffer not in hipo format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="177" column="25" bodyfile="src/libsrc/RecordInput.cpp" bodystart="387" bodyend="400"/>
        <references refid="de/da2/classevio_1_1_record_input_1a8d6d188181b47c1e8933555f2d76a435" compoundref="d6/d35/_record_input_8cpp" startline="309" endline="317">getUserHeader</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a32b043081cd3a62187f2577ce2966e7d" compoundref="d4/d6c/_byte_buffer_8cpp" startline="497" endline="497">evio::ByteBuffer::remaining</references>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a8bfee12a45ae1f40be0048c1a9044a07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordInput::readRecord</definition>
        <argsstring>(std::ifstream &amp;file, size_t position)</argsstring>
        <name>readRecord</name>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Reads record from the file at given position. </para>
        </briefdescription>
        <detaileddescription>
<para>Call this method or <ref refid="de/da2/classevio_1_1_record_input_1a42e735902f78f781e3bb49b2e71c37fc" kindref="member">readRecord(ByteBuffer &amp;, size_t)</ref> before calling any other. Any compressed data is decompressed. Memory is allocated as needed. First the header is read, then the length of the record is read from header, then following bytes are read and decompressed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>opened file descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>position in the file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if file contains too little data, if the input data was corrupted (including if the input data is an incomplete stream), is not in proper format, or version earlier than 6, or error in uncompressing gzipped data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="180" column="14" bodyfile="src/libsrc/RecordInput.cpp" bodystart="419" bodyend="505"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1aa0e335238a57eaa0bffee8f968e5995f" compoundref="d4/d6c/_byte_buffer_8cpp" startline="475" endline="475">evio::ByteBuffer::array</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a6496a99b06b5ed67b8c93b148fd87323" compoundref="d4/d6c/_byte_buffer_8cpp" startline="504" endline="504">evio::ByteBuffer::capacity</references>
        <references refid="da/d08/classevio_1_1_compressor_1abab453336d92bc8e693825ac143ff101" compoundref="dc/d17/_compressor_8h" startline="50" endline="53">evio::Compressor::getInstance</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a0e09d731589bcfe2705d0c606192f6eb" compoundref="d6/dea/_record_header_8h" startline="127">evio::RecordHeader::HEADER_SIZE_BYTES</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a3d5f0120189717ffc8d2d480d89cb91a" compoundref="d4/d6c/_byte_buffer_8cpp" startline="466" endline="466">evio::ByteBuffer::order</references>
        <references refid="da/d08/classevio_1_1_compressor_1a7c536c78b588c8d70b51e28d0eab1dd8" compoundref="d9/d6a/_compressor_8cpp" startline="689" endline="691">evio::Compressor::uncompressLZ4</references>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a9be6c85f5fc872e5e47e13d5c34555a3" compoundref="d8/d15/_reader_8cpp" startline="762" endline="814">evio::Reader::extractDictionaryFromBuffer</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1afaa4a188742e9090fe9be391ce5f3731" compoundref="d8/d15/_reader_8cpp" startline="818" endline="872">evio::Reader::extractDictionaryFromFile</referencedby>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a8396556b577deaa8cc017fb69324da92" compoundref="d8/d15/_reader_8cpp" startline="727" endline="743">evio::Reader::readRecord</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a42e735902f78f781e3bb49b2e71c37fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void evio::RecordInput::readRecord</definition>
        <argsstring>(ByteBuffer &amp;buffer, size_t offset)</argsstring>
        <name>readRecord</name>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Reads a record from the buffer at the given offset. </para>
        </briefdescription>
        <detaileddescription>
<para>Call this method or <ref refid="de/da2/classevio_1_1_record_input_1a8bfee12a45ae1f40be0048c1a9044a07" kindref="member">readRecord(std::ifstream &amp;, size_t)</ref> before calling any other. Any compressed data is decompressed. Memory is allocated as needed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer containing record data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset into buffer to beginning of record data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if buffer contains too little data, is not in proper format, or version earlier than 6 or error in uncompressing gzipped data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="181" column="14" bodyfile="src/libsrc/RecordInput.cpp" bodystart="519" bodyend="598"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1aa0e335238a57eaa0bffee8f968e5995f" compoundref="d4/d6c/_byte_buffer_8cpp" startline="475" endline="475">evio::ByteBuffer::array</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1abf7abf99aa7544601997f40eba298648" compoundref="d4/d6c/_byte_buffer_8cpp" startline="490" endline="490">evio::ByteBuffer::arrayOffset</references>
        <references refid="da/d08/classevio_1_1_compressor_1abab453336d92bc8e693825ac143ff101" compoundref="dc/d17/_compressor_8h" startline="50" endline="53">evio::Compressor::getInstance</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1afb08d1dbc5fbf780afd27617a67eb750" compoundref="d4/d6c/_byte_buffer_8cpp" startline="511" endline="511">evio::ByteBuffer::limit</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a3d5f0120189717ffc8d2d480d89cb91a" compoundref="d4/d6c/_byte_buffer_8cpp" startline="466" endline="466">evio::ByteBuffer::order</references>
        <references refid="da/d08/classevio_1_1_compressor_1a7c536c78b588c8d70b51e28d0eab1dd8" compoundref="d9/d6a/_compressor_8cpp" startline="689" endline="691">evio::Compressor::uncompressLZ4</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a1a9f105120b8118fedd4ab43d502f1fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordInput::uncompressRecord</definition>
        <argsstring>(std::shared_ptr&lt; ByteBuffer &gt; &amp;srcBuf, size_t srcOff, std::shared_ptr&lt; ByteBuffer &gt; &amp;dstBuf, RecordHeader &amp;hdr)</argsstring>
        <name>uncompressRecord</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>srcBuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>srcOff</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &gt; &amp;</type>
          <declname>dstBuf</declname>
        </param>
        <param>
          <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
          <declname>hdr</declname>
        </param>
        <briefdescription>
<para>Uncompress the data of a record from the source buffer at the given offset into the destination buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Be aware that the position &amp; limit of srcBuf may be changed. The limit of dstBuf may be changed. The position of dstBuf will be set to just after the user-header and just before the data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>srcBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer containing record data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcOff</parametername>
</parameternamelist>
<parameterdescription>
<para>offset into srcBuf to beginning of record data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer into which the record is uncompressed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hdr</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> to be used to read the record header in srcBuf. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the original record size in srcBuf (bytes). </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if srcBuf contains too little data, is not in proper format, or version earlier than 6. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="183" column="25" bodyfile="src/libsrc/RecordInput.cpp" bodystart="616" bodyend="620"/>
        <referencedby refid="d3/d56/classevio_1_1_reader_1a2df955f07faf6a4cd92cc8184eaa5d04" compoundref="d8/d15/_reader_8cpp" startline="1049" endline="1249">evio::Reader::scanBuffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t evio::RecordInput::uncompressRecord</definition>
        <argsstring>(ByteBuffer &amp;srcBuf, size_t srcOff, ByteBuffer &amp;dstBuf, RecordHeader &amp;header)</argsstring>
        <name>uncompressRecord</name>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>srcBuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>srcOff</declname>
        </param>
        <param>
          <type><ref refid="dc/d30/classevio_1_1_byte_buffer" kindref="compound">ByteBuffer</ref> &amp;</type>
          <declname>dstBuf</declname>
        </param>
        <param>
          <type><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> &amp;</type>
          <declname>header</declname>
          <defname>hdr</defname>
        </param>
        <briefdescription>
<para>Uncompress the data of a record from the source buffer at the given offset into the destination buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Be aware that the position &amp; limit of srcBuf may be changed. The limit of dstBuf may be changed. The position of dstBuf will be set to just after the user-header and just before the data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>srcBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer containing record data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcOff</parametername>
</parameternamelist>
<parameterdescription>
<para>offset into srcBuf to beginning of record data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer into which the record is uncompressed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hdr</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d8/d64/classevio_1_1_record_header" kindref="compound">RecordHeader</ref> to be used to read the record header in srcBuf. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the original record size in srcBuf (bytes). </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/d0b/classevio_1_1_evio_exception" kindref="compound">EvioException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if srcBuf contains too little data, is not in proper format, or version earlier than 6. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsrc/RecordInput.h" line="186" column="24" bodyfile="src/libsrc/RecordInput.cpp" bodystart="638" bodyend="742"/>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1aa0e335238a57eaa0bffee8f968e5995f" compoundref="d4/d6c/_byte_buffer_8cpp" startline="475" endline="475">evio::ByteBuffer::array</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1abf7abf99aa7544601997f40eba298648" compoundref="d4/d6c/_byte_buffer_8cpp" startline="490" endline="490">evio::ByteBuffer::arrayOffset</references>
        <references refid="d8/d64/classevio_1_1_record_header_1ac420593fe475899308138f3bd98e5f38" compoundref="d6/dea/_record_header_8h" startline="144">evio::RecordHeader::BIT_INFO_OFFSET</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a6496a99b06b5ed67b8c93b148fd87323" compoundref="d4/d6c/_byte_buffer_8cpp" startline="504" endline="504">evio::ByteBuffer::capacity</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a588247cf4b37ae9e2f35912cd2b7aae5" compoundref="d6/dea/_record_header_8h" startline="152">evio::RecordHeader::COMPRESSION_TYPE_OFFSET</references>
        <references refid="d8/d64/classevio_1_1_record_header_1ada84924ed1f01899fc4500b07c7f488b" compoundref="dd/d2d/_record_header_8cpp" startline="446" endline="446">evio::RecordHeader::getBitInfoWord</references>
        <references refid="d8/d64/classevio_1_1_record_header_1af1acf0f962eed8b770022681f6e10a5b" compoundref="dd/d2d/_record_header_8cpp" startline="348" endline="348">evio::RecordHeader::getCompressedDataLength</references>
        <references refid="d8/d64/classevio_1_1_record_header_1aba16ed1ed865333327bf64ad53d09e76" compoundref="dd/d2d/_record_header_8cpp" startline="299" endline="299">evio::RecordHeader::getCompressionType</references>
        <references refid="d8/d64/classevio_1_1_record_header_1aa434393ea672e70e77bd7fa188eff393" compoundref="dd/d2d/_record_header_8cpp" startline="334" endline="334">evio::RecordHeader::getDataLengthWords</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a0221831e904860de343cfa2fcbe05f2c" compoundref="dd/d2d/_record_header_8cpp" startline="369" endline="369">evio::RecordHeader::getHeaderLength</references>
        <references refid="d8/d64/classevio_1_1_record_header_1af943f7595eb02bbbb769a27ccc8f5aa4" compoundref="dd/d2d/_record_header_8cpp" startline="341" endline="341">evio::RecordHeader::getIndexLength</references>
        <references refid="da/d08/classevio_1_1_compressor_1abab453336d92bc8e693825ac143ff101" compoundref="dc/d17/_compressor_8h" startline="50" endline="53">evio::Compressor::getInstance</references>
        <references refid="d8/d64/classevio_1_1_record_header_1ac33a0f8082aa36f0e8fd2562d82e647a" compoundref="dd/d2d/_record_header_8cpp" startline="278" endline="278">evio::RecordHeader::getLength</references>
        <references refid="d8/d64/classevio_1_1_record_header_1ace2be836d16a4e4b58df6a6059d378b2" compoundref="dd/d2d/_record_header_8cpp" startline="240" endline="243">evio::RecordHeader::getUncompressedRecordLength</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a84ab13deb24469bc81dba390eeb72577" compoundref="dd/d2d/_record_header_8cpp" startline="313" endline="313">evio::RecordHeader::getUserHeaderLengthWords</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1afb08d1dbc5fbf780afd27617a67eb750" compoundref="d4/d6c/_byte_buffer_8cpp" startline="511" endline="511">evio::ByteBuffer::limit</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a88f84e6b1757db70542eac13294fc80e" compoundref="d4/d6c/_byte_buffer_8cpp" startline="518" endline="518">evio::ByteBuffer::position</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1ab864753c79b9a896ae8ff2e09ebfc44f" compoundref="d4/d6c/_byte_buffer_8cpp" startline="1325" endline="1340">evio::ByteBuffer::put</references>
        <references refid="dc/d30/classevio_1_1_byte_buffer_1a8bc5745c6525ec0e5bfaee09db9b5c60" compoundref="d4/d6c/_byte_buffer_8cpp" startline="1570" endline="1579">evio::ByteBuffer::putInt</references>
        <references refid="d8/d64/classevio_1_1_record_header_1ac212a9e36880e2bdcb107cbe5101b50a" compoundref="dd/d2d/_record_header_8cpp" startline="1330" endline="1399">evio::RecordHeader::readHeader</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a58e2767d98597e040d5640e4c288b90c" compoundref="d6/dea/_record_header_8h" startline="134">evio::RecordHeader::RECORD_LENGTH_OFFSET</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a7270727098611e695f009bc6e125aaa7" compoundref="dd/d2d/_record_header_8cpp" startline="887" endline="897">evio::RecordHeader::setCompressedDataLength</references>
        <references refid="d8/d64/classevio_1_1_record_header_1ae5812b82ce0e7ca51921ad30c9de7fe1" compoundref="dd/d2d/_record_header_8cpp" startline="918" endline="926">evio::RecordHeader::setCompressionType</references>
        <references refid="d8/d64/classevio_1_1_record_header_1a2eb84874448358dc0fc468b537eed18a" compoundref="dd/d2d/_record_header_8cpp" startline="855" endline="861">evio::RecordHeader::setLength</references>
        <references refid="da/d08/classevio_1_1_compressor_1aed2330d08ee8c96b2690fec7f9a68747a056585718cbf5c7808c0e37b1f88dbb9" compoundref="dc/d17/_compressor_8h" startline="66">evio::Compressor::UNCOMPRESSED</references>
        <references refid="da/d08/classevio_1_1_compressor_1a7c536c78b588c8d70b51e28d0eab1dd8" compoundref="d9/d6a/_compressor_8cpp" startline="689" endline="691">evio::Compressor::uncompressLZ4</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class which reads data to create an Evio or HIPO Record. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is NOT thread safe!</para>
<para><preformatted>
RECORD STRUCTURE:</preformatted></para>
<para><preformatted>              Uncompressed                                      Compressed</preformatted></para>
<para><preformatted>   +----------------------------------+            +----------------------------------+
   |       General Record Header      |            |       General Record Header      |
   +----------------------------------+            +----------------------------------+</preformatted></para>
<para><preformatted>   +----------------------------------+ ---------&gt; +----------------------------------+
   |           Index Array            |            |        Compressed Data           |
   +----------------------------------+            |             Record               |
                                                   |                                  |
   +----------------------------------+            |                                  |
   |           User Header            |            |                  ----------------|
   |           (Optional)             |            |                  |    Pad 3      |
   |                  ----------------|            +----------------------------------+
   |                  |    Pad 1      |           ^
   +----------------------------------+          /
                                                /
   +----------------------------------+       /
   |           Data Record            |     /
   |                                  |    /
   |                  ----------------|   /
   |                  |    Pad 2      | /
   +----------------------------------+</preformatted></para>
<para><preformatted>GENERAL RECORD HEADER STRUCTURE ( see RecordHeader.java )</preformatted></para>
<para><preformatted>   +----------------------------------+
 1 |         Record Length            | // 32bit words, inclusive
   +----------------------------------+
 2 +         Record Number            |
   +----------------------------------+
 3 +         Header Length            | // 14 (words)
   +----------------------------------+
 4 +       Event (Index) Count        |
   +----------------------------------+
 5 +      Index Array Length          | // bytes
   +-----------------------+---------+
 6 +       Bit Info        | Version  | // version (8 bits)
   +-----------------------+----------+
 7 +      User Header Length          | // bytes
   +----------------------------------+
 8 +          Magic Number            | // 0xc0da0100
   +----------------------------------+
 9 +     Uncompressed Data Length     | // bytes
   +------+---------------------------+
10 +  CT  |  Data Length Compressed   | // CT = compression type (4 bits)
   +----------------------------------+
11 +        General Register 1        | // UID 1st (64 bits)
   +--                              --+
12 +                                  |
   +----------------------------------+
13 +        General Register 2        | // UID 2nd (64 bits)
   +--                              --+
14 +                                  |
   +----------------------------------+
</preformatted></para>
<para><simplesect kind="version"><para>6.0 </para>
</simplesect>
<simplesect kind="since"><para>6.0 10/13/17 </para>
</simplesect>
<simplesect kind="author"><para>gavalian </para>
</simplesect>
<simplesect kind="author"><para>timmer (C++ version) </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="src/libsrc/RecordInput.h" line="103" column="5" bodyfile="src/libsrc/RecordInput.h" bodystart="103" bodyend="189"/>
    <listofallmembers>
      <member refid="de/da2/classevio_1_1_record_input_1a1c2525f500188847e62715c652e77708" prot="private" virt="non-virtual"><scope>evio::RecordInput</scope><name>allocate</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a83f064e65d9dd7997d7370d76f80610f" prot="private" virt="non-virtual"><scope>evio::RecordInput</scope><name>byteOrder</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a500d425257b0cea6119e24bfd85a2dd4" prot="private" virt="non-virtual"><scope>evio::RecordInput</scope><name>dataBuffer</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1aa0c4a79a62d044834db0b310f562ab89" prot="private" virt="non-virtual"><scope>evio::RecordInput</scope><name>DEFAULT_BUF_SIZE</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a914d6cd62eae60f59ff39770a7af57d4" prot="private" virt="non-virtual"><scope>evio::RecordInput</scope><name>eventsOffset</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1ac8b1a052e0520138565229072470b036" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>getByteOrder</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a7840a207a13cb1bbe312f35fcc0eca2c" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>getEntries</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a3fc47d4d9e244aa4aa89d9a1006484ef" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>getEvent</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a48a32c2c8ad1ba30a4204c8a56fb84bb" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>getEvent</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a2a4c76794e12fa3433bbc084a0b70196" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>getEvent</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1aa00b2a5e045dcb0dda304b658d97ed26" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>getEventLength</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1aabe9771eb8a45b7a6e3b63f0458c0255" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>getHeader</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1ad3374ca3748213d7b25252b2f5e9d193" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>getUncompressedDataBuffer</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a8d6d188181b47c1e8933555f2d76a435" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>getUserHeader</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1af590580abb73974099c107444b355d97" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>getUserHeader</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1ad5f421e53b8e608d79d8b901034b19dc" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>getUserHeader</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1ae291a1b2eb21afb9d6366bfeaa220b80" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>getUserHeaderAsRecord</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a0f50d5521b94d5c4a520e39a7ef9025f" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>hasIndex</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1af34df12d892e4c91c541d4be07147741" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>hasUserHeader</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a4837543b27e43af6da82428be68a26c6" prot="private" virt="non-virtual"><scope>evio::RecordInput</scope><name>header</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a36a7505e647410c6ce3431f38d4c58a4" prot="private" virt="non-virtual"><scope>evio::RecordInput</scope><name>headerBuffer</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a1a3e0673cba01d084208e36afc44bddc" prot="private" virt="non-virtual"><scope>evio::RecordInput</scope><name>nEntries</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1aa40d7cca1eb46111544ca0a3537d9fdc" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>operator=</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a6d88256111bd532501b99bb95583fe93" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>operator=</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a8bfee12a45ae1f40be0048c1a9044a07" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>readRecord</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a42e735902f78f781e3bb49b2e71c37fc" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>readRecord</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a64b06060b07bf1368c314f449735784e" prot="private" virt="non-virtual"><scope>evio::RecordInput</scope><name>recordBuffer</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a594a0b6430cfd782d741e5835dda7d0a" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>RecordInput</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a50f3443a651a5777f4ca5703a65ec0a4" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>RecordInput</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1ad36390ccb249caf2b414fabfd6dd2aaf" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>RecordInput</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1ac99fdb7643197e0a5936ae98fe90f9cd" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>RecordInput</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a33536900e470668ad47bb368b94e88cc" prot="private" virt="non-virtual"><scope>evio::RecordInput</scope><name>setByteOrder</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1aaec5e98d0fbd179fe794ba29b4622c9c" prot="private" virt="non-virtual"><scope>evio::RecordInput</scope><name>showIndex</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a66ab6c560e25bad2666375484a54124d" prot="private" virt="non-virtual"><scope>evio::RecordInput</scope><name>uncompressedEventsLength</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a1a9f105120b8118fedd4ab43d502f1fa" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>uncompressRecord</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a13b22f107be73ebb28d7ffc907ba81fc" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>uncompressRecord</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a997de5f4b5c9233e67c97ac2d29d3929" prot="private" virt="non-virtual"><scope>evio::RecordInput</scope><name>userHeaderOffset</name></member>
      <member refid="de/da2/classevio_1_1_record_input_1a34d86a58f649571c03497c7eb2ba125a" prot="public" virt="non-virtual"><scope>evio::RecordInput</scope><name>~RecordInput</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
